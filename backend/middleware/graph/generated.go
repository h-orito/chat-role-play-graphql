// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"chat-role-play/middleware/graph/gqlmodel"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	GameCharaSetting() GameCharaSettingResolver
	GameMaster() GameMasterResolver
	GameParticipant() GameParticipantResolver
	GameParticipantDiary() GameParticipantDiaryResolver
	GameParticipantGroup() GameParticipantGroupResolver
	MessageSender() MessageSenderResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	IsAuthenticated func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	ChangePeriodIfNeededPayload struct {
		Ok func(childComplexity int) int
	}

	Chara struct {
		ID     func(childComplexity int) int
		Images func(childComplexity int) int
		Name   func(childComplexity int) int
		Size   func(childComplexity int) int
	}

	CharaImage struct {
		ID   func(childComplexity int) int
		Type func(childComplexity int) int
		URL  func(childComplexity int) int
	}

	CharaSize struct {
		Height func(childComplexity int) int
		Width  func(childComplexity int) int
	}

	Charachip struct {
		CanChangeName  func(childComplexity int) int
		Charas         func(childComplexity int) int
		DescriptionURL func(childComplexity int) int
		Designer       func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
	}

	DeleteDirectMessageFavoritePayload struct {
		Ok func(childComplexity int) int
	}

	DeleteGameMasterPayload struct {
		Ok func(childComplexity int) int
	}

	DeleteGameParticipantFollowPayload struct {
		Ok func(childComplexity int) int
	}

	DeleteGameParticipantIconPayload struct {
		Ok func(childComplexity int) int
	}

	DeleteGameParticipantPayload struct {
		Ok func(childComplexity int) int
	}

	DeleteGamePeriodPayload struct {
		Ok func(childComplexity int) int
	}

	DeleteMessageFavoritePayload struct {
		Ok func(childComplexity int) int
	}

	DeletePlayerSnsAccountPayload struct {
		Ok func(childComplexity int) int
	}

	Designer struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	DirectMessage struct {
		Content            func(childComplexity int) int
		ID                 func(childComplexity int) int
		ParticipantGroupID func(childComplexity int) int
		Reactions          func(childComplexity int) int
		Sender             func(childComplexity int) int
		Time               func(childComplexity int) int
	}

	DirectMessageReactions struct {
		FavoriteCounts         func(childComplexity int) int
		FavoriteParticipantIds func(childComplexity int) int
	}

	DirectMessages struct {
		AllPageCount        func(childComplexity int) int
		CurrentPageNumber   func(childComplexity int) int
		HasNextPage         func(childComplexity int) int
		HasPrePage          func(childComplexity int) int
		IsDesc              func(childComplexity int) int
		IsLatest            func(childComplexity int) int
		LatestUnixTimeMilli func(childComplexity int) int
		List                func(childComplexity int) int
	}

	Game struct {
		GameMasters  func(childComplexity int) int
		ID           func(childComplexity int) int
		Labels       func(childComplexity int) int
		Name         func(childComplexity int) int
		Participants func(childComplexity int, paging *gqlmodel.PageableQuery) int
		Periods      func(childComplexity int) int
		Settings     func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	GameCapacity struct {
		Max func(childComplexity int) int
		Min func(childComplexity int) int
	}

	GameCharaSetting struct {
		CanOriginalCharacter func(childComplexity int) int
		Charachips           func(childComplexity int) int
	}

	GameLabel struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
		Type func(childComplexity int) int
	}

	GameMaster struct {
		ID         func(childComplexity int) int
		IsProducer func(childComplexity int) int
		Player     func(childComplexity int) int
	}

	GameNotificationCondition struct {
		Participate func(childComplexity int) int
		Start       func(childComplexity int) int
	}

	GameParticipant struct {
		CanChangeName          func(childComplexity int) int
		Chara                  func(childComplexity int) int
		EntryNumber            func(childComplexity int) int
		FollowParticipantIds   func(childComplexity int) int
		FollowerParticipantIds func(childComplexity int) int
		ID                     func(childComplexity int) int
		IsGone                 func(childComplexity int) int
		LastAccessedAt         func(childComplexity int) int
		Memo                   func(childComplexity int) int
		Name                   func(childComplexity int) int
		Player                 func(childComplexity int) int
		ProfileIcon            func(childComplexity int) int
	}

	GameParticipantDiary struct {
		Body        func(childComplexity int) int
		ID          func(childComplexity int) int
		Participant func(childComplexity int) int
		Period      func(childComplexity int) int
		Title       func(childComplexity int) int
	}

	GameParticipantGroup struct {
		ID                  func(childComplexity int) int
		LatestUnixTimeMilli func(childComplexity int) int
		Name                func(childComplexity int) int
		Participants        func(childComplexity int) int
	}

	GameParticipantIcon struct {
		DisplayOrder func(childComplexity int) int
		Height       func(childComplexity int) int
		ID           func(childComplexity int) int
		URL          func(childComplexity int) int
		Width        func(childComplexity int) int
	}

	GameParticipantProfile struct {
		EntryNumber     func(childComplexity int) int
		FollowersCount  func(childComplexity int) int
		FollowsCount    func(childComplexity int) int
		Introduction    func(childComplexity int) int
		IsGone          func(childComplexity int) int
		IsPlayerOpen    func(childComplexity int) int
		Name            func(childComplexity int) int
		ParticipantID   func(childComplexity int) int
		PlayerName      func(childComplexity int) int
		ProfileImageURL func(childComplexity int) int
	}

	GameParticipantSetting struct {
		Notification func(childComplexity int) int
	}

	GamePasswordSetting struct {
		HasPassword func(childComplexity int) int
	}

	GamePeriod struct {
		Count   func(childComplexity int) int
		EndAt   func(childComplexity int) int
		ID      func(childComplexity int) int
		Name    func(childComplexity int) int
		StartAt func(childComplexity int) int
	}

	GameRuleSetting struct {
		CanSendDirectMessage func(childComplexity int) int
		CanShorten           func(childComplexity int) int
		IsGameMasterProducer func(childComplexity int) int
		Theme                func(childComplexity int) int
	}

	GameSettings struct {
		Capacity func(childComplexity int) int
		Chara    func(childComplexity int) int
		Password func(childComplexity int) int
		Rule     func(childComplexity int) int
		Time     func(childComplexity int) int
	}

	GameTimeSetting struct {
		EpilogueGameAt        func(childComplexity int) int
		FinishGameAt          func(childComplexity int) int
		OpenAt                func(childComplexity int) int
		PeriodIntervalSeconds func(childComplexity int) int
		PeriodPrefix          func(childComplexity int) int
		PeriodSuffix          func(childComplexity int) int
		StartGameAt           func(childComplexity int) int
		StartParticipateAt    func(childComplexity int) int
	}

	Message struct {
		Content   func(childComplexity int) int
		ID        func(childComplexity int) int
		Reactions func(childComplexity int) int
		Receiver  func(childComplexity int) int
		ReplyTo   func(childComplexity int) int
		Sender    func(childComplexity int) int
		Time      func(childComplexity int) int
	}

	MessageContent struct {
		IsConvertDisabled func(childComplexity int) int
		Number            func(childComplexity int) int
		Text              func(childComplexity int) int
		Type              func(childComplexity int) int
	}

	MessageNotificationCondition struct {
		DirectMessage func(childComplexity int) int
		Keywords      func(childComplexity int) int
		Reply         func(childComplexity int) int
		Secret        func(childComplexity int) int
	}

	MessageReactions struct {
		FavoriteCount          func(childComplexity int) int
		FavoriteParticipantIds func(childComplexity int) int
		ReplyCount             func(childComplexity int) int
	}

	MessageReceiver struct {
		EntryNumber   func(childComplexity int) int
		Name          func(childComplexity int) int
		ParticipantID func(childComplexity int) int
	}

	MessageRecipient struct {
		MessageID     func(childComplexity int) int
		ParticipantID func(childComplexity int) int
	}

	MessageSender struct {
		EntryNumber   func(childComplexity int) int
		Icon          func(childComplexity int) int
		Name          func(childComplexity int) int
		ParticipantID func(childComplexity int) int
	}

	MessageTime struct {
		SendAt            func(childComplexity int) int
		SendUnixTimeMilli func(childComplexity int) int
	}

	Messages struct {
		AllPageCount        func(childComplexity int) int
		CurrentPageNumber   func(childComplexity int) int
		HasNextPage         func(childComplexity int) int
		HasPrePage          func(childComplexity int) int
		IsDesc              func(childComplexity int) int
		IsLatest            func(childComplexity int) int
		LatestUnixTimeMilli func(childComplexity int) int
		List                func(childComplexity int) int
	}

	Mutation struct {
		ChangePeriodIfNeeded          func(childComplexity int, input gqlmodel.ChangePeriod) int
		DeleteDirectMessageFavorite   func(childComplexity int, input gqlmodel.DeleteDirectMessageFavorite) int
		DeleteGameMaster              func(childComplexity int, input gqlmodel.DeleteGameMaster) int
		DeleteGameParticipant         func(childComplexity int, input gqlmodel.DeleteGameParticipant) int
		DeleteGameParticipantFollow   func(childComplexity int, input gqlmodel.DeleteGameParticipantFollow) int
		DeleteGameParticipantIcon     func(childComplexity int, input gqlmodel.DeleteGameParticipantIcon) int
		DeleteGamePeriod              func(childComplexity int, input gqlmodel.DeleteGamePeriod) int
		DeleteMessageFavorite         func(childComplexity int, input gqlmodel.DeleteMessageFavorite) int
		DeletePlayerSnsAccount        func(childComplexity int, input gqlmodel.DeletePlayerSnsAccount) int
		RegisterDebugMessages         func(childComplexity int, input gqlmodel.RegisterDebugMessages) int
		RegisterDirectMessage         func(childComplexity int, input gqlmodel.NewDirectMessage) int
		RegisterDirectMessageDryRun   func(childComplexity int, input gqlmodel.NewDirectMessage) int
		RegisterDirectMessageFavorite func(childComplexity int, input gqlmodel.NewDirectMessageFavorite) int
		RegisterGame                  func(childComplexity int, input gqlmodel.NewGame) int
		RegisterGameMaster            func(childComplexity int, input gqlmodel.NewGameMaster) int
		RegisterGameParticipant       func(childComplexity int, input gqlmodel.NewGameParticipant) int
		RegisterGameParticipantDiary  func(childComplexity int, input gqlmodel.NewGameParticipantDiary) int
		RegisterGameParticipantFollow func(childComplexity int, input gqlmodel.NewGameParticipantFollow) int
		RegisterGameParticipantGroup  func(childComplexity int, input gqlmodel.NewGameParticipantGroup) int
		RegisterGameParticipantIcon   func(childComplexity int, input gqlmodel.NewGameParticipantIcon) int
		RegisterMessage               func(childComplexity int, input gqlmodel.NewMessage) int
		RegisterMessageDryRun         func(childComplexity int, input gqlmodel.NewMessage) int
		RegisterMessageFavorite       func(childComplexity int, input gqlmodel.NewMessageFavorite) int
		RegisterPlayerSnsAccount      func(childComplexity int, input gqlmodel.NewPlayerSnsAccount) int
		UpdateGameMaster              func(childComplexity int, input gqlmodel.UpdateGameMaster) int
		UpdateGameParticipantDiary    func(childComplexity int, input gqlmodel.UpdateGameParticipantDiary) int
		UpdateGameParticipantGroup    func(childComplexity int, input gqlmodel.UpdateGameParticipantGroup) int
		UpdateGameParticipantIcon     func(childComplexity int, input gqlmodel.UpdateGameParticipantIcon) int
		UpdateGameParticipantProfile  func(childComplexity int, input gqlmodel.UpdateGameParticipantProfile) int
		UpdateGameParticipantSetting  func(childComplexity int, input gqlmodel.UpdateGameParticipantSetting) int
		UpdateGamePeriod              func(childComplexity int, input gqlmodel.UpdateGamePeriod) int
		UpdateGameSetting             func(childComplexity int, input gqlmodel.UpdateGameSetting) int
		UpdateGameStatus              func(childComplexity int, input gqlmodel.UpdateGameStatus) int
		UpdatePlayerProfile           func(childComplexity int, input gqlmodel.UpdatePlayerProfile) int
		UpdatePlayerSnsAccount        func(childComplexity int, input gqlmodel.UpdatePlayerSnsAccount) int
	}

	NotificationCondition struct {
		DiscordWebhookURL func(childComplexity int) int
		Game              func(childComplexity int) int
		Message           func(childComplexity int) int
	}

	Player struct {
		AuthorityCodes func(childComplexity int) int
		Designer       func(childComplexity int) int
		ID             func(childComplexity int) int
		Name           func(childComplexity int) int
		Profile        func(childComplexity int) int
	}

	PlayerProfile struct {
		Introduction    func(childComplexity int) int
		ProfileImageURL func(childComplexity int) int
		SnsAccounts     func(childComplexity int) int
	}

	PlayerSnsAccount struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
		Type func(childComplexity int) int
		URL  func(childComplexity int) int
	}

	Query struct {
		Chara                                 func(childComplexity int, id string) int
		Charachip                             func(childComplexity int, id string) int
		Charachips                            func(childComplexity int, query gqlmodel.CharachipsQuery) int
		Designer                              func(childComplexity int, id string) int
		Designers                             func(childComplexity int, query gqlmodel.DesignersQuery) int
		DirectMessage                         func(childComplexity int, gameID string, directMessageID string) int
		DirectMessageFavoriteGameParticipants func(childComplexity int, gameID string, directMessageID string) int
		DirectMessages                        func(childComplexity int, gameID string, query gqlmodel.DirectMessagesQuery) int
		DirectMessagesLatestUnixTimeMilli     func(childComplexity int, gameID string, query gqlmodel.DirectMessagesQuery) int
		Game                                  func(childComplexity int, id string) int
		GameDiaries                           func(childComplexity int, query gqlmodel.GameDiariesQuery) int
		GameDiary                             func(childComplexity int, diaryID string) int
		GameParticipantFollowers              func(childComplexity int, participantID string) int
		GameParticipantFollows                func(childComplexity int, participantID string) int
		GameParticipantGroups                 func(childComplexity int, gameID string, query gqlmodel.GameParticipantGroupsQuery) int
		GameParticipantIcons                  func(childComplexity int, participantID string) int
		GameParticipantProfile                func(childComplexity int, participantID string) int
		GameParticipantSetting                func(childComplexity int, gameID string) int
		Games                                 func(childComplexity int, query gqlmodel.GamesQuery) int
		Message                               func(childComplexity int, gameID string, messageID string) int
		MessageFavoriteGameParticipants       func(childComplexity int, gameID string, messageID string) int
		MessageReplies                        func(childComplexity int, gameID string, messageID string) int
		Messages                              func(childComplexity int, gameID string, query gqlmodel.MessagesQuery) int
		MessagesLatestUnixTimeMilli           func(childComplexity int, gameID string, query gqlmodel.MessagesQuery) int
		MyGameParticipant                     func(childComplexity int, gameID string) int
		MyPlayer                              func(childComplexity int) int
		Player                                func(childComplexity int, id string) int
		Players                               func(childComplexity int, query gqlmodel.PlayersQuery) int
	}

	RegisterDebugMessagesPayload struct {
		Ok func(childComplexity int) int
	}

	RegisterDirectMessageDryRunPayload struct {
		DirectMessage func(childComplexity int) int
	}

	RegisterDirectMessageFavoritePayload struct {
		Ok func(childComplexity int) int
	}

	RegisterDirectMessagePayload struct {
		Ok func(childComplexity int) int
	}

	RegisterGameMasterPayload struct {
		GameMaster func(childComplexity int) int
	}

	RegisterGameParticipantDiaryPayload struct {
		GameParticipantDiary func(childComplexity int) int
	}

	RegisterGameParticipantFollowPayload struct {
		Ok func(childComplexity int) int
	}

	RegisterGameParticipantGroupPayload struct {
		GameParticipantGroup func(childComplexity int) int
	}

	RegisterGameParticipantIconPayload struct {
		GameParticipantIcon func(childComplexity int) int
	}

	RegisterGameParticipantPayload struct {
		GameParticipant func(childComplexity int) int
	}

	RegisterGamePayload struct {
		Game func(childComplexity int) int
	}

	RegisterMessageDryRunPayload struct {
		Message func(childComplexity int) int
	}

	RegisterMessageFavoritePayload struct {
		Ok func(childComplexity int) int
	}

	RegisterMessagePayload struct {
		Ok func(childComplexity int) int
	}

	RegisterPlayerProfilePayload struct {
		PlayerProfile func(childComplexity int) int
	}

	RegisterPlayerSnsAccountPayload struct {
		PlayerSnsAccount func(childComplexity int) int
	}

	SimpleGame struct {
		ID                func(childComplexity int) int
		Labels            func(childComplexity int) int
		Name              func(childComplexity int) int
		ParticipantsCount func(childComplexity int) int
		Periods           func(childComplexity int) int
		Settings          func(childComplexity int) int
		Status            func(childComplexity int) int
	}

	UpdateGameMasterPayload struct {
		Ok func(childComplexity int) int
	}

	UpdateGameParticipantDiaryPayload struct {
		Ok func(childComplexity int) int
	}

	UpdateGameParticipantGroupPayload struct {
		Ok func(childComplexity int) int
	}

	UpdateGameParticipantIconPayload struct {
		Ok func(childComplexity int) int
	}

	UpdateGameParticipantProfilePayload struct {
		Ok func(childComplexity int) int
	}

	UpdateGameParticipantSettingPayload struct {
		Ok func(childComplexity int) int
	}

	UpdateGamePeriodPayload struct {
		Ok func(childComplexity int) int
	}

	UpdateGameSettingPayload struct {
		Ok func(childComplexity int) int
	}

	UpdateGameStatusPayload struct {
		Ok func(childComplexity int) int
	}

	UpdatePlayerProfilePayload struct {
		Ok func(childComplexity int) int
	}

	UpdatePlayerSnsAccountPayload struct {
		Ok func(childComplexity int) int
	}
}

type GameCharaSettingResolver interface {
	Charachips(ctx context.Context, obj *gqlmodel.GameCharaSetting) ([]*gqlmodel.Charachip, error)
}
type GameMasterResolver interface {
	Player(ctx context.Context, obj *gqlmodel.GameMaster) (*gqlmodel.Player, error)
}
type GameParticipantResolver interface {
	Player(ctx context.Context, obj *gqlmodel.GameParticipant) (*gqlmodel.Player, error)
	Chara(ctx context.Context, obj *gqlmodel.GameParticipant) (*gqlmodel.Chara, error)

	ProfileIcon(ctx context.Context, obj *gqlmodel.GameParticipant) (*gqlmodel.GameParticipantIcon, error)

	FollowParticipantIds(ctx context.Context, obj *gqlmodel.GameParticipant) ([]string, error)
	FollowerParticipantIds(ctx context.Context, obj *gqlmodel.GameParticipant) ([]string, error)
}
type GameParticipantDiaryResolver interface {
	Participant(ctx context.Context, obj *gqlmodel.GameParticipantDiary) (*gqlmodel.GameParticipant, error)
	Period(ctx context.Context, obj *gqlmodel.GameParticipantDiary) (*gqlmodel.GamePeriod, error)
}
type GameParticipantGroupResolver interface {
	Participants(ctx context.Context, obj *gqlmodel.GameParticipantGroup) ([]*gqlmodel.GameParticipant, error)
}
type MessageSenderResolver interface {
	Icon(ctx context.Context, obj *gqlmodel.MessageSender) (*gqlmodel.GameParticipantIcon, error)
}
type MutationResolver interface {
	RegisterGame(ctx context.Context, input gqlmodel.NewGame) (*gqlmodel.RegisterGamePayload, error)
	RegisterGameMaster(ctx context.Context, input gqlmodel.NewGameMaster) (*gqlmodel.RegisterGameMasterPayload, error)
	UpdateGameMaster(ctx context.Context, input gqlmodel.UpdateGameMaster) (*gqlmodel.UpdateGameMasterPayload, error)
	DeleteGameMaster(ctx context.Context, input gqlmodel.DeleteGameMaster) (*gqlmodel.DeleteGameMasterPayload, error)
	UpdateGameStatus(ctx context.Context, input gqlmodel.UpdateGameStatus) (*gqlmodel.UpdateGameStatusPayload, error)
	UpdateGameSetting(ctx context.Context, input gqlmodel.UpdateGameSetting) (*gqlmodel.UpdateGameSettingPayload, error)
	UpdateGamePeriod(ctx context.Context, input gqlmodel.UpdateGamePeriod) (*gqlmodel.UpdateGamePeriodPayload, error)
	DeleteGamePeriod(ctx context.Context, input gqlmodel.DeleteGamePeriod) (*gqlmodel.DeleteGamePeriodPayload, error)
	ChangePeriodIfNeeded(ctx context.Context, input gqlmodel.ChangePeriod) (*gqlmodel.ChangePeriodIfNeededPayload, error)
	RegisterGameParticipant(ctx context.Context, input gqlmodel.NewGameParticipant) (*gqlmodel.RegisterGameParticipantPayload, error)
	UpdateGameParticipantProfile(ctx context.Context, input gqlmodel.UpdateGameParticipantProfile) (*gqlmodel.UpdateGameParticipantProfilePayload, error)
	RegisterGameParticipantIcon(ctx context.Context, input gqlmodel.NewGameParticipantIcon) (*gqlmodel.RegisterGameParticipantIconPayload, error)
	UpdateGameParticipantIcon(ctx context.Context, input gqlmodel.UpdateGameParticipantIcon) (*gqlmodel.UpdateGameParticipantIconPayload, error)
	DeleteGameParticipantIcon(ctx context.Context, input gqlmodel.DeleteGameParticipantIcon) (*gqlmodel.DeleteGameParticipantIconPayload, error)
	UpdateGameParticipantSetting(ctx context.Context, input gqlmodel.UpdateGameParticipantSetting) (*gqlmodel.UpdateGameParticipantSettingPayload, error)
	DeleteGameParticipant(ctx context.Context, input gqlmodel.DeleteGameParticipant) (*gqlmodel.DeleteGameParticipantPayload, error)
	RegisterGameParticipantFollow(ctx context.Context, input gqlmodel.NewGameParticipantFollow) (*gqlmodel.RegisterGameParticipantFollowPayload, error)
	DeleteGameParticipantFollow(ctx context.Context, input gqlmodel.DeleteGameParticipantFollow) (*gqlmodel.DeleteGameParticipantFollowPayload, error)
	RegisterGameParticipantDiary(ctx context.Context, input gqlmodel.NewGameParticipantDiary) (*gqlmodel.RegisterGameParticipantDiaryPayload, error)
	UpdateGameParticipantDiary(ctx context.Context, input gqlmodel.UpdateGameParticipantDiary) (*gqlmodel.UpdateGameParticipantDiaryPayload, error)
	UpdatePlayerProfile(ctx context.Context, input gqlmodel.UpdatePlayerProfile) (*gqlmodel.UpdatePlayerProfilePayload, error)
	RegisterPlayerSnsAccount(ctx context.Context, input gqlmodel.NewPlayerSnsAccount) (*gqlmodel.RegisterPlayerSnsAccountPayload, error)
	UpdatePlayerSnsAccount(ctx context.Context, input gqlmodel.UpdatePlayerSnsAccount) (*gqlmodel.UpdatePlayerSnsAccountPayload, error)
	DeletePlayerSnsAccount(ctx context.Context, input gqlmodel.DeletePlayerSnsAccount) (*gqlmodel.DeletePlayerSnsAccountPayload, error)
	RegisterMessageDryRun(ctx context.Context, input gqlmodel.NewMessage) (*gqlmodel.RegisterMessageDryRunPayload, error)
	RegisterMessage(ctx context.Context, input gqlmodel.NewMessage) (*gqlmodel.RegisterMessagePayload, error)
	RegisterMessageFavorite(ctx context.Context, input gqlmodel.NewMessageFavorite) (*gqlmodel.RegisterMessageFavoritePayload, error)
	DeleteMessageFavorite(ctx context.Context, input gqlmodel.DeleteMessageFavorite) (*gqlmodel.DeleteMessageFavoritePayload, error)
	RegisterDirectMessageDryRun(ctx context.Context, input gqlmodel.NewDirectMessage) (*gqlmodel.RegisterDirectMessageDryRunPayload, error)
	RegisterDirectMessage(ctx context.Context, input gqlmodel.NewDirectMessage) (*gqlmodel.RegisterDirectMessagePayload, error)
	RegisterDirectMessageFavorite(ctx context.Context, input gqlmodel.NewDirectMessageFavorite) (*gqlmodel.RegisterDirectMessageFavoritePayload, error)
	DeleteDirectMessageFavorite(ctx context.Context, input gqlmodel.DeleteDirectMessageFavorite) (*gqlmodel.DeleteDirectMessageFavoritePayload, error)
	RegisterGameParticipantGroup(ctx context.Context, input gqlmodel.NewGameParticipantGroup) (*gqlmodel.RegisterGameParticipantGroupPayload, error)
	UpdateGameParticipantGroup(ctx context.Context, input gqlmodel.UpdateGameParticipantGroup) (*gqlmodel.UpdateGameParticipantGroupPayload, error)
	RegisterDebugMessages(ctx context.Context, input gqlmodel.RegisterDebugMessages) (*gqlmodel.RegisterDebugMessagesPayload, error)
}
type QueryResolver interface {
	Designers(ctx context.Context, query gqlmodel.DesignersQuery) ([]*gqlmodel.Designer, error)
	Designer(ctx context.Context, id string) (*gqlmodel.Designer, error)
	Charachips(ctx context.Context, query gqlmodel.CharachipsQuery) ([]*gqlmodel.Charachip, error)
	Charachip(ctx context.Context, id string) (*gqlmodel.Charachip, error)
	Chara(ctx context.Context, id string) (*gqlmodel.Chara, error)
	Games(ctx context.Context, query gqlmodel.GamesQuery) ([]*gqlmodel.SimpleGame, error)
	Game(ctx context.Context, id string) (*gqlmodel.Game, error)
	MyGameParticipant(ctx context.Context, gameID string) (*gqlmodel.GameParticipant, error)
	GameParticipantProfile(ctx context.Context, participantID string) (*gqlmodel.GameParticipantProfile, error)
	GameParticipantIcons(ctx context.Context, participantID string) ([]*gqlmodel.GameParticipantIcon, error)
	GameParticipantFollows(ctx context.Context, participantID string) ([]*gqlmodel.GameParticipant, error)
	GameParticipantFollowers(ctx context.Context, participantID string) ([]*gqlmodel.GameParticipant, error)
	GameParticipantSetting(ctx context.Context, gameID string) (*gqlmodel.GameParticipantSetting, error)
	GameDiaries(ctx context.Context, query gqlmodel.GameDiariesQuery) ([]*gqlmodel.GameParticipantDiary, error)
	GameDiary(ctx context.Context, diaryID string) (*gqlmodel.GameParticipantDiary, error)
	Players(ctx context.Context, query gqlmodel.PlayersQuery) ([]*gqlmodel.Player, error)
	Player(ctx context.Context, id string) (*gqlmodel.Player, error)
	MyPlayer(ctx context.Context) (*gqlmodel.Player, error)
	Messages(ctx context.Context, gameID string, query gqlmodel.MessagesQuery) (*gqlmodel.Messages, error)
	MessagesLatestUnixTimeMilli(ctx context.Context, gameID string, query gqlmodel.MessagesQuery) (uint64, error)
	Message(ctx context.Context, gameID string, messageID string) (*gqlmodel.Message, error)
	MessageReplies(ctx context.Context, gameID string, messageID string) ([]*gqlmodel.Message, error)
	MessageFavoriteGameParticipants(ctx context.Context, gameID string, messageID string) ([]*gqlmodel.GameParticipant, error)
	GameParticipantGroups(ctx context.Context, gameID string, query gqlmodel.GameParticipantGroupsQuery) ([]*gqlmodel.GameParticipantGroup, error)
	DirectMessages(ctx context.Context, gameID string, query gqlmodel.DirectMessagesQuery) (*gqlmodel.DirectMessages, error)
	DirectMessagesLatestUnixTimeMilli(ctx context.Context, gameID string, query gqlmodel.DirectMessagesQuery) (uint64, error)
	DirectMessage(ctx context.Context, gameID string, directMessageID string) (*gqlmodel.DirectMessage, error)
	DirectMessageFavoriteGameParticipants(ctx context.Context, gameID string, directMessageID string) ([]*gqlmodel.GameParticipant, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "ChangePeriodIfNeededPayload.ok":
		if e.complexity.ChangePeriodIfNeededPayload.Ok == nil {
			break
		}

		return e.complexity.ChangePeriodIfNeededPayload.Ok(childComplexity), true

	case "Chara.id":
		if e.complexity.Chara.ID == nil {
			break
		}

		return e.complexity.Chara.ID(childComplexity), true

	case "Chara.images":
		if e.complexity.Chara.Images == nil {
			break
		}

		return e.complexity.Chara.Images(childComplexity), true

	case "Chara.name":
		if e.complexity.Chara.Name == nil {
			break
		}

		return e.complexity.Chara.Name(childComplexity), true

	case "Chara.size":
		if e.complexity.Chara.Size == nil {
			break
		}

		return e.complexity.Chara.Size(childComplexity), true

	case "CharaImage.id":
		if e.complexity.CharaImage.ID == nil {
			break
		}

		return e.complexity.CharaImage.ID(childComplexity), true

	case "CharaImage.type":
		if e.complexity.CharaImage.Type == nil {
			break
		}

		return e.complexity.CharaImage.Type(childComplexity), true

	case "CharaImage.url":
		if e.complexity.CharaImage.URL == nil {
			break
		}

		return e.complexity.CharaImage.URL(childComplexity), true

	case "CharaSize.height":
		if e.complexity.CharaSize.Height == nil {
			break
		}

		return e.complexity.CharaSize.Height(childComplexity), true

	case "CharaSize.width":
		if e.complexity.CharaSize.Width == nil {
			break
		}

		return e.complexity.CharaSize.Width(childComplexity), true

	case "Charachip.canChangeName":
		if e.complexity.Charachip.CanChangeName == nil {
			break
		}

		return e.complexity.Charachip.CanChangeName(childComplexity), true

	case "Charachip.charas":
		if e.complexity.Charachip.Charas == nil {
			break
		}

		return e.complexity.Charachip.Charas(childComplexity), true

	case "Charachip.descriptionUrl":
		if e.complexity.Charachip.DescriptionURL == nil {
			break
		}

		return e.complexity.Charachip.DescriptionURL(childComplexity), true

	case "Charachip.designer":
		if e.complexity.Charachip.Designer == nil {
			break
		}

		return e.complexity.Charachip.Designer(childComplexity), true

	case "Charachip.id":
		if e.complexity.Charachip.ID == nil {
			break
		}

		return e.complexity.Charachip.ID(childComplexity), true

	case "Charachip.name":
		if e.complexity.Charachip.Name == nil {
			break
		}

		return e.complexity.Charachip.Name(childComplexity), true

	case "DeleteDirectMessageFavoritePayload.ok":
		if e.complexity.DeleteDirectMessageFavoritePayload.Ok == nil {
			break
		}

		return e.complexity.DeleteDirectMessageFavoritePayload.Ok(childComplexity), true

	case "DeleteGameMasterPayload.ok":
		if e.complexity.DeleteGameMasterPayload.Ok == nil {
			break
		}

		return e.complexity.DeleteGameMasterPayload.Ok(childComplexity), true

	case "DeleteGameParticipantFollowPayload.ok":
		if e.complexity.DeleteGameParticipantFollowPayload.Ok == nil {
			break
		}

		return e.complexity.DeleteGameParticipantFollowPayload.Ok(childComplexity), true

	case "DeleteGameParticipantIconPayload.ok":
		if e.complexity.DeleteGameParticipantIconPayload.Ok == nil {
			break
		}

		return e.complexity.DeleteGameParticipantIconPayload.Ok(childComplexity), true

	case "DeleteGameParticipantPayload.ok":
		if e.complexity.DeleteGameParticipantPayload.Ok == nil {
			break
		}

		return e.complexity.DeleteGameParticipantPayload.Ok(childComplexity), true

	case "DeleteGamePeriodPayload.ok":
		if e.complexity.DeleteGamePeriodPayload.Ok == nil {
			break
		}

		return e.complexity.DeleteGamePeriodPayload.Ok(childComplexity), true

	case "DeleteMessageFavoritePayload.ok":
		if e.complexity.DeleteMessageFavoritePayload.Ok == nil {
			break
		}

		return e.complexity.DeleteMessageFavoritePayload.Ok(childComplexity), true

	case "DeletePlayerSnsAccountPayload.ok":
		if e.complexity.DeletePlayerSnsAccountPayload.Ok == nil {
			break
		}

		return e.complexity.DeletePlayerSnsAccountPayload.Ok(childComplexity), true

	case "Designer.id":
		if e.complexity.Designer.ID == nil {
			break
		}

		return e.complexity.Designer.ID(childComplexity), true

	case "Designer.name":
		if e.complexity.Designer.Name == nil {
			break
		}

		return e.complexity.Designer.Name(childComplexity), true

	case "DirectMessage.content":
		if e.complexity.DirectMessage.Content == nil {
			break
		}

		return e.complexity.DirectMessage.Content(childComplexity), true

	case "DirectMessage.id":
		if e.complexity.DirectMessage.ID == nil {
			break
		}

		return e.complexity.DirectMessage.ID(childComplexity), true

	case "DirectMessage.participantGroupId":
		if e.complexity.DirectMessage.ParticipantGroupID == nil {
			break
		}

		return e.complexity.DirectMessage.ParticipantGroupID(childComplexity), true

	case "DirectMessage.reactions":
		if e.complexity.DirectMessage.Reactions == nil {
			break
		}

		return e.complexity.DirectMessage.Reactions(childComplexity), true

	case "DirectMessage.sender":
		if e.complexity.DirectMessage.Sender == nil {
			break
		}

		return e.complexity.DirectMessage.Sender(childComplexity), true

	case "DirectMessage.time":
		if e.complexity.DirectMessage.Time == nil {
			break
		}

		return e.complexity.DirectMessage.Time(childComplexity), true

	case "DirectMessageReactions.favoriteCounts":
		if e.complexity.DirectMessageReactions.FavoriteCounts == nil {
			break
		}

		return e.complexity.DirectMessageReactions.FavoriteCounts(childComplexity), true

	case "DirectMessageReactions.favoriteParticipantIds":
		if e.complexity.DirectMessageReactions.FavoriteParticipantIds == nil {
			break
		}

		return e.complexity.DirectMessageReactions.FavoriteParticipantIds(childComplexity), true

	case "DirectMessages.allPageCount":
		if e.complexity.DirectMessages.AllPageCount == nil {
			break
		}

		return e.complexity.DirectMessages.AllPageCount(childComplexity), true

	case "DirectMessages.currentPageNumber":
		if e.complexity.DirectMessages.CurrentPageNumber == nil {
			break
		}

		return e.complexity.DirectMessages.CurrentPageNumber(childComplexity), true

	case "DirectMessages.hasNextPage":
		if e.complexity.DirectMessages.HasNextPage == nil {
			break
		}

		return e.complexity.DirectMessages.HasNextPage(childComplexity), true

	case "DirectMessages.hasPrePage":
		if e.complexity.DirectMessages.HasPrePage == nil {
			break
		}

		return e.complexity.DirectMessages.HasPrePage(childComplexity), true

	case "DirectMessages.isDesc":
		if e.complexity.DirectMessages.IsDesc == nil {
			break
		}

		return e.complexity.DirectMessages.IsDesc(childComplexity), true

	case "DirectMessages.isLatest":
		if e.complexity.DirectMessages.IsLatest == nil {
			break
		}

		return e.complexity.DirectMessages.IsLatest(childComplexity), true

	case "DirectMessages.latestUnixTimeMilli":
		if e.complexity.DirectMessages.LatestUnixTimeMilli == nil {
			break
		}

		return e.complexity.DirectMessages.LatestUnixTimeMilli(childComplexity), true

	case "DirectMessages.list":
		if e.complexity.DirectMessages.List == nil {
			break
		}

		return e.complexity.DirectMessages.List(childComplexity), true

	case "Game.gameMasters":
		if e.complexity.Game.GameMasters == nil {
			break
		}

		return e.complexity.Game.GameMasters(childComplexity), true

	case "Game.id":
		if e.complexity.Game.ID == nil {
			break
		}

		return e.complexity.Game.ID(childComplexity), true

	case "Game.labels":
		if e.complexity.Game.Labels == nil {
			break
		}

		return e.complexity.Game.Labels(childComplexity), true

	case "Game.name":
		if e.complexity.Game.Name == nil {
			break
		}

		return e.complexity.Game.Name(childComplexity), true

	case "Game.participants":
		if e.complexity.Game.Participants == nil {
			break
		}

		args, err := ec.field_Game_participants_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Game.Participants(childComplexity, args["paging"].(*gqlmodel.PageableQuery)), true

	case "Game.periods":
		if e.complexity.Game.Periods == nil {
			break
		}

		return e.complexity.Game.Periods(childComplexity), true

	case "Game.settings":
		if e.complexity.Game.Settings == nil {
			break
		}

		return e.complexity.Game.Settings(childComplexity), true

	case "Game.status":
		if e.complexity.Game.Status == nil {
			break
		}

		return e.complexity.Game.Status(childComplexity), true

	case "GameCapacity.max":
		if e.complexity.GameCapacity.Max == nil {
			break
		}

		return e.complexity.GameCapacity.Max(childComplexity), true

	case "GameCapacity.min":
		if e.complexity.GameCapacity.Min == nil {
			break
		}

		return e.complexity.GameCapacity.Min(childComplexity), true

	case "GameCharaSetting.canOriginalCharacter":
		if e.complexity.GameCharaSetting.CanOriginalCharacter == nil {
			break
		}

		return e.complexity.GameCharaSetting.CanOriginalCharacter(childComplexity), true

	case "GameCharaSetting.charachips":
		if e.complexity.GameCharaSetting.Charachips == nil {
			break
		}

		return e.complexity.GameCharaSetting.Charachips(childComplexity), true

	case "GameLabel.id":
		if e.complexity.GameLabel.ID == nil {
			break
		}

		return e.complexity.GameLabel.ID(childComplexity), true

	case "GameLabel.name":
		if e.complexity.GameLabel.Name == nil {
			break
		}

		return e.complexity.GameLabel.Name(childComplexity), true

	case "GameLabel.type":
		if e.complexity.GameLabel.Type == nil {
			break
		}

		return e.complexity.GameLabel.Type(childComplexity), true

	case "GameMaster.id":
		if e.complexity.GameMaster.ID == nil {
			break
		}

		return e.complexity.GameMaster.ID(childComplexity), true

	case "GameMaster.isProducer":
		if e.complexity.GameMaster.IsProducer == nil {
			break
		}

		return e.complexity.GameMaster.IsProducer(childComplexity), true

	case "GameMaster.player":
		if e.complexity.GameMaster.Player == nil {
			break
		}

		return e.complexity.GameMaster.Player(childComplexity), true

	case "GameNotificationCondition.participate":
		if e.complexity.GameNotificationCondition.Participate == nil {
			break
		}

		return e.complexity.GameNotificationCondition.Participate(childComplexity), true

	case "GameNotificationCondition.start":
		if e.complexity.GameNotificationCondition.Start == nil {
			break
		}

		return e.complexity.GameNotificationCondition.Start(childComplexity), true

	case "GameParticipant.canChangeName":
		if e.complexity.GameParticipant.CanChangeName == nil {
			break
		}

		return e.complexity.GameParticipant.CanChangeName(childComplexity), true

	case "GameParticipant.chara":
		if e.complexity.GameParticipant.Chara == nil {
			break
		}

		return e.complexity.GameParticipant.Chara(childComplexity), true

	case "GameParticipant.entryNumber":
		if e.complexity.GameParticipant.EntryNumber == nil {
			break
		}

		return e.complexity.GameParticipant.EntryNumber(childComplexity), true

	case "GameParticipant.followParticipantIds":
		if e.complexity.GameParticipant.FollowParticipantIds == nil {
			break
		}

		return e.complexity.GameParticipant.FollowParticipantIds(childComplexity), true

	case "GameParticipant.followerParticipantIds":
		if e.complexity.GameParticipant.FollowerParticipantIds == nil {
			break
		}

		return e.complexity.GameParticipant.FollowerParticipantIds(childComplexity), true

	case "GameParticipant.id":
		if e.complexity.GameParticipant.ID == nil {
			break
		}

		return e.complexity.GameParticipant.ID(childComplexity), true

	case "GameParticipant.isGone":
		if e.complexity.GameParticipant.IsGone == nil {
			break
		}

		return e.complexity.GameParticipant.IsGone(childComplexity), true

	case "GameParticipant.lastAccessedAt":
		if e.complexity.GameParticipant.LastAccessedAt == nil {
			break
		}

		return e.complexity.GameParticipant.LastAccessedAt(childComplexity), true

	case "GameParticipant.memo":
		if e.complexity.GameParticipant.Memo == nil {
			break
		}

		return e.complexity.GameParticipant.Memo(childComplexity), true

	case "GameParticipant.name":
		if e.complexity.GameParticipant.Name == nil {
			break
		}

		return e.complexity.GameParticipant.Name(childComplexity), true

	case "GameParticipant.player":
		if e.complexity.GameParticipant.Player == nil {
			break
		}

		return e.complexity.GameParticipant.Player(childComplexity), true

	case "GameParticipant.profileIcon":
		if e.complexity.GameParticipant.ProfileIcon == nil {
			break
		}

		return e.complexity.GameParticipant.ProfileIcon(childComplexity), true

	case "GameParticipantDiary.body":
		if e.complexity.GameParticipantDiary.Body == nil {
			break
		}

		return e.complexity.GameParticipantDiary.Body(childComplexity), true

	case "GameParticipantDiary.id":
		if e.complexity.GameParticipantDiary.ID == nil {
			break
		}

		return e.complexity.GameParticipantDiary.ID(childComplexity), true

	case "GameParticipantDiary.participant":
		if e.complexity.GameParticipantDiary.Participant == nil {
			break
		}

		return e.complexity.GameParticipantDiary.Participant(childComplexity), true

	case "GameParticipantDiary.period":
		if e.complexity.GameParticipantDiary.Period == nil {
			break
		}

		return e.complexity.GameParticipantDiary.Period(childComplexity), true

	case "GameParticipantDiary.title":
		if e.complexity.GameParticipantDiary.Title == nil {
			break
		}

		return e.complexity.GameParticipantDiary.Title(childComplexity), true

	case "GameParticipantGroup.id":
		if e.complexity.GameParticipantGroup.ID == nil {
			break
		}

		return e.complexity.GameParticipantGroup.ID(childComplexity), true

	case "GameParticipantGroup.latestUnixTimeMilli":
		if e.complexity.GameParticipantGroup.LatestUnixTimeMilli == nil {
			break
		}

		return e.complexity.GameParticipantGroup.LatestUnixTimeMilli(childComplexity), true

	case "GameParticipantGroup.name":
		if e.complexity.GameParticipantGroup.Name == nil {
			break
		}

		return e.complexity.GameParticipantGroup.Name(childComplexity), true

	case "GameParticipantGroup.participants":
		if e.complexity.GameParticipantGroup.Participants == nil {
			break
		}

		return e.complexity.GameParticipantGroup.Participants(childComplexity), true

	case "GameParticipantIcon.displayOrder":
		if e.complexity.GameParticipantIcon.DisplayOrder == nil {
			break
		}

		return e.complexity.GameParticipantIcon.DisplayOrder(childComplexity), true

	case "GameParticipantIcon.height":
		if e.complexity.GameParticipantIcon.Height == nil {
			break
		}

		return e.complexity.GameParticipantIcon.Height(childComplexity), true

	case "GameParticipantIcon.id":
		if e.complexity.GameParticipantIcon.ID == nil {
			break
		}

		return e.complexity.GameParticipantIcon.ID(childComplexity), true

	case "GameParticipantIcon.url":
		if e.complexity.GameParticipantIcon.URL == nil {
			break
		}

		return e.complexity.GameParticipantIcon.URL(childComplexity), true

	case "GameParticipantIcon.width":
		if e.complexity.GameParticipantIcon.Width == nil {
			break
		}

		return e.complexity.GameParticipantIcon.Width(childComplexity), true

	case "GameParticipantProfile.entryNumber":
		if e.complexity.GameParticipantProfile.EntryNumber == nil {
			break
		}

		return e.complexity.GameParticipantProfile.EntryNumber(childComplexity), true

	case "GameParticipantProfile.followersCount":
		if e.complexity.GameParticipantProfile.FollowersCount == nil {
			break
		}

		return e.complexity.GameParticipantProfile.FollowersCount(childComplexity), true

	case "GameParticipantProfile.followsCount":
		if e.complexity.GameParticipantProfile.FollowsCount == nil {
			break
		}

		return e.complexity.GameParticipantProfile.FollowsCount(childComplexity), true

	case "GameParticipantProfile.introduction":
		if e.complexity.GameParticipantProfile.Introduction == nil {
			break
		}

		return e.complexity.GameParticipantProfile.Introduction(childComplexity), true

	case "GameParticipantProfile.isGone":
		if e.complexity.GameParticipantProfile.IsGone == nil {
			break
		}

		return e.complexity.GameParticipantProfile.IsGone(childComplexity), true

	case "GameParticipantProfile.isPlayerOpen":
		if e.complexity.GameParticipantProfile.IsPlayerOpen == nil {
			break
		}

		return e.complexity.GameParticipantProfile.IsPlayerOpen(childComplexity), true

	case "GameParticipantProfile.name":
		if e.complexity.GameParticipantProfile.Name == nil {
			break
		}

		return e.complexity.GameParticipantProfile.Name(childComplexity), true

	case "GameParticipantProfile.participantId":
		if e.complexity.GameParticipantProfile.ParticipantID == nil {
			break
		}

		return e.complexity.GameParticipantProfile.ParticipantID(childComplexity), true

	case "GameParticipantProfile.playerName":
		if e.complexity.GameParticipantProfile.PlayerName == nil {
			break
		}

		return e.complexity.GameParticipantProfile.PlayerName(childComplexity), true

	case "GameParticipantProfile.profileImageUrl":
		if e.complexity.GameParticipantProfile.ProfileImageURL == nil {
			break
		}

		return e.complexity.GameParticipantProfile.ProfileImageURL(childComplexity), true

	case "GameParticipantSetting.notification":
		if e.complexity.GameParticipantSetting.Notification == nil {
			break
		}

		return e.complexity.GameParticipantSetting.Notification(childComplexity), true

	case "GamePasswordSetting.hasPassword":
		if e.complexity.GamePasswordSetting.HasPassword == nil {
			break
		}

		return e.complexity.GamePasswordSetting.HasPassword(childComplexity), true

	case "GamePeriod.count":
		if e.complexity.GamePeriod.Count == nil {
			break
		}

		return e.complexity.GamePeriod.Count(childComplexity), true

	case "GamePeriod.endAt":
		if e.complexity.GamePeriod.EndAt == nil {
			break
		}

		return e.complexity.GamePeriod.EndAt(childComplexity), true

	case "GamePeriod.id":
		if e.complexity.GamePeriod.ID == nil {
			break
		}

		return e.complexity.GamePeriod.ID(childComplexity), true

	case "GamePeriod.name":
		if e.complexity.GamePeriod.Name == nil {
			break
		}

		return e.complexity.GamePeriod.Name(childComplexity), true

	case "GamePeriod.startAt":
		if e.complexity.GamePeriod.StartAt == nil {
			break
		}

		return e.complexity.GamePeriod.StartAt(childComplexity), true

	case "GameRuleSetting.canSendDirectMessage":
		if e.complexity.GameRuleSetting.CanSendDirectMessage == nil {
			break
		}

		return e.complexity.GameRuleSetting.CanSendDirectMessage(childComplexity), true

	case "GameRuleSetting.canShorten":
		if e.complexity.GameRuleSetting.CanShorten == nil {
			break
		}

		return e.complexity.GameRuleSetting.CanShorten(childComplexity), true

	case "GameRuleSetting.isGameMasterProducer":
		if e.complexity.GameRuleSetting.IsGameMasterProducer == nil {
			break
		}

		return e.complexity.GameRuleSetting.IsGameMasterProducer(childComplexity), true

	case "GameRuleSetting.theme":
		if e.complexity.GameRuleSetting.Theme == nil {
			break
		}

		return e.complexity.GameRuleSetting.Theme(childComplexity), true

	case "GameSettings.capacity":
		if e.complexity.GameSettings.Capacity == nil {
			break
		}

		return e.complexity.GameSettings.Capacity(childComplexity), true

	case "GameSettings.chara":
		if e.complexity.GameSettings.Chara == nil {
			break
		}

		return e.complexity.GameSettings.Chara(childComplexity), true

	case "GameSettings.password":
		if e.complexity.GameSettings.Password == nil {
			break
		}

		return e.complexity.GameSettings.Password(childComplexity), true

	case "GameSettings.rule":
		if e.complexity.GameSettings.Rule == nil {
			break
		}

		return e.complexity.GameSettings.Rule(childComplexity), true

	case "GameSettings.time":
		if e.complexity.GameSettings.Time == nil {
			break
		}

		return e.complexity.GameSettings.Time(childComplexity), true

	case "GameTimeSetting.epilogueGameAt":
		if e.complexity.GameTimeSetting.EpilogueGameAt == nil {
			break
		}

		return e.complexity.GameTimeSetting.EpilogueGameAt(childComplexity), true

	case "GameTimeSetting.finishGameAt":
		if e.complexity.GameTimeSetting.FinishGameAt == nil {
			break
		}

		return e.complexity.GameTimeSetting.FinishGameAt(childComplexity), true

	case "GameTimeSetting.openAt":
		if e.complexity.GameTimeSetting.OpenAt == nil {
			break
		}

		return e.complexity.GameTimeSetting.OpenAt(childComplexity), true

	case "GameTimeSetting.periodIntervalSeconds":
		if e.complexity.GameTimeSetting.PeriodIntervalSeconds == nil {
			break
		}

		return e.complexity.GameTimeSetting.PeriodIntervalSeconds(childComplexity), true

	case "GameTimeSetting.periodPrefix":
		if e.complexity.GameTimeSetting.PeriodPrefix == nil {
			break
		}

		return e.complexity.GameTimeSetting.PeriodPrefix(childComplexity), true

	case "GameTimeSetting.periodSuffix":
		if e.complexity.GameTimeSetting.PeriodSuffix == nil {
			break
		}

		return e.complexity.GameTimeSetting.PeriodSuffix(childComplexity), true

	case "GameTimeSetting.startGameAt":
		if e.complexity.GameTimeSetting.StartGameAt == nil {
			break
		}

		return e.complexity.GameTimeSetting.StartGameAt(childComplexity), true

	case "GameTimeSetting.startParticipateAt":
		if e.complexity.GameTimeSetting.StartParticipateAt == nil {
			break
		}

		return e.complexity.GameTimeSetting.StartParticipateAt(childComplexity), true

	case "Message.content":
		if e.complexity.Message.Content == nil {
			break
		}

		return e.complexity.Message.Content(childComplexity), true

	case "Message.id":
		if e.complexity.Message.ID == nil {
			break
		}

		return e.complexity.Message.ID(childComplexity), true

	case "Message.reactions":
		if e.complexity.Message.Reactions == nil {
			break
		}

		return e.complexity.Message.Reactions(childComplexity), true

	case "Message.receiver":
		if e.complexity.Message.Receiver == nil {
			break
		}

		return e.complexity.Message.Receiver(childComplexity), true

	case "Message.replyTo":
		if e.complexity.Message.ReplyTo == nil {
			break
		}

		return e.complexity.Message.ReplyTo(childComplexity), true

	case "Message.sender":
		if e.complexity.Message.Sender == nil {
			break
		}

		return e.complexity.Message.Sender(childComplexity), true

	case "Message.time":
		if e.complexity.Message.Time == nil {
			break
		}

		return e.complexity.Message.Time(childComplexity), true

	case "MessageContent.isConvertDisabled":
		if e.complexity.MessageContent.IsConvertDisabled == nil {
			break
		}

		return e.complexity.MessageContent.IsConvertDisabled(childComplexity), true

	case "MessageContent.number":
		if e.complexity.MessageContent.Number == nil {
			break
		}

		return e.complexity.MessageContent.Number(childComplexity), true

	case "MessageContent.text":
		if e.complexity.MessageContent.Text == nil {
			break
		}

		return e.complexity.MessageContent.Text(childComplexity), true

	case "MessageContent.type":
		if e.complexity.MessageContent.Type == nil {
			break
		}

		return e.complexity.MessageContent.Type(childComplexity), true

	case "MessageNotificationCondition.directMessage":
		if e.complexity.MessageNotificationCondition.DirectMessage == nil {
			break
		}

		return e.complexity.MessageNotificationCondition.DirectMessage(childComplexity), true

	case "MessageNotificationCondition.keywords":
		if e.complexity.MessageNotificationCondition.Keywords == nil {
			break
		}

		return e.complexity.MessageNotificationCondition.Keywords(childComplexity), true

	case "MessageNotificationCondition.reply":
		if e.complexity.MessageNotificationCondition.Reply == nil {
			break
		}

		return e.complexity.MessageNotificationCondition.Reply(childComplexity), true

	case "MessageNotificationCondition.secret":
		if e.complexity.MessageNotificationCondition.Secret == nil {
			break
		}

		return e.complexity.MessageNotificationCondition.Secret(childComplexity), true

	case "MessageReactions.favoriteCount":
		if e.complexity.MessageReactions.FavoriteCount == nil {
			break
		}

		return e.complexity.MessageReactions.FavoriteCount(childComplexity), true

	case "MessageReactions.favoriteParticipantIds":
		if e.complexity.MessageReactions.FavoriteParticipantIds == nil {
			break
		}

		return e.complexity.MessageReactions.FavoriteParticipantIds(childComplexity), true

	case "MessageReactions.replyCount":
		if e.complexity.MessageReactions.ReplyCount == nil {
			break
		}

		return e.complexity.MessageReactions.ReplyCount(childComplexity), true

	case "MessageReceiver.entryNumber":
		if e.complexity.MessageReceiver.EntryNumber == nil {
			break
		}

		return e.complexity.MessageReceiver.EntryNumber(childComplexity), true

	case "MessageReceiver.name":
		if e.complexity.MessageReceiver.Name == nil {
			break
		}

		return e.complexity.MessageReceiver.Name(childComplexity), true

	case "MessageReceiver.participantId":
		if e.complexity.MessageReceiver.ParticipantID == nil {
			break
		}

		return e.complexity.MessageReceiver.ParticipantID(childComplexity), true

	case "MessageRecipient.messageId":
		if e.complexity.MessageRecipient.MessageID == nil {
			break
		}

		return e.complexity.MessageRecipient.MessageID(childComplexity), true

	case "MessageRecipient.participantId":
		if e.complexity.MessageRecipient.ParticipantID == nil {
			break
		}

		return e.complexity.MessageRecipient.ParticipantID(childComplexity), true

	case "MessageSender.entryNumber":
		if e.complexity.MessageSender.EntryNumber == nil {
			break
		}

		return e.complexity.MessageSender.EntryNumber(childComplexity), true

	case "MessageSender.icon":
		if e.complexity.MessageSender.Icon == nil {
			break
		}

		return e.complexity.MessageSender.Icon(childComplexity), true

	case "MessageSender.name":
		if e.complexity.MessageSender.Name == nil {
			break
		}

		return e.complexity.MessageSender.Name(childComplexity), true

	case "MessageSender.participantId":
		if e.complexity.MessageSender.ParticipantID == nil {
			break
		}

		return e.complexity.MessageSender.ParticipantID(childComplexity), true

	case "MessageTime.sendAt":
		if e.complexity.MessageTime.SendAt == nil {
			break
		}

		return e.complexity.MessageTime.SendAt(childComplexity), true

	case "MessageTime.sendUnixTimeMilli":
		if e.complexity.MessageTime.SendUnixTimeMilli == nil {
			break
		}

		return e.complexity.MessageTime.SendUnixTimeMilli(childComplexity), true

	case "Messages.allPageCount":
		if e.complexity.Messages.AllPageCount == nil {
			break
		}

		return e.complexity.Messages.AllPageCount(childComplexity), true

	case "Messages.currentPageNumber":
		if e.complexity.Messages.CurrentPageNumber == nil {
			break
		}

		return e.complexity.Messages.CurrentPageNumber(childComplexity), true

	case "Messages.hasNextPage":
		if e.complexity.Messages.HasNextPage == nil {
			break
		}

		return e.complexity.Messages.HasNextPage(childComplexity), true

	case "Messages.hasPrePage":
		if e.complexity.Messages.HasPrePage == nil {
			break
		}

		return e.complexity.Messages.HasPrePage(childComplexity), true

	case "Messages.isDesc":
		if e.complexity.Messages.IsDesc == nil {
			break
		}

		return e.complexity.Messages.IsDesc(childComplexity), true

	case "Messages.isLatest":
		if e.complexity.Messages.IsLatest == nil {
			break
		}

		return e.complexity.Messages.IsLatest(childComplexity), true

	case "Messages.latestUnixTimeMilli":
		if e.complexity.Messages.LatestUnixTimeMilli == nil {
			break
		}

		return e.complexity.Messages.LatestUnixTimeMilli(childComplexity), true

	case "Messages.list":
		if e.complexity.Messages.List == nil {
			break
		}

		return e.complexity.Messages.List(childComplexity), true

	case "Mutation.changePeriodIfNeeded":
		if e.complexity.Mutation.ChangePeriodIfNeeded == nil {
			break
		}

		args, err := ec.field_Mutation_changePeriodIfNeeded_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangePeriodIfNeeded(childComplexity, args["input"].(gqlmodel.ChangePeriod)), true

	case "Mutation.deleteDirectMessageFavorite":
		if e.complexity.Mutation.DeleteDirectMessageFavorite == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDirectMessageFavorite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDirectMessageFavorite(childComplexity, args["input"].(gqlmodel.DeleteDirectMessageFavorite)), true

	case "Mutation.deleteGameMaster":
		if e.complexity.Mutation.DeleteGameMaster == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGameMaster_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGameMaster(childComplexity, args["input"].(gqlmodel.DeleteGameMaster)), true

	case "Mutation.deleteGameParticipant":
		if e.complexity.Mutation.DeleteGameParticipant == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGameParticipant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGameParticipant(childComplexity, args["input"].(gqlmodel.DeleteGameParticipant)), true

	case "Mutation.deleteGameParticipantFollow":
		if e.complexity.Mutation.DeleteGameParticipantFollow == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGameParticipantFollow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGameParticipantFollow(childComplexity, args["input"].(gqlmodel.DeleteGameParticipantFollow)), true

	case "Mutation.deleteGameParticipantIcon":
		if e.complexity.Mutation.DeleteGameParticipantIcon == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGameParticipantIcon_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGameParticipantIcon(childComplexity, args["input"].(gqlmodel.DeleteGameParticipantIcon)), true

	case "Mutation.deleteGamePeriod":
		if e.complexity.Mutation.DeleteGamePeriod == nil {
			break
		}

		args, err := ec.field_Mutation_deleteGamePeriod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteGamePeriod(childComplexity, args["input"].(gqlmodel.DeleteGamePeriod)), true

	case "Mutation.deleteMessageFavorite":
		if e.complexity.Mutation.DeleteMessageFavorite == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMessageFavorite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMessageFavorite(childComplexity, args["input"].(gqlmodel.DeleteMessageFavorite)), true

	case "Mutation.deletePlayerSnsAccount":
		if e.complexity.Mutation.DeletePlayerSnsAccount == nil {
			break
		}

		args, err := ec.field_Mutation_deletePlayerSnsAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePlayerSnsAccount(childComplexity, args["input"].(gqlmodel.DeletePlayerSnsAccount)), true

	case "Mutation.registerDebugMessages":
		if e.complexity.Mutation.RegisterDebugMessages == nil {
			break
		}

		args, err := ec.field_Mutation_registerDebugMessages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterDebugMessages(childComplexity, args["input"].(gqlmodel.RegisterDebugMessages)), true

	case "Mutation.registerDirectMessage":
		if e.complexity.Mutation.RegisterDirectMessage == nil {
			break
		}

		args, err := ec.field_Mutation_registerDirectMessage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterDirectMessage(childComplexity, args["input"].(gqlmodel.NewDirectMessage)), true

	case "Mutation.registerDirectMessageDryRun":
		if e.complexity.Mutation.RegisterDirectMessageDryRun == nil {
			break
		}

		args, err := ec.field_Mutation_registerDirectMessageDryRun_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterDirectMessageDryRun(childComplexity, args["input"].(gqlmodel.NewDirectMessage)), true

	case "Mutation.registerDirectMessageFavorite":
		if e.complexity.Mutation.RegisterDirectMessageFavorite == nil {
			break
		}

		args, err := ec.field_Mutation_registerDirectMessageFavorite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterDirectMessageFavorite(childComplexity, args["input"].(gqlmodel.NewDirectMessageFavorite)), true

	case "Mutation.registerGame":
		if e.complexity.Mutation.RegisterGame == nil {
			break
		}

		args, err := ec.field_Mutation_registerGame_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterGame(childComplexity, args["input"].(gqlmodel.NewGame)), true

	case "Mutation.registerGameMaster":
		if e.complexity.Mutation.RegisterGameMaster == nil {
			break
		}

		args, err := ec.field_Mutation_registerGameMaster_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterGameMaster(childComplexity, args["input"].(gqlmodel.NewGameMaster)), true

	case "Mutation.registerGameParticipant":
		if e.complexity.Mutation.RegisterGameParticipant == nil {
			break
		}

		args, err := ec.field_Mutation_registerGameParticipant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterGameParticipant(childComplexity, args["input"].(gqlmodel.NewGameParticipant)), true

	case "Mutation.registerGameParticipantDiary":
		if e.complexity.Mutation.RegisterGameParticipantDiary == nil {
			break
		}

		args, err := ec.field_Mutation_registerGameParticipantDiary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterGameParticipantDiary(childComplexity, args["input"].(gqlmodel.NewGameParticipantDiary)), true

	case "Mutation.registerGameParticipantFollow":
		if e.complexity.Mutation.RegisterGameParticipantFollow == nil {
			break
		}

		args, err := ec.field_Mutation_registerGameParticipantFollow_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterGameParticipantFollow(childComplexity, args["input"].(gqlmodel.NewGameParticipantFollow)), true

	case "Mutation.registerGameParticipantGroup":
		if e.complexity.Mutation.RegisterGameParticipantGroup == nil {
			break
		}

		args, err := ec.field_Mutation_registerGameParticipantGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterGameParticipantGroup(childComplexity, args["input"].(gqlmodel.NewGameParticipantGroup)), true

	case "Mutation.registerGameParticipantIcon":
		if e.complexity.Mutation.RegisterGameParticipantIcon == nil {
			break
		}

		args, err := ec.field_Mutation_registerGameParticipantIcon_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterGameParticipantIcon(childComplexity, args["input"].(gqlmodel.NewGameParticipantIcon)), true

	case "Mutation.registerMessage":
		if e.complexity.Mutation.RegisterMessage == nil {
			break
		}

		args, err := ec.field_Mutation_registerMessage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterMessage(childComplexity, args["input"].(gqlmodel.NewMessage)), true

	case "Mutation.registerMessageDryRun":
		if e.complexity.Mutation.RegisterMessageDryRun == nil {
			break
		}

		args, err := ec.field_Mutation_registerMessageDryRun_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterMessageDryRun(childComplexity, args["input"].(gqlmodel.NewMessage)), true

	case "Mutation.registerMessageFavorite":
		if e.complexity.Mutation.RegisterMessageFavorite == nil {
			break
		}

		args, err := ec.field_Mutation_registerMessageFavorite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterMessageFavorite(childComplexity, args["input"].(gqlmodel.NewMessageFavorite)), true

	case "Mutation.registerPlayerSnsAccount":
		if e.complexity.Mutation.RegisterPlayerSnsAccount == nil {
			break
		}

		args, err := ec.field_Mutation_registerPlayerSnsAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterPlayerSnsAccount(childComplexity, args["input"].(gqlmodel.NewPlayerSnsAccount)), true

	case "Mutation.updateGameMaster":
		if e.complexity.Mutation.UpdateGameMaster == nil {
			break
		}

		args, err := ec.field_Mutation_updateGameMaster_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGameMaster(childComplexity, args["input"].(gqlmodel.UpdateGameMaster)), true

	case "Mutation.updateGameParticipantDiary":
		if e.complexity.Mutation.UpdateGameParticipantDiary == nil {
			break
		}

		args, err := ec.field_Mutation_updateGameParticipantDiary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGameParticipantDiary(childComplexity, args["input"].(gqlmodel.UpdateGameParticipantDiary)), true

	case "Mutation.updateGameParticipantGroup":
		if e.complexity.Mutation.UpdateGameParticipantGroup == nil {
			break
		}

		args, err := ec.field_Mutation_updateGameParticipantGroup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGameParticipantGroup(childComplexity, args["input"].(gqlmodel.UpdateGameParticipantGroup)), true

	case "Mutation.updateGameParticipantIcon":
		if e.complexity.Mutation.UpdateGameParticipantIcon == nil {
			break
		}

		args, err := ec.field_Mutation_updateGameParticipantIcon_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGameParticipantIcon(childComplexity, args["input"].(gqlmodel.UpdateGameParticipantIcon)), true

	case "Mutation.updateGameParticipantProfile":
		if e.complexity.Mutation.UpdateGameParticipantProfile == nil {
			break
		}

		args, err := ec.field_Mutation_updateGameParticipantProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGameParticipantProfile(childComplexity, args["input"].(gqlmodel.UpdateGameParticipantProfile)), true

	case "Mutation.updateGameParticipantSetting":
		if e.complexity.Mutation.UpdateGameParticipantSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateGameParticipantSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGameParticipantSetting(childComplexity, args["input"].(gqlmodel.UpdateGameParticipantSetting)), true

	case "Mutation.updateGamePeriod":
		if e.complexity.Mutation.UpdateGamePeriod == nil {
			break
		}

		args, err := ec.field_Mutation_updateGamePeriod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGamePeriod(childComplexity, args["input"].(gqlmodel.UpdateGamePeriod)), true

	case "Mutation.updateGameSetting":
		if e.complexity.Mutation.UpdateGameSetting == nil {
			break
		}

		args, err := ec.field_Mutation_updateGameSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGameSetting(childComplexity, args["input"].(gqlmodel.UpdateGameSetting)), true

	case "Mutation.updateGameStatus":
		if e.complexity.Mutation.UpdateGameStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updateGameStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateGameStatus(childComplexity, args["input"].(gqlmodel.UpdateGameStatus)), true

	case "Mutation.updatePlayerProfile":
		if e.complexity.Mutation.UpdatePlayerProfile == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlayerProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlayerProfile(childComplexity, args["input"].(gqlmodel.UpdatePlayerProfile)), true

	case "Mutation.updatePlayerSnsAccount":
		if e.complexity.Mutation.UpdatePlayerSnsAccount == nil {
			break
		}

		args, err := ec.field_Mutation_updatePlayerSnsAccount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePlayerSnsAccount(childComplexity, args["input"].(gqlmodel.UpdatePlayerSnsAccount)), true

	case "NotificationCondition.discordWebhookUrl":
		if e.complexity.NotificationCondition.DiscordWebhookURL == nil {
			break
		}

		return e.complexity.NotificationCondition.DiscordWebhookURL(childComplexity), true

	case "NotificationCondition.game":
		if e.complexity.NotificationCondition.Game == nil {
			break
		}

		return e.complexity.NotificationCondition.Game(childComplexity), true

	case "NotificationCondition.message":
		if e.complexity.NotificationCondition.Message == nil {
			break
		}

		return e.complexity.NotificationCondition.Message(childComplexity), true

	case "Player.authorityCodes":
		if e.complexity.Player.AuthorityCodes == nil {
			break
		}

		return e.complexity.Player.AuthorityCodes(childComplexity), true

	case "Player.designer":
		if e.complexity.Player.Designer == nil {
			break
		}

		return e.complexity.Player.Designer(childComplexity), true

	case "Player.id":
		if e.complexity.Player.ID == nil {
			break
		}

		return e.complexity.Player.ID(childComplexity), true

	case "Player.name":
		if e.complexity.Player.Name == nil {
			break
		}

		return e.complexity.Player.Name(childComplexity), true

	case "Player.profile":
		if e.complexity.Player.Profile == nil {
			break
		}

		return e.complexity.Player.Profile(childComplexity), true

	case "PlayerProfile.introduction":
		if e.complexity.PlayerProfile.Introduction == nil {
			break
		}

		return e.complexity.PlayerProfile.Introduction(childComplexity), true

	case "PlayerProfile.profileImageUrl":
		if e.complexity.PlayerProfile.ProfileImageURL == nil {
			break
		}

		return e.complexity.PlayerProfile.ProfileImageURL(childComplexity), true

	case "PlayerProfile.snsAccounts":
		if e.complexity.PlayerProfile.SnsAccounts == nil {
			break
		}

		return e.complexity.PlayerProfile.SnsAccounts(childComplexity), true

	case "PlayerSnsAccount.id":
		if e.complexity.PlayerSnsAccount.ID == nil {
			break
		}

		return e.complexity.PlayerSnsAccount.ID(childComplexity), true

	case "PlayerSnsAccount.name":
		if e.complexity.PlayerSnsAccount.Name == nil {
			break
		}

		return e.complexity.PlayerSnsAccount.Name(childComplexity), true

	case "PlayerSnsAccount.type":
		if e.complexity.PlayerSnsAccount.Type == nil {
			break
		}

		return e.complexity.PlayerSnsAccount.Type(childComplexity), true

	case "PlayerSnsAccount.url":
		if e.complexity.PlayerSnsAccount.URL == nil {
			break
		}

		return e.complexity.PlayerSnsAccount.URL(childComplexity), true

	case "Query.chara":
		if e.complexity.Query.Chara == nil {
			break
		}

		args, err := ec.field_Query_chara_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Chara(childComplexity, args["id"].(string)), true

	case "Query.charachip":
		if e.complexity.Query.Charachip == nil {
			break
		}

		args, err := ec.field_Query_charachip_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Charachip(childComplexity, args["id"].(string)), true

	case "Query.charachips":
		if e.complexity.Query.Charachips == nil {
			break
		}

		args, err := ec.field_Query_charachips_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Charachips(childComplexity, args["query"].(gqlmodel.CharachipsQuery)), true

	case "Query.designer":
		if e.complexity.Query.Designer == nil {
			break
		}

		args, err := ec.field_Query_designer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Designer(childComplexity, args["id"].(string)), true

	case "Query.designers":
		if e.complexity.Query.Designers == nil {
			break
		}

		args, err := ec.field_Query_designers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Designers(childComplexity, args["query"].(gqlmodel.DesignersQuery)), true

	case "Query.directMessage":
		if e.complexity.Query.DirectMessage == nil {
			break
		}

		args, err := ec.field_Query_directMessage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DirectMessage(childComplexity, args["gameId"].(string), args["directMessageId"].(string)), true

	case "Query.directMessageFavoriteGameParticipants":
		if e.complexity.Query.DirectMessageFavoriteGameParticipants == nil {
			break
		}

		args, err := ec.field_Query_directMessageFavoriteGameParticipants_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DirectMessageFavoriteGameParticipants(childComplexity, args["gameId"].(string), args["directMessageId"].(string)), true

	case "Query.directMessages":
		if e.complexity.Query.DirectMessages == nil {
			break
		}

		args, err := ec.field_Query_directMessages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DirectMessages(childComplexity, args["gameId"].(string), args["query"].(gqlmodel.DirectMessagesQuery)), true

	case "Query.directMessagesLatestUnixTimeMilli":
		if e.complexity.Query.DirectMessagesLatestUnixTimeMilli == nil {
			break
		}

		args, err := ec.field_Query_directMessagesLatestUnixTimeMilli_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DirectMessagesLatestUnixTimeMilli(childComplexity, args["gameId"].(string), args["query"].(gqlmodel.DirectMessagesQuery)), true

	case "Query.game":
		if e.complexity.Query.Game == nil {
			break
		}

		args, err := ec.field_Query_game_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Game(childComplexity, args["id"].(string)), true

	case "Query.gameDiaries":
		if e.complexity.Query.GameDiaries == nil {
			break
		}

		args, err := ec.field_Query_gameDiaries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GameDiaries(childComplexity, args["query"].(gqlmodel.GameDiariesQuery)), true

	case "Query.gameDiary":
		if e.complexity.Query.GameDiary == nil {
			break
		}

		args, err := ec.field_Query_gameDiary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GameDiary(childComplexity, args["diaryId"].(string)), true

	case "Query.gameParticipantFollowers":
		if e.complexity.Query.GameParticipantFollowers == nil {
			break
		}

		args, err := ec.field_Query_gameParticipantFollowers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GameParticipantFollowers(childComplexity, args["participantId"].(string)), true

	case "Query.gameParticipantFollows":
		if e.complexity.Query.GameParticipantFollows == nil {
			break
		}

		args, err := ec.field_Query_gameParticipantFollows_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GameParticipantFollows(childComplexity, args["participantId"].(string)), true

	case "Query.gameParticipantGroups":
		if e.complexity.Query.GameParticipantGroups == nil {
			break
		}

		args, err := ec.field_Query_gameParticipantGroups_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GameParticipantGroups(childComplexity, args["gameId"].(string), args["query"].(gqlmodel.GameParticipantGroupsQuery)), true

	case "Query.gameParticipantIcons":
		if e.complexity.Query.GameParticipantIcons == nil {
			break
		}

		args, err := ec.field_Query_gameParticipantIcons_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GameParticipantIcons(childComplexity, args["participantId"].(string)), true

	case "Query.gameParticipantProfile":
		if e.complexity.Query.GameParticipantProfile == nil {
			break
		}

		args, err := ec.field_Query_gameParticipantProfile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GameParticipantProfile(childComplexity, args["participantId"].(string)), true

	case "Query.gameParticipantSetting":
		if e.complexity.Query.GameParticipantSetting == nil {
			break
		}

		args, err := ec.field_Query_gameParticipantSetting_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GameParticipantSetting(childComplexity, args["gameId"].(string)), true

	case "Query.games":
		if e.complexity.Query.Games == nil {
			break
		}

		args, err := ec.field_Query_games_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Games(childComplexity, args["query"].(gqlmodel.GamesQuery)), true

	case "Query.message":
		if e.complexity.Query.Message == nil {
			break
		}

		args, err := ec.field_Query_message_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Message(childComplexity, args["gameId"].(string), args["messageId"].(string)), true

	case "Query.messageFavoriteGameParticipants":
		if e.complexity.Query.MessageFavoriteGameParticipants == nil {
			break
		}

		args, err := ec.field_Query_messageFavoriteGameParticipants_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MessageFavoriteGameParticipants(childComplexity, args["gameId"].(string), args["messageId"].(string)), true

	case "Query.messageReplies":
		if e.complexity.Query.MessageReplies == nil {
			break
		}

		args, err := ec.field_Query_messageReplies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MessageReplies(childComplexity, args["gameId"].(string), args["messageId"].(string)), true

	case "Query.messages":
		if e.complexity.Query.Messages == nil {
			break
		}

		args, err := ec.field_Query_messages_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Messages(childComplexity, args["gameId"].(string), args["query"].(gqlmodel.MessagesQuery)), true

	case "Query.messagesLatestUnixTimeMilli":
		if e.complexity.Query.MessagesLatestUnixTimeMilli == nil {
			break
		}

		args, err := ec.field_Query_messagesLatestUnixTimeMilli_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MessagesLatestUnixTimeMilli(childComplexity, args["gameId"].(string), args["query"].(gqlmodel.MessagesQuery)), true

	case "Query.myGameParticipant":
		if e.complexity.Query.MyGameParticipant == nil {
			break
		}

		args, err := ec.field_Query_myGameParticipant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MyGameParticipant(childComplexity, args["gameId"].(string)), true

	case "Query.myPlayer":
		if e.complexity.Query.MyPlayer == nil {
			break
		}

		return e.complexity.Query.MyPlayer(childComplexity), true

	case "Query.player":
		if e.complexity.Query.Player == nil {
			break
		}

		args, err := ec.field_Query_player_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Player(childComplexity, args["id"].(string)), true

	case "Query.players":
		if e.complexity.Query.Players == nil {
			break
		}

		args, err := ec.field_Query_players_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Players(childComplexity, args["query"].(gqlmodel.PlayersQuery)), true

	case "RegisterDebugMessagesPayload.ok":
		if e.complexity.RegisterDebugMessagesPayload.Ok == nil {
			break
		}

		return e.complexity.RegisterDebugMessagesPayload.Ok(childComplexity), true

	case "RegisterDirectMessageDryRunPayload.directMessage":
		if e.complexity.RegisterDirectMessageDryRunPayload.DirectMessage == nil {
			break
		}

		return e.complexity.RegisterDirectMessageDryRunPayload.DirectMessage(childComplexity), true

	case "RegisterDirectMessageFavoritePayload.ok":
		if e.complexity.RegisterDirectMessageFavoritePayload.Ok == nil {
			break
		}

		return e.complexity.RegisterDirectMessageFavoritePayload.Ok(childComplexity), true

	case "RegisterDirectMessagePayload.ok":
		if e.complexity.RegisterDirectMessagePayload.Ok == nil {
			break
		}

		return e.complexity.RegisterDirectMessagePayload.Ok(childComplexity), true

	case "RegisterGameMasterPayload.gameMaster":
		if e.complexity.RegisterGameMasterPayload.GameMaster == nil {
			break
		}

		return e.complexity.RegisterGameMasterPayload.GameMaster(childComplexity), true

	case "RegisterGameParticipantDiaryPayload.gameParticipantDiary":
		if e.complexity.RegisterGameParticipantDiaryPayload.GameParticipantDiary == nil {
			break
		}

		return e.complexity.RegisterGameParticipantDiaryPayload.GameParticipantDiary(childComplexity), true

	case "RegisterGameParticipantFollowPayload.ok":
		if e.complexity.RegisterGameParticipantFollowPayload.Ok == nil {
			break
		}

		return e.complexity.RegisterGameParticipantFollowPayload.Ok(childComplexity), true

	case "RegisterGameParticipantGroupPayload.gameParticipantGroup":
		if e.complexity.RegisterGameParticipantGroupPayload.GameParticipantGroup == nil {
			break
		}

		return e.complexity.RegisterGameParticipantGroupPayload.GameParticipantGroup(childComplexity), true

	case "RegisterGameParticipantIconPayload.gameParticipantIcon":
		if e.complexity.RegisterGameParticipantIconPayload.GameParticipantIcon == nil {
			break
		}

		return e.complexity.RegisterGameParticipantIconPayload.GameParticipantIcon(childComplexity), true

	case "RegisterGameParticipantPayload.gameParticipant":
		if e.complexity.RegisterGameParticipantPayload.GameParticipant == nil {
			break
		}

		return e.complexity.RegisterGameParticipantPayload.GameParticipant(childComplexity), true

	case "RegisterGamePayload.game":
		if e.complexity.RegisterGamePayload.Game == nil {
			break
		}

		return e.complexity.RegisterGamePayload.Game(childComplexity), true

	case "RegisterMessageDryRunPayload.message":
		if e.complexity.RegisterMessageDryRunPayload.Message == nil {
			break
		}

		return e.complexity.RegisterMessageDryRunPayload.Message(childComplexity), true

	case "RegisterMessageFavoritePayload.ok":
		if e.complexity.RegisterMessageFavoritePayload.Ok == nil {
			break
		}

		return e.complexity.RegisterMessageFavoritePayload.Ok(childComplexity), true

	case "RegisterMessagePayload.ok":
		if e.complexity.RegisterMessagePayload.Ok == nil {
			break
		}

		return e.complexity.RegisterMessagePayload.Ok(childComplexity), true

	case "RegisterPlayerProfilePayload.playerProfile":
		if e.complexity.RegisterPlayerProfilePayload.PlayerProfile == nil {
			break
		}

		return e.complexity.RegisterPlayerProfilePayload.PlayerProfile(childComplexity), true

	case "RegisterPlayerSnsAccountPayload.playerSnsAccount":
		if e.complexity.RegisterPlayerSnsAccountPayload.PlayerSnsAccount == nil {
			break
		}

		return e.complexity.RegisterPlayerSnsAccountPayload.PlayerSnsAccount(childComplexity), true

	case "SimpleGame.id":
		if e.complexity.SimpleGame.ID == nil {
			break
		}

		return e.complexity.SimpleGame.ID(childComplexity), true

	case "SimpleGame.labels":
		if e.complexity.SimpleGame.Labels == nil {
			break
		}

		return e.complexity.SimpleGame.Labels(childComplexity), true

	case "SimpleGame.name":
		if e.complexity.SimpleGame.Name == nil {
			break
		}

		return e.complexity.SimpleGame.Name(childComplexity), true

	case "SimpleGame.participantsCount":
		if e.complexity.SimpleGame.ParticipantsCount == nil {
			break
		}

		return e.complexity.SimpleGame.ParticipantsCount(childComplexity), true

	case "SimpleGame.periods":
		if e.complexity.SimpleGame.Periods == nil {
			break
		}

		return e.complexity.SimpleGame.Periods(childComplexity), true

	case "SimpleGame.settings":
		if e.complexity.SimpleGame.Settings == nil {
			break
		}

		return e.complexity.SimpleGame.Settings(childComplexity), true

	case "SimpleGame.status":
		if e.complexity.SimpleGame.Status == nil {
			break
		}

		return e.complexity.SimpleGame.Status(childComplexity), true

	case "UpdateGameMasterPayload.ok":
		if e.complexity.UpdateGameMasterPayload.Ok == nil {
			break
		}

		return e.complexity.UpdateGameMasterPayload.Ok(childComplexity), true

	case "UpdateGameParticipantDiaryPayload.ok":
		if e.complexity.UpdateGameParticipantDiaryPayload.Ok == nil {
			break
		}

		return e.complexity.UpdateGameParticipantDiaryPayload.Ok(childComplexity), true

	case "UpdateGameParticipantGroupPayload.ok":
		if e.complexity.UpdateGameParticipantGroupPayload.Ok == nil {
			break
		}

		return e.complexity.UpdateGameParticipantGroupPayload.Ok(childComplexity), true

	case "UpdateGameParticipantIconPayload.ok":
		if e.complexity.UpdateGameParticipantIconPayload.Ok == nil {
			break
		}

		return e.complexity.UpdateGameParticipantIconPayload.Ok(childComplexity), true

	case "UpdateGameParticipantProfilePayload.ok":
		if e.complexity.UpdateGameParticipantProfilePayload.Ok == nil {
			break
		}

		return e.complexity.UpdateGameParticipantProfilePayload.Ok(childComplexity), true

	case "UpdateGameParticipantSettingPayload.ok":
		if e.complexity.UpdateGameParticipantSettingPayload.Ok == nil {
			break
		}

		return e.complexity.UpdateGameParticipantSettingPayload.Ok(childComplexity), true

	case "UpdateGamePeriodPayload.ok":
		if e.complexity.UpdateGamePeriodPayload.Ok == nil {
			break
		}

		return e.complexity.UpdateGamePeriodPayload.Ok(childComplexity), true

	case "UpdateGameSettingPayload.ok":
		if e.complexity.UpdateGameSettingPayload.Ok == nil {
			break
		}

		return e.complexity.UpdateGameSettingPayload.Ok(childComplexity), true

	case "UpdateGameStatusPayload.ok":
		if e.complexity.UpdateGameStatusPayload.Ok == nil {
			break
		}

		return e.complexity.UpdateGameStatusPayload.Ok(childComplexity), true

	case "UpdatePlayerProfilePayload.ok":
		if e.complexity.UpdatePlayerProfilePayload.Ok == nil {
			break
		}

		return e.complexity.UpdatePlayerProfilePayload.Ok(childComplexity), true

	case "UpdatePlayerSnsAccountPayload.ok":
		if e.complexity.UpdatePlayerSnsAccountPayload.Ok == nil {
			break
		}

		return e.complexity.UpdatePlayerSnsAccountPayload.Ok(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputChangePeriod,
		ec.unmarshalInputCharachipsQuery,
		ec.unmarshalInputDeleteDirectMessageFavorite,
		ec.unmarshalInputDeleteGameMaster,
		ec.unmarshalInputDeleteGameParticipant,
		ec.unmarshalInputDeleteGameParticipantFollow,
		ec.unmarshalInputDeleteGameParticipantIcon,
		ec.unmarshalInputDeleteGamePeriod,
		ec.unmarshalInputDeleteMessageFavorite,
		ec.unmarshalInputDeletePlayerSnsAccount,
		ec.unmarshalInputDesignersQuery,
		ec.unmarshalInputDirectMessagesQuery,
		ec.unmarshalInputGameDiariesQuery,
		ec.unmarshalInputGameParticipantGroupsQuery,
		ec.unmarshalInputGamesQuery,
		ec.unmarshalInputMessagesQuery,
		ec.unmarshalInputNewDirectMessage,
		ec.unmarshalInputNewDirectMessageFavorite,
		ec.unmarshalInputNewGame,
		ec.unmarshalInputNewGameCapacity,
		ec.unmarshalInputNewGameCharaSetting,
		ec.unmarshalInputNewGameLabel,
		ec.unmarshalInputNewGameMaster,
		ec.unmarshalInputNewGameParticipant,
		ec.unmarshalInputNewGameParticipantDiary,
		ec.unmarshalInputNewGameParticipantFollow,
		ec.unmarshalInputNewGameParticipantGroup,
		ec.unmarshalInputNewGameParticipantIcon,
		ec.unmarshalInputNewGamePasswordSetting,
		ec.unmarshalInputNewGameRuleSetting,
		ec.unmarshalInputNewGameSettings,
		ec.unmarshalInputNewGameTimeSetting,
		ec.unmarshalInputNewMessage,
		ec.unmarshalInputNewMessageFavorite,
		ec.unmarshalInputNewPlayerProfile,
		ec.unmarshalInputNewPlayerSnsAccount,
		ec.unmarshalInputPageableQuery,
		ec.unmarshalInputParticipantsQuery,
		ec.unmarshalInputPlayersQuery,
		ec.unmarshalInputRegisterDebugMessages,
		ec.unmarshalInputUpdateCharaSetting,
		ec.unmarshalInputUpdateGameCapacity,
		ec.unmarshalInputUpdateGameLabel,
		ec.unmarshalInputUpdateGameMaster,
		ec.unmarshalInputUpdateGameNotificationCondition,
		ec.unmarshalInputUpdateGameParticipantDiary,
		ec.unmarshalInputUpdateGameParticipantGroup,
		ec.unmarshalInputUpdateGameParticipantIcon,
		ec.unmarshalInputUpdateGameParticipantProfile,
		ec.unmarshalInputUpdateGameParticipantSetting,
		ec.unmarshalInputUpdateGamePasswordSetting,
		ec.unmarshalInputUpdateGamePeriod,
		ec.unmarshalInputUpdateGameRuleSetting,
		ec.unmarshalInputUpdateGameSetting,
		ec.unmarshalInputUpdateGameSettings,
		ec.unmarshalInputUpdateGameStatus,
		ec.unmarshalInputUpdateGameTimeSetting,
		ec.unmarshalInputUpdateMessageNotificationCondition,
		ec.unmarshalInputUpdateNotificationCondition,
		ec.unmarshalInputUpdatePlayerProfile,
		ec.unmarshalInputUpdatePlayerSnsAccount,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../../graphql/schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

####################################################

directive @isAuthenticated on FIELD_DEFINITION

# RFC3339 e.g. 2019-11-19T18:00:00+09:00
scalar DateTime

scalar Long

scalar Upload

####################################################

type Charachip {
  id: ID!
  name: String!
  designer: Designer!
  descriptionUrl: String!
  canChangeName: Boolean!
  charas: [Chara!]!
}

type Designer {
  id: ID!
  name: String!
}

type Chara {
  id: ID!
  name: String!
  size: CharaSize!
  images: [CharaImage!]!
}

type CharaSize {
  width: Int!
  height: Int!
}

type CharaImage {
  id: ID!
  type: String!
  url: String!
}

####################################################

type Game {
  id: ID!
  name: String!
  status: GameStatus!
  labels: [GameLabel!]!
  gameMasters: [GameMaster!]!
  participants(paging: PageableQuery): [GameParticipant!]!
  periods: [GamePeriod!]!
  settings: GameSettings!
}

type SimpleGame {
  id: ID!
  name: String!
  status: GameStatus!
  labels: [GameLabel!]!
  participantsCount: Int!
  periods: [GamePeriod!]!
  settings: GameSettings!
}

enum GameStatus {
  Closed
  Opening
  Recruiting
  Progress
  Epilogue
  Finished
  Cancelled
}

type GameMaster {
  id: ID!
  player: Player!
  isProducer: Boolean!
}

type GameLabel {
  id: ID!
  name: String!
  type: String!
}

type GameParticipant {
  id: ID!
  name: String!
  entryNumber: Int!
  player: Player!
  chara: Chara
  memo: String
  profileIcon: GameParticipantIcon
  lastAccessedAt: DateTime!
  isGone: Boolean!
  canChangeName: Boolean!
  followParticipantIds: [ID!]!
  followerParticipantIds: [ID!]!
}

type GameParticipantSetting {
  notification: NotificationCondition!
}

type NotificationCondition {
  discordWebhookUrl: String
  game: GameNotificationCondition!
  message: MessageNotificationCondition!
}

type GameNotificationCondition {
  participate: Boolean!
  start: Boolean!
}

type MessageNotificationCondition {
  reply: Boolean!
  secret: Boolean!
  directMessage: Boolean!
  keywords: [String!]!
}

type GameParticipantProfile {
  participantId: ID!
  name: String!
  entryNumber: Int!
  isGone: Boolean!
  profileImageUrl: String
  introduction: String
  followsCount: Int!
  followersCount: Int!
  isPlayerOpen: Boolean!
  playerName: String
}

type GameParticipantIcon {
  id: ID!
  url: String!
  width: Int!
  height: Int!
  displayOrder: Int!
}

type GamePeriod {
  id: ID!
  count: Int!
  name: String!
  startAt: DateTime!
  endAt: DateTime!
}

type GameParticipantDiary {
  id: ID!
  participant: GameParticipant!
  period: GamePeriod!
  title: String!
  body: String!
}

type GameSettings {
  chara: GameCharaSetting!
  capacity: GameCapacity!
  time: GameTimeSetting!
  rule: GameRuleSetting!
  password: GamePasswordSetting!
}

type GameCharaSetting {
  charachips: [Charachip!]!
  canOriginalCharacter: Boolean!
}

type GameCapacity {
  min: Int!
  max: Int!
}

type GameTimeSetting {
  periodPrefix: String
  periodSuffix: String
  periodIntervalSeconds: Int!
  openAt: DateTime!
  startParticipateAt: DateTime!
  startGameAt: DateTime!
  epilogueGameAt: DateTime!
  finishGameAt: DateTime!
}

type GameRuleSetting {
  isGameMasterProducer: Boolean!
  canShorten: Boolean!
  canSendDirectMessage: Boolean!
  theme: String
}

type GamePasswordSetting {
  hasPassword: Boolean!
}

type GameParticipantGroup {
  id: ID!
  name: String!
  participants: [GameParticipant!]!
  latestUnixTimeMilli: Long!
}

####################################################

type Player {
  id: ID!
  name: String!
  profile: PlayerProfile
  designer: Designer
  authorityCodes: [String!]!
}

type PlayerProfile {
  profileImageUrl: String
  introduction: String
  snsAccounts: [PlayerSnsAccount!]!
}

type PlayerSnsAccount {
  id: ID!
  type: SnsType!
  name: String
  url: String!
}

enum SnsType {
  Twitter
  Mastodon
  Misskey
  Discord
  Github
  WebSite
  Pixiv
}

####################################################

type Messages implements Pageable {
  list: [Message!]!
  allPageCount: Int!
  hasPrePage: Boolean!
  hasNextPage: Boolean!
  currentPageNumber: Int
  isDesc: Boolean!
  isLatest: Boolean!
  latestUnixTimeMilli: Long!
}

type Message {
  id: ID!
  content: MessageContent!
  time: MessageTime!
  sender: MessageSender
  receiver: MessageReceiver
  replyTo: MessageRecipient
  reactions: MessageReactions!
}

type MessageContent {
  type: MessageType!
  number: Int!
  text: String!
  isConvertDisabled: Boolean!
}

enum MessageType {
  TalkNormal
  Monologue
  Secret
  Description
  SystemPublic
  SystemPrivate
}

type MessageTime {
  sendAt: DateTime!
  sendUnixTimeMilli: Long!
}

type MessageSender {
  participantId: ID!
  name: String!
  entryNumber: Int!
  icon: GameParticipantIcon
}

type MessageReceiver {
  participantId: ID!
  name: String!
  entryNumber: Int!
}

type MessageRecipient {
  messageId: ID!
  participantId: ID!
}

type MessageReactions {
  replyCount: Int!
  favoriteCount: Int!
  favoriteParticipantIds: [ID!]!
}

type DirectMessages implements Pageable {
  list: [DirectMessage!]!
  allPageCount: Int!
  hasPrePage: Boolean!
  hasNextPage: Boolean!
  currentPageNumber: Int
  isDesc: Boolean!
  isLatest: Boolean!
  latestUnixTimeMilli: Long!
}

type DirectMessage {
  id: ID!
  participantGroupId: ID!
  content: MessageContent!
  time: MessageTime!
  sender: MessageSender!
  reactions: DirectMessageReactions!
}

type DirectMessageReactions {
  favoriteCounts: Int!
  favoriteParticipantIds: [ID!]!
}

####################################################

interface Pageable {
  allPageCount: Int!
  hasPrePage: Boolean!
  hasNextPage: Boolean!
  currentPageNumber: Int
  isDesc: Boolean!
}

####################################################

type Query {
  designers(query: DesignersQuery!): [Designer!]!
  designer(id: ID!): Designer
  charachips(query: CharachipsQuery!): [Charachip!]!
  charachip(id: ID!): Charachip
  chara(id: ID!): Chara
  games(query: GamesQuery!): [SimpleGame!]!
  game(id: ID!): Game
  myGameParticipant(gameId: ID!): GameParticipant
  gameParticipantProfile(participantId: ID!): GameParticipantProfile!
  gameParticipantIcons(participantId: ID!): [GameParticipantIcon!]!
  gameParticipantFollows(participantId: ID!): [GameParticipant!]!
  gameParticipantFollowers(participantId: ID!): [GameParticipant!]!
  gameParticipantSetting(gameId: ID!): GameParticipantSetting!
  gameDiaries(query: GameDiariesQuery!): [GameParticipantDiary!]!
  gameDiary(diaryId: ID!): GameParticipantDiary
  players(query: PlayersQuery!): [Player!]!
  player(id: ID!): Player
  myPlayer: Player
  messages(gameId: ID!, query: MessagesQuery!): Messages!
  messagesLatestUnixTimeMilli(gameId: ID!, query: MessagesQuery!): Long!
  message(gameId: ID!, messageId: ID!): Message
  messageReplies(gameId: ID!, messageId: ID!): [Message!]!
  messageFavoriteGameParticipants(
    gameId: ID!
    messageId: ID!
  ): [GameParticipant!]!
  gameParticipantGroups(
    gameId: ID!
    query: GameParticipantGroupsQuery!
  ): [GameParticipantGroup!]!
  directMessages(gameId: ID!, query: DirectMessagesQuery!): DirectMessages!
  directMessagesLatestUnixTimeMilli(
    gameId: ID!
    query: DirectMessagesQuery!
  ): Long!
  directMessage(gameId: ID!, directMessageId: ID!): DirectMessage
  directMessageFavoriteGameParticipants(
    gameId: ID!
    directMessageId: ID!
  ): [GameParticipant!]!
}

input PageableQuery {
  pageSize: Int!
  pageNumber: Int!
  isDesc: Boolean!
  isLatest: Boolean!
}

input CharachipsQuery {
  ids: [ID!]
  name: String
  paging: PageableQuery
}

input DesignersQuery {
  ids: [ID!]
  Name: String
  paging: PageableQuery
}

input GamesQuery {
  ids: [ID!]
  name: String
  statuses: [GameStatus!]
  paging: PageableQuery
}

input GameDiariesQuery {
  participantId: ID
  periodId: ID
}

input PlayersQuery {
  ids: [ID!]
  name: String
  paging: PageableQuery
}

input ParticipantsQuery {
  ids: [ID!]
  playerIds: [ID!]
  paging: PageableQuery
}

input MessagesQuery {
  ids: [ID!]
  periodId: ID
  types: [MessageType!]
  senderIds: [ID!]
  replyToMessageId: ID
  keywords: [String!]
  sinceAt: DateTime
  untilAt: DateTime
  offsetUnixTimeMilli: Long
  paging: PageableQuery
}

input GameParticipantGroupsQuery {
  memberParticipantId: ID
}

input DirectMessagesQuery {
  ids: [ID!]
  participantGroupId: ID!
  periodId: ID
  types: [MessageType!]
  senderIds: [ID!]
  keywords: [String!]
  sinceAt: DateTime
  untilAt: DateTime
  offsetUnixTimeMilli: Long
  paging: PageableQuery
}

####################################################

type Mutation {
  # game
  registerGame(input: NewGame!): RegisterGamePayload! @isAuthenticated
  registerGameMaster(input: NewGameMaster!): RegisterGameMasterPayload!
    @isAuthenticated
  updateGameMaster(input: UpdateGameMaster!): UpdateGameMasterPayload!
    @isAuthenticated
  deleteGameMaster(input: DeleteGameMaster!): DeleteGameMasterPayload!
    @isAuthenticated
  updateGameStatus(input: UpdateGameStatus!): UpdateGameStatusPayload!
    @isAuthenticated
  updateGameSetting(input: UpdateGameSetting!): UpdateGameSettingPayload!
    @isAuthenticated
  updateGamePeriod(input: UpdateGamePeriod!): UpdateGamePeriodPayload!
    @isAuthenticated
  deleteGamePeriod(input: DeleteGamePeriod!): DeleteGamePeriodPayload!
    @isAuthenticated
  changePeriodIfNeeded(input: ChangePeriod!): ChangePeriodIfNeededPayload!
    @isAuthenticated

  # game participant
  registerGameParticipant(
    input: NewGameParticipant!
  ): RegisterGameParticipantPayload! @isAuthenticated
  updateGameParticipantProfile(
    input: UpdateGameParticipantProfile!
  ): UpdateGameParticipantProfilePayload! @isAuthenticated
  registerGameParticipantIcon(
    input: NewGameParticipantIcon!
  ): RegisterGameParticipantIconPayload! @isAuthenticated
  updateGameParticipantIcon(
    input: UpdateGameParticipantIcon!
  ): UpdateGameParticipantIconPayload! @isAuthenticated
  deleteGameParticipantIcon(
    input: DeleteGameParticipantIcon!
  ): DeleteGameParticipantIconPayload! @isAuthenticated
  updateGameParticipantSetting(
    input: UpdateGameParticipantSetting!
  ): UpdateGameParticipantSettingPayload! @isAuthenticated
  deleteGameParticipant(
    input: DeleteGameParticipant!
  ): DeleteGameParticipantPayload! @isAuthenticated
  registerGameParticipantFollow(
    input: NewGameParticipantFollow!
  ): RegisterGameParticipantFollowPayload! @isAuthenticated
  deleteGameParticipantFollow(
    input: DeleteGameParticipantFollow!
  ): DeleteGameParticipantFollowPayload! @isAuthenticated
  registerGameParticipantDiary(
    input: NewGameParticipantDiary!
  ): RegisterGameParticipantDiaryPayload! @isAuthenticated
  updateGameParticipantDiary(
    input: UpdateGameParticipantDiary!
  ): UpdateGameParticipantDiaryPayload! @isAuthenticated

  # player
  updatePlayerProfile(input: UpdatePlayerProfile!): UpdatePlayerProfilePayload!
    @isAuthenticated
  registerPlayerSnsAccount(
    input: NewPlayerSnsAccount!
  ): RegisterPlayerSnsAccountPayload! @isAuthenticated
  updatePlayerSnsAccount(
    input: UpdatePlayerSnsAccount!
  ): UpdatePlayerSnsAccountPayload! @isAuthenticated
  deletePlayerSnsAccount(
    input: DeletePlayerSnsAccount!
  ): DeletePlayerSnsAccountPayload! @isAuthenticated

  # message
  registerMessageDryRun(input: NewMessage!): RegisterMessageDryRunPayload!
    @isAuthenticated
  registerMessage(input: NewMessage!): RegisterMessagePayload! @isAuthenticated
  # TODO: updateMessage（メッセージ編集機能）
  registerMessageFavorite(
    input: NewMessageFavorite!
  ): RegisterMessageFavoritePayload! @isAuthenticated
  deleteMessageFavorite(
    input: DeleteMessageFavorite!
  ): DeleteMessageFavoritePayload! @isAuthenticated
  registerDirectMessageDryRun(
    input: NewDirectMessage!
  ): RegisterDirectMessageDryRunPayload! @isAuthenticated
  registerDirectMessage(
    input: NewDirectMessage!
  ): RegisterDirectMessagePayload! @isAuthenticated
  registerDirectMessageFavorite(
    input: NewDirectMessageFavorite!
  ): RegisterDirectMessageFavoritePayload! @isAuthenticated
  deleteDirectMessageFavorite(
    input: DeleteDirectMessageFavorite!
  ): DeleteDirectMessageFavoritePayload! @isAuthenticated
  registerGameParticipantGroup(
    input: NewGameParticipantGroup!
  ): RegisterGameParticipantGroupPayload! @isAuthenticated
  updateGameParticipantGroup(
    input: UpdateGameParticipantGroup!
  ): UpdateGameParticipantGroupPayload! @isAuthenticated

  # debug
  registerDebugMessages(
    input: RegisterDebugMessages!
  ): RegisterDebugMessagesPayload! @isAuthenticated
}

## game

input NewGame {
  name: String!
  labels: [NewGameLabel!]!
  settings: NewGameSettings!
}

input NewGameLabel {
  name: String!
  type: String!
}

input NewGameSettings {
  chara: NewGameCharaSetting!
  capacity: NewGameCapacity!
  time: NewGameTimeSetting!
  rule: NewGameRuleSetting!
  password: NewGamePasswordSetting!
}

input NewGameCharaSetting {
  charachipIds: [String!]!
  canOriginalCharacter: Boolean!
}

input NewGameCapacity {
  min: Int!
  max: Int!
}

input NewGameTimeSetting {
  periodPrefix: String
  periodSuffix: String
  periodIntervalSeconds: Int!
  openAt: DateTime!
  startParticipateAt: DateTime!
  startGameAt: DateTime!
  epilogueGameAt: DateTime!
  finishGameAt: DateTime!
}

input NewGameRuleSetting {
  isGameMasterProducer: Boolean!
  canShorten: Boolean!
  canSendDirectMessage: Boolean!
  theme: String
}

input NewGamePasswordSetting {
  password: String
}

type RegisterGamePayload {
  game: Game!
}

input NewGameMaster {
  gameId: ID!
  playerId: ID!
  isProducer: Boolean!
}

type RegisterGameMasterPayload {
  gameMaster: GameMaster!
}

input UpdateGameMaster {
  gameId: ID!
  id: ID!
  isProducer: Boolean!
}

type UpdateGameMasterPayload {
  ok: Boolean!
}

input DeleteGameMaster {
  gameId: ID!
  id: ID!
}

type DeleteGameMasterPayload {
  ok: Boolean!
}

input UpdateGameSetting {
  gameId: ID!
  name: String!
  labels: [UpdateGameLabel!]!
  settings: UpdateGameSettings!
}

input UpdateGameLabel {
  name: String!
  type: String!
}

input UpdateGameSettings {
  chara: UpdateCharaSetting!
  capacity: UpdateGameCapacity!
  time: UpdateGameTimeSetting!
  rule: UpdateGameRuleSetting!
  password: UpdateGamePasswordSetting!
}

input UpdateCharaSetting {
  charachipIds: [String!]!
  canOriginalCharacter: Boolean!
}

input UpdateGameCapacity {
  min: Int!
  max: Int!
}

input UpdateGameTimeSetting {
  periodPrefix: String
  periodSuffix: String
  periodIntervalSeconds: Int!
  openAt: DateTime!
  startParticipateAt: DateTime!
  startGameAt: DateTime!
  epilogueGameAt: DateTime!
  finishGameAt: DateTime!
}

input UpdateGameRuleSetting {
  isGameMasterProducer: Boolean!
  canShorten: Boolean!
  canSendDirectMessage: Boolean!
  theme: String
}

input UpdateGamePasswordSetting {
  password: String
}

type UpdateGameSettingPayload {
  ok: Boolean!
}

input UpdateGameStatus {
  gameId: ID!
  status: GameStatus!
}

type UpdateGameStatusPayload {
  ok: Boolean!
}

input UpdateGamePeriod {
  gameId: ID!
  periodId: ID!
  name: String!
  startAt: DateTime!
  endAt: DateTime!
}

type UpdateGamePeriodPayload {
  ok: Boolean!
}

input ChangePeriod {
  gameId: ID!
}

type ChangePeriodIfNeededPayload {
  ok: Boolean!
}

input DeleteGamePeriod {
  gameId: ID!
  targetPeriodId: ID!
  destPeriodId: ID!
}

type DeleteGamePeriodPayload {
  ok: Boolean!
}

## game participant

input NewGameParticipant {
  gameId: ID!
  name: String!
  charaId: ID
  password: String
}

type RegisterGameParticipantPayload {
  gameParticipant: GameParticipant!
}

input UpdateGameParticipantProfile {
  gameId: ID!
  name: String!
  profileImageFile: Upload
  profileImageUrl: String
  profileIconId: ID
  introduction: String
  memo: String
  isPlayerOpen: Boolean!
}

type UpdateGameParticipantProfilePayload {
  ok: Boolean!
}

input NewGameParticipantIcon {
  gameId: ID!
  iconFile: Upload!
  width: Int!
  height: Int!
}

type RegisterGameParticipantIconPayload {
  gameParticipantIcon: GameParticipantIcon!
}

input UpdateGameParticipantIcon {
  gameId: ID!
  id: ID!
  displayOrder: Int!
}

type UpdateGameParticipantIconPayload {
  ok: Boolean!
}

input DeleteGameParticipantIcon {
  gameId: ID!
  iconId: ID!
}

type DeleteGameParticipantIconPayload {
  ok: Boolean!
}

input UpdateGameParticipantSetting {
  gameId: ID!
  notification: UpdateNotificationCondition
}

input UpdateNotificationCondition {
  discordWebhookUrl: String
  game: UpdateGameNotificationCondition!
  message: UpdateMessageNotificationCondition!
}

input UpdateGameNotificationCondition {
  participate: Boolean!
  start: Boolean!
}

input UpdateMessageNotificationCondition {
  reply: Boolean!
  secret: Boolean!
  directMessage: Boolean!
  keywords: [String!]!
}

type UpdateGameParticipantSettingPayload {
  ok: Boolean!
}

input DeleteGameParticipant {
  gameId: ID!
}

type DeleteGameParticipantPayload {
  ok: Boolean!
}

input NewGameParticipantFollow {
  gameId: ID!
  targetGameParticipantId: ID!
}

type RegisterGameParticipantFollowPayload {
  ok: Boolean!
}

input DeleteGameParticipantFollow {
  gameId: ID!
  targetGameParticipantId: ID!
}

type DeleteGameParticipantFollowPayload {
  ok: Boolean!
}

input NewGameParticipantDiary {
  gameId: ID!
  periodId: ID!
  title: String!
  body: String!
}

type RegisterGameParticipantDiaryPayload {
  gameParticipantDiary: GameParticipantDiary!
}

input UpdateGameParticipantDiary {
  gameId: ID!
  id: ID!
  title: String!
  body: String!
}

type UpdateGameParticipantDiaryPayload {
  ok: Boolean!
}

## player

input NewPlayerProfile {
  name: String!
  profileImageFile: Upload
  introduction: String
}

type RegisterPlayerProfilePayload {
  playerProfile: PlayerProfile!
}

input UpdatePlayerProfile {
  name: String!
  profileImageFile: Upload
  profileImageUrl: String
  introduction: String
}

type UpdatePlayerProfilePayload {
  ok: Boolean!
}

input NewPlayerSnsAccount {
  type: SnsType!
  accountName: String!
  accountUrl: String!
}

type RegisterPlayerSnsAccountPayload {
  playerSnsAccount: PlayerSnsAccount!
}

input UpdatePlayerSnsAccount {
  id: ID!
  type: SnsType!
  accountName: String!
  accountUrl: String!
}

type UpdatePlayerSnsAccountPayload {
  ok: Boolean!
}

input DeletePlayerSnsAccount {
  id: ID!
}

type DeletePlayerSnsAccountPayload {
  ok: Boolean!
}

## message

input NewMessage {
  gameId: ID!
  type: MessageType!
  iconId: ID
  name: String
  receiverParticipantId: ID
  replyToMessageId: ID
  text: String!
  isConvertDisabled: Boolean!
}

type RegisterMessageDryRunPayload {
  message: Message!
}

type RegisterMessagePayload {
  ok: Boolean!
}

input NewMessageFavorite {
  gameId: ID!
  messageId: ID!
}

type RegisterMessageFavoritePayload {
  ok: Boolean!
}

input DeleteMessageFavorite {
  gameId: ID!
  messageId: ID!
}

type DeleteMessageFavoritePayload {
  ok: Boolean!
}

input NewDirectMessage {
  gameId: ID!
  gameParticipantGroupId: ID!
  type: MessageType!
  iconId: ID!
  name: String!
  text: String!
  isConvertDisabled: Boolean!
}

type RegisterDirectMessageDryRunPayload {
  directMessage: DirectMessage!
}

type RegisterDirectMessagePayload {
  ok: Boolean!
}

input NewDirectMessageFavorite {
  gameId: ID!
  directMessageId: ID!
}

type RegisterDirectMessageFavoritePayload {
  ok: Boolean!
}

input DeleteDirectMessageFavorite {
  gameId: ID!
  directMessageId: ID!
}

type DeleteDirectMessageFavoritePayload {
  ok: Boolean!
}

input NewGameParticipantGroup {
  gameId: ID!
  name: String!
  gameParticipantIds: [ID!]!
}

type RegisterGameParticipantGroupPayload {
  gameParticipantGroup: GameParticipantGroup!
}

input UpdateGameParticipantGroup {
  gameId: ID!
  id: ID!
  name: String!
}

type UpdateGameParticipantGroupPayload {
  ok: Boolean!
}

input RegisterDebugMessages {
  gameId: ID!
}

type RegisterDebugMessagesPayload {
  ok: Boolean!
}

####################################################

# TODO: subscription
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Game_participants_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gqlmodel.PageableQuery
	if tmp, ok := rawArgs["paging"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
		arg0, err = ec.unmarshalOPageableQuery2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paging"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_changePeriodIfNeeded_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.ChangePeriod
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNChangePeriod2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐChangePeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDirectMessageFavorite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.DeleteDirectMessageFavorite
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteDirectMessageFavorite2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteDirectMessageFavorite(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteGameMaster_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.DeleteGameMaster
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteGameMaster2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameMaster(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteGameParticipantFollow_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.DeleteGameParticipantFollow
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteGameParticipantFollow2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipantFollow(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteGameParticipantIcon_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.DeleteGameParticipantIcon
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteGameParticipantIcon2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipantIcon(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteGameParticipant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.DeleteGameParticipant
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteGameParticipant2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipant(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteGamePeriod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.DeleteGamePeriod
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteGamePeriod2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGamePeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMessageFavorite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.DeleteMessageFavorite
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteMessageFavorite2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteMessageFavorite(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePlayerSnsAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.DeletePlayerSnsAccount
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeletePlayerSnsAccount2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeletePlayerSnsAccount(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerDebugMessages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.RegisterDebugMessages
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRegisterDebugMessages2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDebugMessages(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerDirectMessageDryRun_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewDirectMessage
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewDirectMessage2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewDirectMessage(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerDirectMessageFavorite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewDirectMessageFavorite
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewDirectMessageFavorite2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewDirectMessageFavorite(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerDirectMessage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewDirectMessage
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewDirectMessage2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewDirectMessage(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerGameMaster_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewGameMaster
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewGameMaster2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameMaster(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerGameParticipantDiary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewGameParticipantDiary
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewGameParticipantDiary2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameParticipantDiary(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerGameParticipantFollow_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewGameParticipantFollow
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewGameParticipantFollow2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameParticipantFollow(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerGameParticipantGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewGameParticipantGroup
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewGameParticipantGroup2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameParticipantGroup(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerGameParticipantIcon_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewGameParticipantIcon
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewGameParticipantIcon2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameParticipantIcon(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerGameParticipant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewGameParticipant
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewGameParticipant2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameParticipant(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerGame_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewGame
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewGame2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGame(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerMessageDryRun_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewMessage
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewMessage2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewMessage(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerMessageFavorite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewMessageFavorite
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewMessageFavorite2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewMessageFavorite(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerMessage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewMessage
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewMessage2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewMessage(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerPlayerSnsAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.NewPlayerSnsAccount
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewPlayerSnsAccount2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewPlayerSnsAccount(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGameMaster_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdateGameMaster
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateGameMaster2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameMaster(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGameParticipantDiary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdateGameParticipantDiary
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateGameParticipantDiary2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantDiary(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGameParticipantGroup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdateGameParticipantGroup
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateGameParticipantGroup2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantGroup(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGameParticipantIcon_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdateGameParticipantIcon
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateGameParticipantIcon2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantIcon(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGameParticipantProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdateGameParticipantProfile
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateGameParticipantProfile2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantProfile(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGameParticipantSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdateGameParticipantSetting
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateGameParticipantSetting2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantSetting(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGamePeriod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdateGamePeriod
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateGamePeriod2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGamePeriod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGameSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdateGameSetting
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateGameSetting2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameSetting(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateGameStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdateGameStatus
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateGameStatus2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlayerProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdatePlayerProfile
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePlayerProfile2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdatePlayerProfile(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePlayerSnsAccount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.UpdatePlayerSnsAccount
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdatePlayerSnsAccount2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdatePlayerSnsAccount(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_chara_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_charachip_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_charachips_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.CharachipsQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNCharachipsQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharachipsQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_designer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_designers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.DesignersQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNDesignersQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDesignersQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_directMessageFavoriteGameParticipants_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["directMessageId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directMessageId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["directMessageId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_directMessage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["directMessageId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directMessageId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["directMessageId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_directMessagesLatestUnixTimeMilli_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	var arg1 gqlmodel.DirectMessagesQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalNDirectMessagesQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessagesQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_directMessages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	var arg1 gqlmodel.DirectMessagesQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalNDirectMessagesQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessagesQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_gameDiaries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.GameDiariesQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNGameDiariesQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameDiariesQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_gameDiary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["diaryId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diaryId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["diaryId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_gameParticipantFollowers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["participantId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participantId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["participantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_gameParticipantFollows_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["participantId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participantId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["participantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_gameParticipantGroups_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	var arg1 gqlmodel.GameParticipantGroupsQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalNGameParticipantGroupsQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantGroupsQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_gameParticipantIcons_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["participantId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participantId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["participantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_gameParticipantProfile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["participantId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participantId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["participantId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_gameParticipantSetting_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_game_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_games_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.GamesQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNGamesQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGamesQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_messageFavoriteGameParticipants_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["messageId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["messageId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_messageReplies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["messageId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["messageId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_message_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["messageId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["messageId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_messagesLatestUnixTimeMilli_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	var arg1 gqlmodel.MessagesQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalNMessagesQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessagesQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_messages_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	var arg1 gqlmodel.MessagesQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg1, err = ec.unmarshalNMessagesQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessagesQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_myGameParticipant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gameId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gameId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_player_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_players_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gqlmodel.PlayersQuery
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg0, err = ec.unmarshalNPlayersQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayersQuery(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ChangePeriodIfNeededPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.ChangePeriodIfNeededPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChangePeriodIfNeededPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChangePeriodIfNeededPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChangePeriodIfNeededPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Chara_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Chara) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Chara_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Chara_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Chara",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Chara_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Chara) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Chara_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Chara_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Chara",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Chara_size(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Chara) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Chara_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.CharaSize)
	fc.Result = res
	return ec.marshalNCharaSize2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharaSize(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Chara_size(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Chara",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "width":
				return ec.fieldContext_CharaSize_width(ctx, field)
			case "height":
				return ec.fieldContext_CharaSize_height(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CharaSize", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Chara_images(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Chara) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Chara_images(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Images, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.CharaImage)
	fc.Result = res
	return ec.marshalNCharaImage2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharaImageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Chara_images(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Chara",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CharaImage_id(ctx, field)
			case "type":
				return ec.fieldContext_CharaImage_type(ctx, field)
			case "url":
				return ec.fieldContext_CharaImage_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CharaImage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CharaImage_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CharaImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CharaImage_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CharaImage_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CharaImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CharaImage_type(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CharaImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CharaImage_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CharaImage_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CharaImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CharaImage_url(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CharaImage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CharaImage_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CharaImage_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CharaImage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CharaSize_width(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CharaSize) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CharaSize_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CharaSize_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CharaSize",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CharaSize_height(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.CharaSize) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CharaSize_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CharaSize_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CharaSize",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Charachip_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Charachip) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Charachip_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Charachip_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Charachip",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Charachip_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Charachip) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Charachip_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Charachip_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Charachip",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Charachip_designer(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Charachip) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Charachip_designer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Designer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Designer)
	fc.Result = res
	return ec.marshalNDesigner2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDesigner(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Charachip_designer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Charachip",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Designer_id(ctx, field)
			case "name":
				return ec.fieldContext_Designer_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Designer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Charachip_descriptionUrl(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Charachip) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Charachip_descriptionUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DescriptionURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Charachip_descriptionUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Charachip",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Charachip_canChangeName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Charachip) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Charachip_canChangeName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanChangeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Charachip_canChangeName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Charachip",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Charachip_charas(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Charachip) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Charachip_charas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Charas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.Chara)
	fc.Result = res
	return ec.marshalNChara2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Charachip_charas(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Charachip",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Chara_id(ctx, field)
			case "name":
				return ec.fieldContext_Chara_name(ctx, field)
			case "size":
				return ec.fieldContext_Chara_size(ctx, field)
			case "images":
				return ec.fieldContext_Chara_images(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Chara", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteDirectMessageFavoritePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DeleteDirectMessageFavoritePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteDirectMessageFavoritePayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteDirectMessageFavoritePayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteDirectMessageFavoritePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteGameMasterPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DeleteGameMasterPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteGameMasterPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteGameMasterPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteGameMasterPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteGameParticipantFollowPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DeleteGameParticipantFollowPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteGameParticipantFollowPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteGameParticipantFollowPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteGameParticipantFollowPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteGameParticipantIconPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DeleteGameParticipantIconPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteGameParticipantIconPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteGameParticipantIconPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteGameParticipantIconPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteGameParticipantPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DeleteGameParticipantPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteGameParticipantPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteGameParticipantPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteGameParticipantPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteGamePeriodPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DeleteGamePeriodPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteGamePeriodPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteGamePeriodPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteGamePeriodPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeleteMessageFavoritePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DeleteMessageFavoritePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeleteMessageFavoritePayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeleteMessageFavoritePayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeleteMessageFavoritePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeletePlayerSnsAccountPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DeletePlayerSnsAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeletePlayerSnsAccountPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeletePlayerSnsAccountPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeletePlayerSnsAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Designer_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Designer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Designer_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Designer_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Designer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Designer_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Designer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Designer_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Designer_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Designer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessage_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessage_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessage_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessage_participantGroupId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessage_participantGroupId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantGroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessage_participantGroupId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessage_content(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessage_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.MessageContent)
	fc.Result = res
	return ec.marshalNMessageContent2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageContent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessage_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_MessageContent_type(ctx, field)
			case "number":
				return ec.fieldContext_MessageContent_number(ctx, field)
			case "text":
				return ec.fieldContext_MessageContent_text(ctx, field)
			case "isConvertDisabled":
				return ec.fieldContext_MessageContent_isConvertDisabled(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MessageContent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessage_time(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessage_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.MessageTime)
	fc.Result = res
	return ec.marshalNMessageTime2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessage_time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sendAt":
				return ec.fieldContext_MessageTime_sendAt(ctx, field)
			case "sendUnixTimeMilli":
				return ec.fieldContext_MessageTime_sendUnixTimeMilli(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MessageTime", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessage_sender(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessage_sender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.MessageSender)
	fc.Result = res
	return ec.marshalNMessageSender2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageSender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessage_sender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "participantId":
				return ec.fieldContext_MessageSender_participantId(ctx, field)
			case "name":
				return ec.fieldContext_MessageSender_name(ctx, field)
			case "entryNumber":
				return ec.fieldContext_MessageSender_entryNumber(ctx, field)
			case "icon":
				return ec.fieldContext_MessageSender_icon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MessageSender", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessage_reactions(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessage_reactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reactions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DirectMessageReactions)
	fc.Result = res
	return ec.marshalNDirectMessageReactions2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessageReactions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessage_reactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "favoriteCounts":
				return ec.fieldContext_DirectMessageReactions_favoriteCounts(ctx, field)
			case "favoriteParticipantIds":
				return ec.fieldContext_DirectMessageReactions_favoriteParticipantIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DirectMessageReactions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessageReactions_favoriteCounts(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessageReactions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessageReactions_favoriteCounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FavoriteCounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessageReactions_favoriteCounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessageReactions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessageReactions_favoriteParticipantIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessageReactions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessageReactions_favoriteParticipantIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FavoriteParticipantIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessageReactions_favoriteParticipantIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessageReactions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessages_list(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessages_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.DirectMessage)
	fc.Result = res
	return ec.marshalNDirectMessage2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessages_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DirectMessage_id(ctx, field)
			case "participantGroupId":
				return ec.fieldContext_DirectMessage_participantGroupId(ctx, field)
			case "content":
				return ec.fieldContext_DirectMessage_content(ctx, field)
			case "time":
				return ec.fieldContext_DirectMessage_time(ctx, field)
			case "sender":
				return ec.fieldContext_DirectMessage_sender(ctx, field)
			case "reactions":
				return ec.fieldContext_DirectMessage_reactions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DirectMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessages_allPageCount(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessages_allPageCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllPageCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessages_allPageCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessages_hasPrePage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessages_hasPrePage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPrePage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessages_hasPrePage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessages_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessages_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessages_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessages_currentPageNumber(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessages_currentPageNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentPageNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessages_currentPageNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessages_isDesc(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessages_isDesc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessages_isDesc(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessages_isLatest(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessages_isLatest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLatest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessages_isLatest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DirectMessages_latestUnixTimeMilli(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.DirectMessages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DirectMessages_latestUnixTimeMilli(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestUnixTimeMilli, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNLong2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DirectMessages_latestUnixTimeMilli(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DirectMessages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Long does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_status(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.GameStatus)
	fc.Result = res
	return ec.marshalNGameStatus2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GameStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_labels(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_labels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GameLabel)
	fc.Result = res
	return ec.marshalNGameLabel2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameLabelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_labels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameLabel_id(ctx, field)
			case "name":
				return ec.fieldContext_GameLabel_name(ctx, field)
			case "type":
				return ec.fieldContext_GameLabel_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameLabel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_gameMasters(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_gameMasters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameMasters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GameMaster)
	fc.Result = res
	return ec.marshalNGameMaster2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameMasterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_gameMasters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameMaster_id(ctx, field)
			case "player":
				return ec.fieldContext_GameMaster_player(ctx, field)
			case "isProducer":
				return ec.fieldContext_GameMaster_isProducer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMaster", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_participants(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_participants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Participants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GameParticipant)
	fc.Result = res
	return ec.marshalNGameParticipant2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_participants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipant_id(ctx, field)
			case "name":
				return ec.fieldContext_GameParticipant_name(ctx, field)
			case "entryNumber":
				return ec.fieldContext_GameParticipant_entryNumber(ctx, field)
			case "player":
				return ec.fieldContext_GameParticipant_player(ctx, field)
			case "chara":
				return ec.fieldContext_GameParticipant_chara(ctx, field)
			case "memo":
				return ec.fieldContext_GameParticipant_memo(ctx, field)
			case "profileIcon":
				return ec.fieldContext_GameParticipant_profileIcon(ctx, field)
			case "lastAccessedAt":
				return ec.fieldContext_GameParticipant_lastAccessedAt(ctx, field)
			case "isGone":
				return ec.fieldContext_GameParticipant_isGone(ctx, field)
			case "canChangeName":
				return ec.fieldContext_GameParticipant_canChangeName(ctx, field)
			case "followParticipantIds":
				return ec.fieldContext_GameParticipant_followParticipantIds(ctx, field)
			case "followerParticipantIds":
				return ec.fieldContext_GameParticipant_followerParticipantIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Game_participants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Game_periods(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_periods(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Periods, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GamePeriod)
	fc.Result = res
	return ec.marshalNGamePeriod2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGamePeriodᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_periods(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GamePeriod_id(ctx, field)
			case "count":
				return ec.fieldContext_GamePeriod_count(ctx, field)
			case "name":
				return ec.fieldContext_GamePeriod_name(ctx, field)
			case "startAt":
				return ec.fieldContext_GamePeriod_startAt(ctx, field)
			case "endAt":
				return ec.fieldContext_GamePeriod_endAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GamePeriod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Game_settings(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Game) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Game_settings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameSettings)
	fc.Result = res
	return ec.marshalNGameSettings2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Game_settings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Game",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "chara":
				return ec.fieldContext_GameSettings_chara(ctx, field)
			case "capacity":
				return ec.fieldContext_GameSettings_capacity(ctx, field)
			case "time":
				return ec.fieldContext_GameSettings_time(ctx, field)
			case "rule":
				return ec.fieldContext_GameSettings_rule(ctx, field)
			case "password":
				return ec.fieldContext_GameSettings_password(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameCapacity_min(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameCapacity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameCapacity_min(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameCapacity_min(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameCapacity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameCapacity_max(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameCapacity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameCapacity_max(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameCapacity_max(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameCapacity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameCharaSetting_charachips(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameCharaSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameCharaSetting_charachips(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameCharaSetting().Charachips(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.Charachip)
	fc.Result = res
	return ec.marshalNCharachip2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharachipᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameCharaSetting_charachips(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameCharaSetting",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Charachip_id(ctx, field)
			case "name":
				return ec.fieldContext_Charachip_name(ctx, field)
			case "designer":
				return ec.fieldContext_Charachip_designer(ctx, field)
			case "descriptionUrl":
				return ec.fieldContext_Charachip_descriptionUrl(ctx, field)
			case "canChangeName":
				return ec.fieldContext_Charachip_canChangeName(ctx, field)
			case "charas":
				return ec.fieldContext_Charachip_charas(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Charachip", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameCharaSetting_canOriginalCharacter(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameCharaSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameCharaSetting_canOriginalCharacter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanOriginalCharacter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameCharaSetting_canOriginalCharacter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameCharaSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameLabel_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameLabel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameLabel_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameLabel_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameLabel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameLabel_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameLabel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameLabel_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameLabel_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameLabel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameLabel_type(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameLabel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameLabel_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameLabel_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameLabel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMaster_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameMaster) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMaster_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMaster_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMaster",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMaster_player(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameMaster) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMaster_player(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameMaster().Player(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Player)
	fc.Result = res
	return ec.marshalNPlayer2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMaster_player(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMaster",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "profile":
				return ec.fieldContext_Player_profile(ctx, field)
			case "designer":
				return ec.fieldContext_Player_designer(ctx, field)
			case "authorityCodes":
				return ec.fieldContext_Player_authorityCodes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameMaster_isProducer(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameMaster) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameMaster_isProducer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsProducer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameMaster_isProducer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameMaster",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameNotificationCondition_participate(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameNotificationCondition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameNotificationCondition_participate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Participate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameNotificationCondition_participate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameNotificationCondition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameNotificationCondition_start(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameNotificationCondition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameNotificationCondition_start(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameNotificationCondition_start(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameNotificationCondition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipant_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipant_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipant_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipant_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipant_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipant_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipant_entryNumber(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipant_entryNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntryNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipant_entryNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipant_player(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipant_player(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameParticipant().Player(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Player)
	fc.Result = res
	return ec.marshalNPlayer2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipant_player(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipant",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "profile":
				return ec.fieldContext_Player_profile(ctx, field)
			case "designer":
				return ec.fieldContext_Player_designer(ctx, field)
			case "authorityCodes":
				return ec.fieldContext_Player_authorityCodes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipant_chara(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipant_chara(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameParticipant().Chara(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Chara)
	fc.Result = res
	return ec.marshalOChara2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐChara(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipant_chara(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipant",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Chara_id(ctx, field)
			case "name":
				return ec.fieldContext_Chara_name(ctx, field)
			case "size":
				return ec.fieldContext_Chara_size(ctx, field)
			case "images":
				return ec.fieldContext_Chara_images(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Chara", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipant_memo(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipant_memo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Memo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipant_memo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipant_profileIcon(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipant_profileIcon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameParticipant().ProfileIcon(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameParticipantIcon)
	fc.Result = res
	return ec.marshalOGameParticipantIcon2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantIcon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipant_profileIcon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipant",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipantIcon_id(ctx, field)
			case "url":
				return ec.fieldContext_GameParticipantIcon_url(ctx, field)
			case "width":
				return ec.fieldContext_GameParticipantIcon_width(ctx, field)
			case "height":
				return ec.fieldContext_GameParticipantIcon_height(ctx, field)
			case "displayOrder":
				return ec.fieldContext_GameParticipantIcon_displayOrder(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipantIcon", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipant_lastAccessedAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipant_lastAccessedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastAccessedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipant_lastAccessedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipant_isGone(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipant_isGone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipant_isGone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipant_canChangeName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipant_canChangeName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanChangeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipant_canChangeName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipant_followParticipantIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipant_followParticipantIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameParticipant().FollowParticipantIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipant_followParticipantIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipant",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipant_followerParticipantIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipant_followerParticipantIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameParticipant().FollowerParticipantIds(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipant_followerParticipantIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipant",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantDiary_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantDiary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantDiary_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantDiary_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantDiary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantDiary_participant(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantDiary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantDiary_participant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameParticipantDiary().Participant(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameParticipant)
	fc.Result = res
	return ec.marshalNGameParticipant2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantDiary_participant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantDiary",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipant_id(ctx, field)
			case "name":
				return ec.fieldContext_GameParticipant_name(ctx, field)
			case "entryNumber":
				return ec.fieldContext_GameParticipant_entryNumber(ctx, field)
			case "player":
				return ec.fieldContext_GameParticipant_player(ctx, field)
			case "chara":
				return ec.fieldContext_GameParticipant_chara(ctx, field)
			case "memo":
				return ec.fieldContext_GameParticipant_memo(ctx, field)
			case "profileIcon":
				return ec.fieldContext_GameParticipant_profileIcon(ctx, field)
			case "lastAccessedAt":
				return ec.fieldContext_GameParticipant_lastAccessedAt(ctx, field)
			case "isGone":
				return ec.fieldContext_GameParticipant_isGone(ctx, field)
			case "canChangeName":
				return ec.fieldContext_GameParticipant_canChangeName(ctx, field)
			case "followParticipantIds":
				return ec.fieldContext_GameParticipant_followParticipantIds(ctx, field)
			case "followerParticipantIds":
				return ec.fieldContext_GameParticipant_followerParticipantIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantDiary_period(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantDiary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantDiary_period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameParticipantDiary().Period(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GamePeriod)
	fc.Result = res
	return ec.marshalNGamePeriod2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGamePeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantDiary_period(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantDiary",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GamePeriod_id(ctx, field)
			case "count":
				return ec.fieldContext_GamePeriod_count(ctx, field)
			case "name":
				return ec.fieldContext_GamePeriod_name(ctx, field)
			case "startAt":
				return ec.fieldContext_GamePeriod_startAt(ctx, field)
			case "endAt":
				return ec.fieldContext_GamePeriod_endAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GamePeriod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantDiary_title(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantDiary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantDiary_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantDiary_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantDiary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantDiary_body(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantDiary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantDiary_body(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantDiary_body(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantDiary",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantGroup_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantGroup_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantGroup_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantGroup_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantGroup_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantGroup_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantGroup_participants(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantGroup_participants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.GameParticipantGroup().Participants(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GameParticipant)
	fc.Result = res
	return ec.marshalNGameParticipant2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantGroup_participants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantGroup",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipant_id(ctx, field)
			case "name":
				return ec.fieldContext_GameParticipant_name(ctx, field)
			case "entryNumber":
				return ec.fieldContext_GameParticipant_entryNumber(ctx, field)
			case "player":
				return ec.fieldContext_GameParticipant_player(ctx, field)
			case "chara":
				return ec.fieldContext_GameParticipant_chara(ctx, field)
			case "memo":
				return ec.fieldContext_GameParticipant_memo(ctx, field)
			case "profileIcon":
				return ec.fieldContext_GameParticipant_profileIcon(ctx, field)
			case "lastAccessedAt":
				return ec.fieldContext_GameParticipant_lastAccessedAt(ctx, field)
			case "isGone":
				return ec.fieldContext_GameParticipant_isGone(ctx, field)
			case "canChangeName":
				return ec.fieldContext_GameParticipant_canChangeName(ctx, field)
			case "followParticipantIds":
				return ec.fieldContext_GameParticipant_followParticipantIds(ctx, field)
			case "followerParticipantIds":
				return ec.fieldContext_GameParticipant_followerParticipantIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantGroup_latestUnixTimeMilli(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantGroup_latestUnixTimeMilli(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestUnixTimeMilli, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNLong2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantGroup_latestUnixTimeMilli(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Long does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantIcon_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantIcon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantIcon_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantIcon_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantIcon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantIcon_url(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantIcon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantIcon_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantIcon_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantIcon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantIcon_width(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantIcon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantIcon_width(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Width, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantIcon_width(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantIcon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantIcon_height(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantIcon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantIcon_height(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Height, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantIcon_height(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantIcon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantIcon_displayOrder(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantIcon) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantIcon_displayOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantIcon_displayOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantIcon",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantProfile_participantId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantProfile_participantId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantProfile_participantId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantProfile_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantProfile_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantProfile_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantProfile_entryNumber(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantProfile_entryNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntryNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantProfile_entryNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantProfile_isGone(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantProfile_isGone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantProfile_isGone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantProfile_profileImageUrl(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantProfile_profileImageUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantProfile_profileImageUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantProfile_introduction(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantProfile_introduction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Introduction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantProfile_introduction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantProfile_followsCount(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantProfile_followsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantProfile_followsCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantProfile_followersCount(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantProfile_followersCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FollowersCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantProfile_followersCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantProfile_isPlayerOpen(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantProfile_isPlayerOpen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPlayerOpen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantProfile_isPlayerOpen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantProfile_playerName(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantProfile_playerName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlayerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantProfile_playerName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameParticipantSetting_notification(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameParticipantSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameParticipantSetting_notification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.NotificationCondition)
	fc.Result = res
	return ec.marshalNNotificationCondition2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNotificationCondition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameParticipantSetting_notification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameParticipantSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "discordWebhookUrl":
				return ec.fieldContext_NotificationCondition_discordWebhookUrl(ctx, field)
			case "game":
				return ec.fieldContext_NotificationCondition_game(ctx, field)
			case "message":
				return ec.fieldContext_NotificationCondition_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NotificationCondition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePasswordSetting_hasPassword(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GamePasswordSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePasswordSetting_hasPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPassword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePasswordSetting_hasPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePasswordSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePeriod_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GamePeriod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePeriod_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePeriod_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePeriod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePeriod_count(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GamePeriod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePeriod_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePeriod_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePeriod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePeriod_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GamePeriod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePeriod_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePeriod_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePeriod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePeriod_startAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GamePeriod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePeriod_startAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePeriod_startAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePeriod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GamePeriod_endAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GamePeriod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GamePeriod_endAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GamePeriod_endAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GamePeriod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameRuleSetting_isGameMasterProducer(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameRuleSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameRuleSetting_isGameMasterProducer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGameMasterProducer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameRuleSetting_isGameMasterProducer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameRuleSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameRuleSetting_canShorten(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameRuleSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameRuleSetting_canShorten(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanShorten, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameRuleSetting_canShorten(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameRuleSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameRuleSetting_canSendDirectMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameRuleSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameRuleSetting_canSendDirectMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanSendDirectMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameRuleSetting_canSendDirectMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameRuleSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameRuleSetting_theme(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameRuleSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameRuleSetting_theme(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Theme, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameRuleSetting_theme(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameRuleSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameSettings_chara(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameSettings_chara(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chara, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameCharaSetting)
	fc.Result = res
	return ec.marshalNGameCharaSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameCharaSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameSettings_chara(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "charachips":
				return ec.fieldContext_GameCharaSetting_charachips(ctx, field)
			case "canOriginalCharacter":
				return ec.fieldContext_GameCharaSetting_canOriginalCharacter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameCharaSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameSettings_capacity(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameSettings_capacity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Capacity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameCapacity)
	fc.Result = res
	return ec.marshalNGameCapacity2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameCapacity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameSettings_capacity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "min":
				return ec.fieldContext_GameCapacity_min(ctx, field)
			case "max":
				return ec.fieldContext_GameCapacity_max(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameCapacity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameSettings_time(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameSettings_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameTimeSetting)
	fc.Result = res
	return ec.marshalNGameTimeSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameTimeSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameSettings_time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "periodPrefix":
				return ec.fieldContext_GameTimeSetting_periodPrefix(ctx, field)
			case "periodSuffix":
				return ec.fieldContext_GameTimeSetting_periodSuffix(ctx, field)
			case "periodIntervalSeconds":
				return ec.fieldContext_GameTimeSetting_periodIntervalSeconds(ctx, field)
			case "openAt":
				return ec.fieldContext_GameTimeSetting_openAt(ctx, field)
			case "startParticipateAt":
				return ec.fieldContext_GameTimeSetting_startParticipateAt(ctx, field)
			case "startGameAt":
				return ec.fieldContext_GameTimeSetting_startGameAt(ctx, field)
			case "epilogueGameAt":
				return ec.fieldContext_GameTimeSetting_epilogueGameAt(ctx, field)
			case "finishGameAt":
				return ec.fieldContext_GameTimeSetting_finishGameAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameTimeSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameSettings_rule(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameSettings_rule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameRuleSetting)
	fc.Result = res
	return ec.marshalNGameRuleSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameRuleSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameSettings_rule(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isGameMasterProducer":
				return ec.fieldContext_GameRuleSetting_isGameMasterProducer(ctx, field)
			case "canShorten":
				return ec.fieldContext_GameRuleSetting_canShorten(ctx, field)
			case "canSendDirectMessage":
				return ec.fieldContext_GameRuleSetting_canSendDirectMessage(ctx, field)
			case "theme":
				return ec.fieldContext_GameRuleSetting_theme(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameRuleSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameSettings_password(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameSettings_password(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GamePasswordSetting)
	fc.Result = res
	return ec.marshalNGamePasswordSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGamePasswordSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameSettings_password(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasPassword":
				return ec.fieldContext_GamePasswordSetting_hasPassword(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GamePasswordSetting", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTimeSetting_periodPrefix(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameTimeSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTimeSetting_periodPrefix(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodPrefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTimeSetting_periodPrefix(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTimeSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTimeSetting_periodSuffix(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameTimeSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTimeSetting_periodSuffix(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodSuffix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTimeSetting_periodSuffix(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTimeSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTimeSetting_periodIntervalSeconds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameTimeSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTimeSetting_periodIntervalSeconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodIntervalSeconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTimeSetting_periodIntervalSeconds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTimeSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTimeSetting_openAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameTimeSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTimeSetting_openAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpenAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTimeSetting_openAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTimeSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTimeSetting_startParticipateAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameTimeSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTimeSetting_startParticipateAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartParticipateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTimeSetting_startParticipateAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTimeSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTimeSetting_startGameAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameTimeSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTimeSetting_startGameAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartGameAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTimeSetting_startGameAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTimeSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTimeSetting_epilogueGameAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameTimeSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTimeSetting_epilogueGameAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpilogueGameAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTimeSetting_epilogueGameAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTimeSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GameTimeSetting_finishGameAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.GameTimeSetting) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GameTimeSetting_finishGameAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinishGameAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GameTimeSetting_finishGameAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GameTimeSetting",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_content(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.MessageContent)
	fc.Result = res
	return ec.marshalNMessageContent2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageContent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_MessageContent_type(ctx, field)
			case "number":
				return ec.fieldContext_MessageContent_number(ctx, field)
			case "text":
				return ec.fieldContext_MessageContent_text(ctx, field)
			case "isConvertDisabled":
				return ec.fieldContext_MessageContent_isConvertDisabled(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MessageContent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_time(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.MessageTime)
	fc.Result = res
	return ec.marshalNMessageTime2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sendAt":
				return ec.fieldContext_MessageTime_sendAt(ctx, field)
			case "sendUnixTimeMilli":
				return ec.fieldContext_MessageTime_sendUnixTimeMilli(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MessageTime", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_sender(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_sender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.MessageSender)
	fc.Result = res
	return ec.marshalOMessageSender2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageSender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_sender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "participantId":
				return ec.fieldContext_MessageSender_participantId(ctx, field)
			case "name":
				return ec.fieldContext_MessageSender_name(ctx, field)
			case "entryNumber":
				return ec.fieldContext_MessageSender_entryNumber(ctx, field)
			case "icon":
				return ec.fieldContext_MessageSender_icon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MessageSender", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_receiver(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_receiver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Receiver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.MessageReceiver)
	fc.Result = res
	return ec.marshalOMessageReceiver2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageReceiver(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_receiver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "participantId":
				return ec.fieldContext_MessageReceiver_participantId(ctx, field)
			case "name":
				return ec.fieldContext_MessageReceiver_name(ctx, field)
			case "entryNumber":
				return ec.fieldContext_MessageReceiver_entryNumber(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MessageReceiver", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_replyTo(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_replyTo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplyTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.MessageRecipient)
	fc.Result = res
	return ec.marshalOMessageRecipient2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageRecipient(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_replyTo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "messageId":
				return ec.fieldContext_MessageRecipient_messageId(ctx, field)
			case "participantId":
				return ec.fieldContext_MessageRecipient_participantId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MessageRecipient", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Message_reactions(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Message) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Message_reactions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reactions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.MessageReactions)
	fc.Result = res
	return ec.marshalNMessageReactions2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageReactions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Message_reactions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Message",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "replyCount":
				return ec.fieldContext_MessageReactions_replyCount(ctx, field)
			case "favoriteCount":
				return ec.fieldContext_MessageReactions_favoriteCount(ctx, field)
			case "favoriteParticipantIds":
				return ec.fieldContext_MessageReactions_favoriteParticipantIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MessageReactions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageContent_type(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageContent_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.MessageType)
	fc.Result = res
	return ec.marshalNMessageType2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageContent_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MessageType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageContent_number(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageContent_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageContent_number(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageContent_text(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageContent_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageContent_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageContent_isConvertDisabled(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageContent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageContent_isConvertDisabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsConvertDisabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageContent_isConvertDisabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageContent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageNotificationCondition_reply(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageNotificationCondition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageNotificationCondition_reply(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reply, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageNotificationCondition_reply(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageNotificationCondition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageNotificationCondition_secret(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageNotificationCondition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageNotificationCondition_secret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageNotificationCondition_secret(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageNotificationCondition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageNotificationCondition_directMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageNotificationCondition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageNotificationCondition_directMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageNotificationCondition_directMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageNotificationCondition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageNotificationCondition_keywords(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageNotificationCondition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageNotificationCondition_keywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keywords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageNotificationCondition_keywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageNotificationCondition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageReactions_replyCount(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageReactions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageReactions_replyCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplyCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageReactions_replyCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageReactions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageReactions_favoriteCount(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageReactions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageReactions_favoriteCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FavoriteCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageReactions_favoriteCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageReactions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageReactions_favoriteParticipantIds(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageReactions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageReactions_favoriteParticipantIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FavoriteParticipantIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageReactions_favoriteParticipantIds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageReactions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageReceiver_participantId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageReceiver) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageReceiver_participantId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageReceiver_participantId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageReceiver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageReceiver_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageReceiver) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageReceiver_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageReceiver_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageReceiver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageReceiver_entryNumber(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageReceiver) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageReceiver_entryNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntryNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageReceiver_entryNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageReceiver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageRecipient_messageId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageRecipient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageRecipient_messageId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageRecipient_messageId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageRecipient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageRecipient_participantId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageRecipient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageRecipient_participantId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageRecipient_participantId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageRecipient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageSender_participantId(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageSender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageSender_participantId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageSender_participantId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageSender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageSender_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageSender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageSender_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageSender_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageSender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageSender_entryNumber(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageSender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageSender_entryNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntryNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageSender_entryNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageSender",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageSender_icon(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageSender) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageSender_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MessageSender().Icon(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameParticipantIcon)
	fc.Result = res
	return ec.marshalOGameParticipantIcon2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantIcon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageSender_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageSender",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipantIcon_id(ctx, field)
			case "url":
				return ec.fieldContext_GameParticipantIcon_url(ctx, field)
			case "width":
				return ec.fieldContext_GameParticipantIcon_width(ctx, field)
			case "height":
				return ec.fieldContext_GameParticipantIcon_height(ctx, field)
			case "displayOrder":
				return ec.fieldContext_GameParticipantIcon_displayOrder(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipantIcon", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageTime_sendAt(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageTime) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageTime_sendAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageTime_sendAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageTime",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MessageTime_sendUnixTimeMilli(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.MessageTime) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MessageTime_sendUnixTimeMilli(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SendUnixTimeMilli, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNLong2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MessageTime_sendUnixTimeMilli(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MessageTime",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Long does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Messages_list(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Messages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Messages_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.Message)
	fc.Result = res
	return ec.marshalNMessage2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Messages_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Messages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Message_id(ctx, field)
			case "content":
				return ec.fieldContext_Message_content(ctx, field)
			case "time":
				return ec.fieldContext_Message_time(ctx, field)
			case "sender":
				return ec.fieldContext_Message_sender(ctx, field)
			case "receiver":
				return ec.fieldContext_Message_receiver(ctx, field)
			case "replyTo":
				return ec.fieldContext_Message_replyTo(ctx, field)
			case "reactions":
				return ec.fieldContext_Message_reactions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Message", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Messages_allPageCount(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Messages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Messages_allPageCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllPageCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Messages_allPageCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Messages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Messages_hasPrePage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Messages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Messages_hasPrePage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPrePage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Messages_hasPrePage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Messages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Messages_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Messages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Messages_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Messages_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Messages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Messages_currentPageNumber(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Messages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Messages_currentPageNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentPageNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Messages_currentPageNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Messages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Messages_isDesc(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Messages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Messages_isDesc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDesc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Messages_isDesc(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Messages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Messages_isLatest(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Messages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Messages_isLatest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLatest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Messages_isLatest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Messages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Messages_latestUnixTimeMilli(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Messages) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Messages_latestUnixTimeMilli(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestUnixTimeMilli, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNLong2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Messages_latestUnixTimeMilli(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Messages",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Long does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerGame(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerGame(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterGame(rctx, fc.Args["input"].(gqlmodel.NewGame))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterGamePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterGamePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterGamePayload)
	fc.Result = res
	return ec.marshalNRegisterGamePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGamePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerGame(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "game":
				return ec.fieldContext_RegisterGamePayload_game(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterGamePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerGame_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerGameMaster(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerGameMaster(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterGameMaster(rctx, fc.Args["input"].(gqlmodel.NewGameMaster))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterGameMasterPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterGameMasterPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterGameMasterPayload)
	fc.Result = res
	return ec.marshalNRegisterGameMasterPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameMasterPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerGameMaster(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameMaster":
				return ec.fieldContext_RegisterGameMasterPayload_gameMaster(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterGameMasterPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerGameMaster_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGameMaster(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGameMaster(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateGameMaster(rctx, fc.Args["input"].(gqlmodel.UpdateGameMaster))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdateGameMasterPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.UpdateGameMasterPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdateGameMasterPayload)
	fc.Result = res
	return ec.marshalNUpdateGameMasterPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameMasterPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGameMaster(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdateGameMasterPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateGameMasterPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGameMaster_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteGameMaster(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteGameMaster(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteGameMaster(rctx, fc.Args["input"].(gqlmodel.DeleteGameMaster))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.DeleteGameMasterPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.DeleteGameMasterPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DeleteGameMasterPayload)
	fc.Result = res
	return ec.marshalNDeleteGameMasterPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameMasterPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteGameMaster(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_DeleteGameMasterPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteGameMasterPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteGameMaster_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGameStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGameStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateGameStatus(rctx, fc.Args["input"].(gqlmodel.UpdateGameStatus))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdateGameStatusPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.UpdateGameStatusPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdateGameStatusPayload)
	fc.Result = res
	return ec.marshalNUpdateGameStatusPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameStatusPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGameStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdateGameStatusPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateGameStatusPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGameStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGameSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGameSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateGameSetting(rctx, fc.Args["input"].(gqlmodel.UpdateGameSetting))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdateGameSettingPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.UpdateGameSettingPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdateGameSettingPayload)
	fc.Result = res
	return ec.marshalNUpdateGameSettingPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameSettingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGameSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdateGameSettingPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateGameSettingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGameSetting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGamePeriod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGamePeriod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateGamePeriod(rctx, fc.Args["input"].(gqlmodel.UpdateGamePeriod))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdateGamePeriodPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.UpdateGamePeriodPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdateGamePeriodPayload)
	fc.Result = res
	return ec.marshalNUpdateGamePeriodPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGamePeriodPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGamePeriod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdateGamePeriodPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateGamePeriodPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGamePeriod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteGamePeriod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteGamePeriod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteGamePeriod(rctx, fc.Args["input"].(gqlmodel.DeleteGamePeriod))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.DeleteGamePeriodPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.DeleteGamePeriodPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DeleteGamePeriodPayload)
	fc.Result = res
	return ec.marshalNDeleteGamePeriodPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGamePeriodPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteGamePeriod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_DeleteGamePeriodPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteGamePeriodPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteGamePeriod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_changePeriodIfNeeded(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_changePeriodIfNeeded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ChangePeriodIfNeeded(rctx, fc.Args["input"].(gqlmodel.ChangePeriod))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.ChangePeriodIfNeededPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.ChangePeriodIfNeededPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.ChangePeriodIfNeededPayload)
	fc.Result = res
	return ec.marshalNChangePeriodIfNeededPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐChangePeriodIfNeededPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_changePeriodIfNeeded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_ChangePeriodIfNeededPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChangePeriodIfNeededPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_changePeriodIfNeeded_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerGameParticipant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerGameParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterGameParticipant(rctx, fc.Args["input"].(gqlmodel.NewGameParticipant))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterGameParticipantPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterGameParticipantPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterGameParticipantPayload)
	fc.Result = res
	return ec.marshalNRegisterGameParticipantPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerGameParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameParticipant":
				return ec.fieldContext_RegisterGameParticipantPayload_gameParticipant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterGameParticipantPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerGameParticipant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGameParticipantProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGameParticipantProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateGameParticipantProfile(rctx, fc.Args["input"].(gqlmodel.UpdateGameParticipantProfile))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdateGameParticipantProfilePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.UpdateGameParticipantProfilePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdateGameParticipantProfilePayload)
	fc.Result = res
	return ec.marshalNUpdateGameParticipantProfilePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantProfilePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGameParticipantProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdateGameParticipantProfilePayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateGameParticipantProfilePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGameParticipantProfile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerGameParticipantIcon(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerGameParticipantIcon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterGameParticipantIcon(rctx, fc.Args["input"].(gqlmodel.NewGameParticipantIcon))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterGameParticipantIconPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterGameParticipantIconPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterGameParticipantIconPayload)
	fc.Result = res
	return ec.marshalNRegisterGameParticipantIconPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantIconPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerGameParticipantIcon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameParticipantIcon":
				return ec.fieldContext_RegisterGameParticipantIconPayload_gameParticipantIcon(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterGameParticipantIconPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerGameParticipantIcon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGameParticipantIcon(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGameParticipantIcon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateGameParticipantIcon(rctx, fc.Args["input"].(gqlmodel.UpdateGameParticipantIcon))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdateGameParticipantIconPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.UpdateGameParticipantIconPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdateGameParticipantIconPayload)
	fc.Result = res
	return ec.marshalNUpdateGameParticipantIconPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantIconPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGameParticipantIcon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdateGameParticipantIconPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateGameParticipantIconPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGameParticipantIcon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteGameParticipantIcon(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteGameParticipantIcon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteGameParticipantIcon(rctx, fc.Args["input"].(gqlmodel.DeleteGameParticipantIcon))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.DeleteGameParticipantIconPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.DeleteGameParticipantIconPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DeleteGameParticipantIconPayload)
	fc.Result = res
	return ec.marshalNDeleteGameParticipantIconPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipantIconPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteGameParticipantIcon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_DeleteGameParticipantIconPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteGameParticipantIconPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteGameParticipantIcon_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGameParticipantSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGameParticipantSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateGameParticipantSetting(rctx, fc.Args["input"].(gqlmodel.UpdateGameParticipantSetting))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdateGameParticipantSettingPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.UpdateGameParticipantSettingPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdateGameParticipantSettingPayload)
	fc.Result = res
	return ec.marshalNUpdateGameParticipantSettingPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantSettingPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGameParticipantSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdateGameParticipantSettingPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateGameParticipantSettingPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGameParticipantSetting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteGameParticipant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteGameParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteGameParticipant(rctx, fc.Args["input"].(gqlmodel.DeleteGameParticipant))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.DeleteGameParticipantPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.DeleteGameParticipantPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DeleteGameParticipantPayload)
	fc.Result = res
	return ec.marshalNDeleteGameParticipantPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipantPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteGameParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_DeleteGameParticipantPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteGameParticipantPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteGameParticipant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerGameParticipantFollow(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerGameParticipantFollow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterGameParticipantFollow(rctx, fc.Args["input"].(gqlmodel.NewGameParticipantFollow))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterGameParticipantFollowPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterGameParticipantFollowPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterGameParticipantFollowPayload)
	fc.Result = res
	return ec.marshalNRegisterGameParticipantFollowPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantFollowPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerGameParticipantFollow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_RegisterGameParticipantFollowPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterGameParticipantFollowPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerGameParticipantFollow_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteGameParticipantFollow(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteGameParticipantFollow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteGameParticipantFollow(rctx, fc.Args["input"].(gqlmodel.DeleteGameParticipantFollow))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.DeleteGameParticipantFollowPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.DeleteGameParticipantFollowPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DeleteGameParticipantFollowPayload)
	fc.Result = res
	return ec.marshalNDeleteGameParticipantFollowPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipantFollowPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteGameParticipantFollow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_DeleteGameParticipantFollowPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteGameParticipantFollowPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteGameParticipantFollow_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerGameParticipantDiary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerGameParticipantDiary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterGameParticipantDiary(rctx, fc.Args["input"].(gqlmodel.NewGameParticipantDiary))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterGameParticipantDiaryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterGameParticipantDiaryPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterGameParticipantDiaryPayload)
	fc.Result = res
	return ec.marshalNRegisterGameParticipantDiaryPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantDiaryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerGameParticipantDiary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameParticipantDiary":
				return ec.fieldContext_RegisterGameParticipantDiaryPayload_gameParticipantDiary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterGameParticipantDiaryPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerGameParticipantDiary_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGameParticipantDiary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGameParticipantDiary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateGameParticipantDiary(rctx, fc.Args["input"].(gqlmodel.UpdateGameParticipantDiary))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdateGameParticipantDiaryPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.UpdateGameParticipantDiaryPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdateGameParticipantDiaryPayload)
	fc.Result = res
	return ec.marshalNUpdateGameParticipantDiaryPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantDiaryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGameParticipantDiary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdateGameParticipantDiaryPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateGameParticipantDiaryPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGameParticipantDiary_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlayerProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlayerProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlayerProfile(rctx, fc.Args["input"].(gqlmodel.UpdatePlayerProfile))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdatePlayerProfilePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.UpdatePlayerProfilePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdatePlayerProfilePayload)
	fc.Result = res
	return ec.marshalNUpdatePlayerProfilePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdatePlayerProfilePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlayerProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdatePlayerProfilePayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdatePlayerProfilePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlayerProfile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerPlayerSnsAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerPlayerSnsAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterPlayerSnsAccount(rctx, fc.Args["input"].(gqlmodel.NewPlayerSnsAccount))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterPlayerSnsAccountPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterPlayerSnsAccountPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterPlayerSnsAccountPayload)
	fc.Result = res
	return ec.marshalNRegisterPlayerSnsAccountPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterPlayerSnsAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerPlayerSnsAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "playerSnsAccount":
				return ec.fieldContext_RegisterPlayerSnsAccountPayload_playerSnsAccount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterPlayerSnsAccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerPlayerSnsAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatePlayerSnsAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatePlayerSnsAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdatePlayerSnsAccount(rctx, fc.Args["input"].(gqlmodel.UpdatePlayerSnsAccount))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdatePlayerSnsAccountPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.UpdatePlayerSnsAccountPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdatePlayerSnsAccountPayload)
	fc.Result = res
	return ec.marshalNUpdatePlayerSnsAccountPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdatePlayerSnsAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatePlayerSnsAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdatePlayerSnsAccountPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdatePlayerSnsAccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatePlayerSnsAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePlayerSnsAccount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePlayerSnsAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeletePlayerSnsAccount(rctx, fc.Args["input"].(gqlmodel.DeletePlayerSnsAccount))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.DeletePlayerSnsAccountPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.DeletePlayerSnsAccountPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DeletePlayerSnsAccountPayload)
	fc.Result = res
	return ec.marshalNDeletePlayerSnsAccountPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeletePlayerSnsAccountPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePlayerSnsAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_DeletePlayerSnsAccountPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeletePlayerSnsAccountPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePlayerSnsAccount_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerMessageDryRun(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerMessageDryRun(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterMessageDryRun(rctx, fc.Args["input"].(gqlmodel.NewMessage))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterMessageDryRunPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterMessageDryRunPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterMessageDryRunPayload)
	fc.Result = res
	return ec.marshalNRegisterMessageDryRunPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterMessageDryRunPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerMessageDryRun(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_RegisterMessageDryRunPayload_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterMessageDryRunPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerMessageDryRun_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerMessage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterMessage(rctx, fc.Args["input"].(gqlmodel.NewMessage))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterMessagePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterMessagePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterMessagePayload)
	fc.Result = res
	return ec.marshalNRegisterMessagePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterMessagePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_RegisterMessagePayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterMessagePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerMessage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerMessageFavorite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerMessageFavorite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterMessageFavorite(rctx, fc.Args["input"].(gqlmodel.NewMessageFavorite))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterMessageFavoritePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterMessageFavoritePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterMessageFavoritePayload)
	fc.Result = res
	return ec.marshalNRegisterMessageFavoritePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterMessageFavoritePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerMessageFavorite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_RegisterMessageFavoritePayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterMessageFavoritePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerMessageFavorite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMessageFavorite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMessageFavorite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteMessageFavorite(rctx, fc.Args["input"].(gqlmodel.DeleteMessageFavorite))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.DeleteMessageFavoritePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.DeleteMessageFavoritePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DeleteMessageFavoritePayload)
	fc.Result = res
	return ec.marshalNDeleteMessageFavoritePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteMessageFavoritePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMessageFavorite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_DeleteMessageFavoritePayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteMessageFavoritePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMessageFavorite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerDirectMessageDryRun(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerDirectMessageDryRun(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterDirectMessageDryRun(rctx, fc.Args["input"].(gqlmodel.NewDirectMessage))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterDirectMessageDryRunPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterDirectMessageDryRunPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterDirectMessageDryRunPayload)
	fc.Result = res
	return ec.marshalNRegisterDirectMessageDryRunPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDirectMessageDryRunPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerDirectMessageDryRun(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "directMessage":
				return ec.fieldContext_RegisterDirectMessageDryRunPayload_directMessage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterDirectMessageDryRunPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerDirectMessageDryRun_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerDirectMessage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerDirectMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterDirectMessage(rctx, fc.Args["input"].(gqlmodel.NewDirectMessage))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterDirectMessagePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterDirectMessagePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterDirectMessagePayload)
	fc.Result = res
	return ec.marshalNRegisterDirectMessagePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDirectMessagePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerDirectMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_RegisterDirectMessagePayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterDirectMessagePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerDirectMessage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerDirectMessageFavorite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerDirectMessageFavorite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterDirectMessageFavorite(rctx, fc.Args["input"].(gqlmodel.NewDirectMessageFavorite))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterDirectMessageFavoritePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterDirectMessageFavoritePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterDirectMessageFavoritePayload)
	fc.Result = res
	return ec.marshalNRegisterDirectMessageFavoritePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDirectMessageFavoritePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerDirectMessageFavorite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_RegisterDirectMessageFavoritePayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterDirectMessageFavoritePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerDirectMessageFavorite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDirectMessageFavorite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDirectMessageFavorite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteDirectMessageFavorite(rctx, fc.Args["input"].(gqlmodel.DeleteDirectMessageFavorite))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.DeleteDirectMessageFavoritePayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.DeleteDirectMessageFavoritePayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DeleteDirectMessageFavoritePayload)
	fc.Result = res
	return ec.marshalNDeleteDirectMessageFavoritePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteDirectMessageFavoritePayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDirectMessageFavorite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_DeleteDirectMessageFavoritePayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeleteDirectMessageFavoritePayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDirectMessageFavorite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerGameParticipantGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerGameParticipantGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterGameParticipantGroup(rctx, fc.Args["input"].(gqlmodel.NewGameParticipantGroup))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterGameParticipantGroupPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterGameParticipantGroupPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterGameParticipantGroupPayload)
	fc.Result = res
	return ec.marshalNRegisterGameParticipantGroupPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantGroupPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerGameParticipantGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gameParticipantGroup":
				return ec.fieldContext_RegisterGameParticipantGroupPayload_gameParticipantGroup(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterGameParticipantGroupPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerGameParticipantGroup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateGameParticipantGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateGameParticipantGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateGameParticipantGroup(rctx, fc.Args["input"].(gqlmodel.UpdateGameParticipantGroup))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.UpdateGameParticipantGroupPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.UpdateGameParticipantGroupPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.UpdateGameParticipantGroupPayload)
	fc.Result = res
	return ec.marshalNUpdateGameParticipantGroupPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantGroupPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateGameParticipantGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_UpdateGameParticipantGroupPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UpdateGameParticipantGroupPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateGameParticipantGroup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_registerDebugMessages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_registerDebugMessages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegisterDebugMessages(rctx, fc.Args["input"].(gqlmodel.RegisterDebugMessages))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.IsAuthenticated == nil {
				return nil, errors.New("directive isAuthenticated is not implemented")
			}
			return ec.directives.IsAuthenticated(ctx, nil, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*gqlmodel.RegisterDebugMessagesPayload); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *chat-role-play/middleware/graph/gqlmodel.RegisterDebugMessagesPayload`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.RegisterDebugMessagesPayload)
	fc.Result = res
	return ec.marshalNRegisterDebugMessagesPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDebugMessagesPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_registerDebugMessages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ok":
				return ec.fieldContext_RegisterDebugMessagesPayload_ok(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterDebugMessagesPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_registerDebugMessages_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _NotificationCondition_discordWebhookUrl(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NotificationCondition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationCondition_discordWebhookUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscordWebhookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationCondition_discordWebhookUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationCondition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationCondition_game(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NotificationCondition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationCondition_game(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Game, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameNotificationCondition)
	fc.Result = res
	return ec.marshalNGameNotificationCondition2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameNotificationCondition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationCondition_game(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationCondition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "participate":
				return ec.fieldContext_GameNotificationCondition_participate(ctx, field)
			case "start":
				return ec.fieldContext_GameNotificationCondition_start(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameNotificationCondition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NotificationCondition_message(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.NotificationCondition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NotificationCondition_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.MessageNotificationCondition)
	fc.Result = res
	return ec.marshalNMessageNotificationCondition2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageNotificationCondition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NotificationCondition_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NotificationCondition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "reply":
				return ec.fieldContext_MessageNotificationCondition_reply(ctx, field)
			case "secret":
				return ec.fieldContext_MessageNotificationCondition_secret(ctx, field)
			case "directMessage":
				return ec.fieldContext_MessageNotificationCondition_directMessage(ctx, field)
			case "keywords":
				return ec.fieldContext_MessageNotificationCondition_keywords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MessageNotificationCondition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_profile(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_profile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Profile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.PlayerProfile)
	fc.Result = res
	return ec.marshalOPlayerProfile2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayerProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_profile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "profileImageUrl":
				return ec.fieldContext_PlayerProfile_profileImageUrl(ctx, field)
			case "introduction":
				return ec.fieldContext_PlayerProfile_introduction(ctx, field)
			case "snsAccounts":
				return ec.fieldContext_PlayerProfile_snsAccounts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlayerProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_designer(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_designer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Designer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Designer)
	fc.Result = res
	return ec.marshalODesigner2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDesigner(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_designer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Designer_id(ctx, field)
			case "name":
				return ec.fieldContext_Designer_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Designer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Player_authorityCodes(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.Player) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Player_authorityCodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorityCodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Player_authorityCodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Player",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerProfile_profileImageUrl(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PlayerProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerProfile_profileImageUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerProfile_profileImageUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerProfile_introduction(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PlayerProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerProfile_introduction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Introduction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerProfile_introduction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerProfile_snsAccounts(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PlayerProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerProfile_snsAccounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SnsAccounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.PlayerSnsAccount)
	fc.Result = res
	return ec.marshalNPlayerSnsAccount2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayerSnsAccountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerProfile_snsAccounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlayerSnsAccount_id(ctx, field)
			case "type":
				return ec.fieldContext_PlayerSnsAccount_type(ctx, field)
			case "name":
				return ec.fieldContext_PlayerSnsAccount_name(ctx, field)
			case "url":
				return ec.fieldContext_PlayerSnsAccount_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlayerSnsAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerSnsAccount_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PlayerSnsAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerSnsAccount_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerSnsAccount_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerSnsAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerSnsAccount_type(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PlayerSnsAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerSnsAccount_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.SnsType)
	fc.Result = res
	return ec.marshalNSnsType2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐSnsType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerSnsAccount_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerSnsAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SnsType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerSnsAccount_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PlayerSnsAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerSnsAccount_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerSnsAccount_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerSnsAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PlayerSnsAccount_url(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.PlayerSnsAccount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PlayerSnsAccount_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PlayerSnsAccount_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PlayerSnsAccount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_designers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_designers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Designers(rctx, fc.Args["query"].(gqlmodel.DesignersQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.Designer)
	fc.Result = res
	return ec.marshalNDesigner2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDesignerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_designers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Designer_id(ctx, field)
			case "name":
				return ec.fieldContext_Designer_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Designer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_designers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_designer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_designer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Designer(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Designer)
	fc.Result = res
	return ec.marshalODesigner2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDesigner(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_designer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Designer_id(ctx, field)
			case "name":
				return ec.fieldContext_Designer_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Designer", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_designer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_charachips(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_charachips(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Charachips(rctx, fc.Args["query"].(gqlmodel.CharachipsQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.Charachip)
	fc.Result = res
	return ec.marshalNCharachip2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharachipᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_charachips(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Charachip_id(ctx, field)
			case "name":
				return ec.fieldContext_Charachip_name(ctx, field)
			case "designer":
				return ec.fieldContext_Charachip_designer(ctx, field)
			case "descriptionUrl":
				return ec.fieldContext_Charachip_descriptionUrl(ctx, field)
			case "canChangeName":
				return ec.fieldContext_Charachip_canChangeName(ctx, field)
			case "charas":
				return ec.fieldContext_Charachip_charas(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Charachip", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_charachips_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_charachip(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_charachip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Charachip(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Charachip)
	fc.Result = res
	return ec.marshalOCharachip2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharachip(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_charachip(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Charachip_id(ctx, field)
			case "name":
				return ec.fieldContext_Charachip_name(ctx, field)
			case "designer":
				return ec.fieldContext_Charachip_designer(ctx, field)
			case "descriptionUrl":
				return ec.fieldContext_Charachip_descriptionUrl(ctx, field)
			case "canChangeName":
				return ec.fieldContext_Charachip_canChangeName(ctx, field)
			case "charas":
				return ec.fieldContext_Charachip_charas(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Charachip", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_charachip_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_chara(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_chara(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Chara(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Chara)
	fc.Result = res
	return ec.marshalOChara2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐChara(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_chara(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Chara_id(ctx, field)
			case "name":
				return ec.fieldContext_Chara_name(ctx, field)
			case "size":
				return ec.fieldContext_Chara_size(ctx, field)
			case "images":
				return ec.fieldContext_Chara_images(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Chara", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_chara_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_games(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_games(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Games(rctx, fc.Args["query"].(gqlmodel.GamesQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.SimpleGame)
	fc.Result = res
	return ec.marshalNSimpleGame2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐSimpleGameᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_games(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SimpleGame_id(ctx, field)
			case "name":
				return ec.fieldContext_SimpleGame_name(ctx, field)
			case "status":
				return ec.fieldContext_SimpleGame_status(ctx, field)
			case "labels":
				return ec.fieldContext_SimpleGame_labels(ctx, field)
			case "participantsCount":
				return ec.fieldContext_SimpleGame_participantsCount(ctx, field)
			case "periods":
				return ec.fieldContext_SimpleGame_periods(ctx, field)
			case "settings":
				return ec.fieldContext_SimpleGame_settings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SimpleGame", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_games_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_game(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_game(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Game(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Game)
	fc.Result = res
	return ec.marshalOGame2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_game(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Game_id(ctx, field)
			case "name":
				return ec.fieldContext_Game_name(ctx, field)
			case "status":
				return ec.fieldContext_Game_status(ctx, field)
			case "labels":
				return ec.fieldContext_Game_labels(ctx, field)
			case "gameMasters":
				return ec.fieldContext_Game_gameMasters(ctx, field)
			case "participants":
				return ec.fieldContext_Game_participants(ctx, field)
			case "periods":
				return ec.fieldContext_Game_periods(ctx, field)
			case "settings":
				return ec.fieldContext_Game_settings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_game_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_myGameParticipant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_myGameParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MyGameParticipant(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameParticipant)
	fc.Result = res
	return ec.marshalOGameParticipant2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_myGameParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipant_id(ctx, field)
			case "name":
				return ec.fieldContext_GameParticipant_name(ctx, field)
			case "entryNumber":
				return ec.fieldContext_GameParticipant_entryNumber(ctx, field)
			case "player":
				return ec.fieldContext_GameParticipant_player(ctx, field)
			case "chara":
				return ec.fieldContext_GameParticipant_chara(ctx, field)
			case "memo":
				return ec.fieldContext_GameParticipant_memo(ctx, field)
			case "profileIcon":
				return ec.fieldContext_GameParticipant_profileIcon(ctx, field)
			case "lastAccessedAt":
				return ec.fieldContext_GameParticipant_lastAccessedAt(ctx, field)
			case "isGone":
				return ec.fieldContext_GameParticipant_isGone(ctx, field)
			case "canChangeName":
				return ec.fieldContext_GameParticipant_canChangeName(ctx, field)
			case "followParticipantIds":
				return ec.fieldContext_GameParticipant_followParticipantIds(ctx, field)
			case "followerParticipantIds":
				return ec.fieldContext_GameParticipant_followerParticipantIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_myGameParticipant_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_gameParticipantProfile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gameParticipantProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GameParticipantProfile(rctx, fc.Args["participantId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameParticipantProfile)
	fc.Result = res
	return ec.marshalNGameParticipantProfile2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gameParticipantProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "participantId":
				return ec.fieldContext_GameParticipantProfile_participantId(ctx, field)
			case "name":
				return ec.fieldContext_GameParticipantProfile_name(ctx, field)
			case "entryNumber":
				return ec.fieldContext_GameParticipantProfile_entryNumber(ctx, field)
			case "isGone":
				return ec.fieldContext_GameParticipantProfile_isGone(ctx, field)
			case "profileImageUrl":
				return ec.fieldContext_GameParticipantProfile_profileImageUrl(ctx, field)
			case "introduction":
				return ec.fieldContext_GameParticipantProfile_introduction(ctx, field)
			case "followsCount":
				return ec.fieldContext_GameParticipantProfile_followsCount(ctx, field)
			case "followersCount":
				return ec.fieldContext_GameParticipantProfile_followersCount(ctx, field)
			case "isPlayerOpen":
				return ec.fieldContext_GameParticipantProfile_isPlayerOpen(ctx, field)
			case "playerName":
				return ec.fieldContext_GameParticipantProfile_playerName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipantProfile", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_gameParticipantProfile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_gameParticipantIcons(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gameParticipantIcons(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GameParticipantIcons(rctx, fc.Args["participantId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GameParticipantIcon)
	fc.Result = res
	return ec.marshalNGameParticipantIcon2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantIconᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gameParticipantIcons(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipantIcon_id(ctx, field)
			case "url":
				return ec.fieldContext_GameParticipantIcon_url(ctx, field)
			case "width":
				return ec.fieldContext_GameParticipantIcon_width(ctx, field)
			case "height":
				return ec.fieldContext_GameParticipantIcon_height(ctx, field)
			case "displayOrder":
				return ec.fieldContext_GameParticipantIcon_displayOrder(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipantIcon", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_gameParticipantIcons_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_gameParticipantFollows(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gameParticipantFollows(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GameParticipantFollows(rctx, fc.Args["participantId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GameParticipant)
	fc.Result = res
	return ec.marshalNGameParticipant2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gameParticipantFollows(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipant_id(ctx, field)
			case "name":
				return ec.fieldContext_GameParticipant_name(ctx, field)
			case "entryNumber":
				return ec.fieldContext_GameParticipant_entryNumber(ctx, field)
			case "player":
				return ec.fieldContext_GameParticipant_player(ctx, field)
			case "chara":
				return ec.fieldContext_GameParticipant_chara(ctx, field)
			case "memo":
				return ec.fieldContext_GameParticipant_memo(ctx, field)
			case "profileIcon":
				return ec.fieldContext_GameParticipant_profileIcon(ctx, field)
			case "lastAccessedAt":
				return ec.fieldContext_GameParticipant_lastAccessedAt(ctx, field)
			case "isGone":
				return ec.fieldContext_GameParticipant_isGone(ctx, field)
			case "canChangeName":
				return ec.fieldContext_GameParticipant_canChangeName(ctx, field)
			case "followParticipantIds":
				return ec.fieldContext_GameParticipant_followParticipantIds(ctx, field)
			case "followerParticipantIds":
				return ec.fieldContext_GameParticipant_followerParticipantIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_gameParticipantFollows_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_gameParticipantFollowers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gameParticipantFollowers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GameParticipantFollowers(rctx, fc.Args["participantId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GameParticipant)
	fc.Result = res
	return ec.marshalNGameParticipant2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gameParticipantFollowers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipant_id(ctx, field)
			case "name":
				return ec.fieldContext_GameParticipant_name(ctx, field)
			case "entryNumber":
				return ec.fieldContext_GameParticipant_entryNumber(ctx, field)
			case "player":
				return ec.fieldContext_GameParticipant_player(ctx, field)
			case "chara":
				return ec.fieldContext_GameParticipant_chara(ctx, field)
			case "memo":
				return ec.fieldContext_GameParticipant_memo(ctx, field)
			case "profileIcon":
				return ec.fieldContext_GameParticipant_profileIcon(ctx, field)
			case "lastAccessedAt":
				return ec.fieldContext_GameParticipant_lastAccessedAt(ctx, field)
			case "isGone":
				return ec.fieldContext_GameParticipant_isGone(ctx, field)
			case "canChangeName":
				return ec.fieldContext_GameParticipant_canChangeName(ctx, field)
			case "followParticipantIds":
				return ec.fieldContext_GameParticipant_followParticipantIds(ctx, field)
			case "followerParticipantIds":
				return ec.fieldContext_GameParticipant_followerParticipantIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_gameParticipantFollowers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_gameParticipantSetting(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gameParticipantSetting(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GameParticipantSetting(rctx, fc.Args["gameId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameParticipantSetting)
	fc.Result = res
	return ec.marshalNGameParticipantSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantSetting(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gameParticipantSetting(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "notification":
				return ec.fieldContext_GameParticipantSetting_notification(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipantSetting", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_gameParticipantSetting_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_gameDiaries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gameDiaries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GameDiaries(rctx, fc.Args["query"].(gqlmodel.GameDiariesQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GameParticipantDiary)
	fc.Result = res
	return ec.marshalNGameParticipantDiary2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantDiaryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gameDiaries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipantDiary_id(ctx, field)
			case "participant":
				return ec.fieldContext_GameParticipantDiary_participant(ctx, field)
			case "period":
				return ec.fieldContext_GameParticipantDiary_period(ctx, field)
			case "title":
				return ec.fieldContext_GameParticipantDiary_title(ctx, field)
			case "body":
				return ec.fieldContext_GameParticipantDiary_body(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipantDiary", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_gameDiaries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_gameDiary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gameDiary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GameDiary(rctx, fc.Args["diaryId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameParticipantDiary)
	fc.Result = res
	return ec.marshalOGameParticipantDiary2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantDiary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gameDiary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipantDiary_id(ctx, field)
			case "participant":
				return ec.fieldContext_GameParticipantDiary_participant(ctx, field)
			case "period":
				return ec.fieldContext_GameParticipantDiary_period(ctx, field)
			case "title":
				return ec.fieldContext_GameParticipantDiary_title(ctx, field)
			case "body":
				return ec.fieldContext_GameParticipantDiary_body(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipantDiary", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_gameDiary_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_players(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_players(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Players(rctx, fc.Args["query"].(gqlmodel.PlayersQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.Player)
	fc.Result = res
	return ec.marshalNPlayer2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayerᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_players(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "profile":
				return ec.fieldContext_Player_profile(ctx, field)
			case "designer":
				return ec.fieldContext_Player_designer(ctx, field)
			case "authorityCodes":
				return ec.fieldContext_Player_authorityCodes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_players_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_player(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_player(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Player(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Player)
	fc.Result = res
	return ec.marshalOPlayer2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_player(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "profile":
				return ec.fieldContext_Player_profile(ctx, field)
			case "designer":
				return ec.fieldContext_Player_designer(ctx, field)
			case "authorityCodes":
				return ec.fieldContext_Player_authorityCodes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_player_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_myPlayer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_myPlayer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MyPlayer(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Player)
	fc.Result = res
	return ec.marshalOPlayer2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_myPlayer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Player_id(ctx, field)
			case "name":
				return ec.fieldContext_Player_name(ctx, field)
			case "profile":
				return ec.fieldContext_Player_profile(ctx, field)
			case "designer":
				return ec.fieldContext_Player_designer(ctx, field)
			case "authorityCodes":
				return ec.fieldContext_Player_authorityCodes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Player", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_messages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_messages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Messages(rctx, fc.Args["gameId"].(string), fc.Args["query"].(gqlmodel.MessagesQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Messages)
	fc.Result = res
	return ec.marshalNMessages2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessages(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_messages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_Messages_list(ctx, field)
			case "allPageCount":
				return ec.fieldContext_Messages_allPageCount(ctx, field)
			case "hasPrePage":
				return ec.fieldContext_Messages_hasPrePage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_Messages_hasNextPage(ctx, field)
			case "currentPageNumber":
				return ec.fieldContext_Messages_currentPageNumber(ctx, field)
			case "isDesc":
				return ec.fieldContext_Messages_isDesc(ctx, field)
			case "isLatest":
				return ec.fieldContext_Messages_isLatest(ctx, field)
			case "latestUnixTimeMilli":
				return ec.fieldContext_Messages_latestUnixTimeMilli(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Messages", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_messages_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_messagesLatestUnixTimeMilli(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_messagesLatestUnixTimeMilli(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MessagesLatestUnixTimeMilli(rctx, fc.Args["gameId"].(string), fc.Args["query"].(gqlmodel.MessagesQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNLong2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_messagesLatestUnixTimeMilli(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Long does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_messagesLatestUnixTimeMilli_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_message(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Message(rctx, fc.Args["gameId"].(string), fc.Args["messageId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Message)
	fc.Result = res
	return ec.marshalOMessage2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Message_id(ctx, field)
			case "content":
				return ec.fieldContext_Message_content(ctx, field)
			case "time":
				return ec.fieldContext_Message_time(ctx, field)
			case "sender":
				return ec.fieldContext_Message_sender(ctx, field)
			case "receiver":
				return ec.fieldContext_Message_receiver(ctx, field)
			case "replyTo":
				return ec.fieldContext_Message_replyTo(ctx, field)
			case "reactions":
				return ec.fieldContext_Message_reactions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Message", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_message_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_messageReplies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_messageReplies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MessageReplies(rctx, fc.Args["gameId"].(string), fc.Args["messageId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.Message)
	fc.Result = res
	return ec.marshalNMessage2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_messageReplies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Message_id(ctx, field)
			case "content":
				return ec.fieldContext_Message_content(ctx, field)
			case "time":
				return ec.fieldContext_Message_time(ctx, field)
			case "sender":
				return ec.fieldContext_Message_sender(ctx, field)
			case "receiver":
				return ec.fieldContext_Message_receiver(ctx, field)
			case "replyTo":
				return ec.fieldContext_Message_replyTo(ctx, field)
			case "reactions":
				return ec.fieldContext_Message_reactions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Message", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_messageReplies_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_messageFavoriteGameParticipants(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_messageFavoriteGameParticipants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MessageFavoriteGameParticipants(rctx, fc.Args["gameId"].(string), fc.Args["messageId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GameParticipant)
	fc.Result = res
	return ec.marshalNGameParticipant2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_messageFavoriteGameParticipants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipant_id(ctx, field)
			case "name":
				return ec.fieldContext_GameParticipant_name(ctx, field)
			case "entryNumber":
				return ec.fieldContext_GameParticipant_entryNumber(ctx, field)
			case "player":
				return ec.fieldContext_GameParticipant_player(ctx, field)
			case "chara":
				return ec.fieldContext_GameParticipant_chara(ctx, field)
			case "memo":
				return ec.fieldContext_GameParticipant_memo(ctx, field)
			case "profileIcon":
				return ec.fieldContext_GameParticipant_profileIcon(ctx, field)
			case "lastAccessedAt":
				return ec.fieldContext_GameParticipant_lastAccessedAt(ctx, field)
			case "isGone":
				return ec.fieldContext_GameParticipant_isGone(ctx, field)
			case "canChangeName":
				return ec.fieldContext_GameParticipant_canChangeName(ctx, field)
			case "followParticipantIds":
				return ec.fieldContext_GameParticipant_followParticipantIds(ctx, field)
			case "followerParticipantIds":
				return ec.fieldContext_GameParticipant_followerParticipantIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_messageFavoriteGameParticipants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_gameParticipantGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_gameParticipantGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GameParticipantGroups(rctx, fc.Args["gameId"].(string), fc.Args["query"].(gqlmodel.GameParticipantGroupsQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GameParticipantGroup)
	fc.Result = res
	return ec.marshalNGameParticipantGroup2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantGroupᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_gameParticipantGroups(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipantGroup_id(ctx, field)
			case "name":
				return ec.fieldContext_GameParticipantGroup_name(ctx, field)
			case "participants":
				return ec.fieldContext_GameParticipantGroup_participants(ctx, field)
			case "latestUnixTimeMilli":
				return ec.fieldContext_GameParticipantGroup_latestUnixTimeMilli(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipantGroup", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_gameParticipantGroups_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_directMessages(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_directMessages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DirectMessages(rctx, fc.Args["gameId"].(string), fc.Args["query"].(gqlmodel.DirectMessagesQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DirectMessages)
	fc.Result = res
	return ec.marshalNDirectMessages2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessages(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_directMessages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_DirectMessages_list(ctx, field)
			case "allPageCount":
				return ec.fieldContext_DirectMessages_allPageCount(ctx, field)
			case "hasPrePage":
				return ec.fieldContext_DirectMessages_hasPrePage(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_DirectMessages_hasNextPage(ctx, field)
			case "currentPageNumber":
				return ec.fieldContext_DirectMessages_currentPageNumber(ctx, field)
			case "isDesc":
				return ec.fieldContext_DirectMessages_isDesc(ctx, field)
			case "isLatest":
				return ec.fieldContext_DirectMessages_isLatest(ctx, field)
			case "latestUnixTimeMilli":
				return ec.fieldContext_DirectMessages_latestUnixTimeMilli(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DirectMessages", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_directMessages_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_directMessagesLatestUnixTimeMilli(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_directMessagesLatestUnixTimeMilli(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DirectMessagesLatestUnixTimeMilli(rctx, fc.Args["gameId"].(string), fc.Args["query"].(gqlmodel.DirectMessagesQuery))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNLong2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_directMessagesLatestUnixTimeMilli(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Long does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_directMessagesLatestUnixTimeMilli_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_directMessage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_directMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DirectMessage(rctx, fc.Args["gameId"].(string), fc.Args["directMessageId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DirectMessage)
	fc.Result = res
	return ec.marshalODirectMessage2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_directMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DirectMessage_id(ctx, field)
			case "participantGroupId":
				return ec.fieldContext_DirectMessage_participantGroupId(ctx, field)
			case "content":
				return ec.fieldContext_DirectMessage_content(ctx, field)
			case "time":
				return ec.fieldContext_DirectMessage_time(ctx, field)
			case "sender":
				return ec.fieldContext_DirectMessage_sender(ctx, field)
			case "reactions":
				return ec.fieldContext_DirectMessage_reactions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DirectMessage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_directMessage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_directMessageFavoriteGameParticipants(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_directMessageFavoriteGameParticipants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DirectMessageFavoriteGameParticipants(rctx, fc.Args["gameId"].(string), fc.Args["directMessageId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GameParticipant)
	fc.Result = res
	return ec.marshalNGameParticipant2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_directMessageFavoriteGameParticipants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipant_id(ctx, field)
			case "name":
				return ec.fieldContext_GameParticipant_name(ctx, field)
			case "entryNumber":
				return ec.fieldContext_GameParticipant_entryNumber(ctx, field)
			case "player":
				return ec.fieldContext_GameParticipant_player(ctx, field)
			case "chara":
				return ec.fieldContext_GameParticipant_chara(ctx, field)
			case "memo":
				return ec.fieldContext_GameParticipant_memo(ctx, field)
			case "profileIcon":
				return ec.fieldContext_GameParticipant_profileIcon(ctx, field)
			case "lastAccessedAt":
				return ec.fieldContext_GameParticipant_lastAccessedAt(ctx, field)
			case "isGone":
				return ec.fieldContext_GameParticipant_isGone(ctx, field)
			case "canChangeName":
				return ec.fieldContext_GameParticipant_canChangeName(ctx, field)
			case "followParticipantIds":
				return ec.fieldContext_GameParticipant_followParticipantIds(ctx, field)
			case "followerParticipantIds":
				return ec.fieldContext_GameParticipant_followerParticipantIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipant", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_directMessageFavoriteGameParticipants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterDebugMessagesPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterDebugMessagesPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterDebugMessagesPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterDebugMessagesPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterDebugMessagesPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterDirectMessageDryRunPayload_directMessage(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterDirectMessageDryRunPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterDirectMessageDryRunPayload_directMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DirectMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.DirectMessage)
	fc.Result = res
	return ec.marshalNDirectMessage2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterDirectMessageDryRunPayload_directMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterDirectMessageDryRunPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DirectMessage_id(ctx, field)
			case "participantGroupId":
				return ec.fieldContext_DirectMessage_participantGroupId(ctx, field)
			case "content":
				return ec.fieldContext_DirectMessage_content(ctx, field)
			case "time":
				return ec.fieldContext_DirectMessage_time(ctx, field)
			case "sender":
				return ec.fieldContext_DirectMessage_sender(ctx, field)
			case "reactions":
				return ec.fieldContext_DirectMessage_reactions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DirectMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterDirectMessageFavoritePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterDirectMessageFavoritePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterDirectMessageFavoritePayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterDirectMessageFavoritePayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterDirectMessageFavoritePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterDirectMessagePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterDirectMessagePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterDirectMessagePayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterDirectMessagePayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterDirectMessagePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterGameMasterPayload_gameMaster(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterGameMasterPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterGameMasterPayload_gameMaster(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameMaster, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameMaster)
	fc.Result = res
	return ec.marshalNGameMaster2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameMaster(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterGameMasterPayload_gameMaster(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterGameMasterPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameMaster_id(ctx, field)
			case "player":
				return ec.fieldContext_GameMaster_player(ctx, field)
			case "isProducer":
				return ec.fieldContext_GameMaster_isProducer(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameMaster", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterGameParticipantDiaryPayload_gameParticipantDiary(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterGameParticipantDiaryPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterGameParticipantDiaryPayload_gameParticipantDiary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameParticipantDiary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameParticipantDiary)
	fc.Result = res
	return ec.marshalNGameParticipantDiary2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantDiary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterGameParticipantDiaryPayload_gameParticipantDiary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterGameParticipantDiaryPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipantDiary_id(ctx, field)
			case "participant":
				return ec.fieldContext_GameParticipantDiary_participant(ctx, field)
			case "period":
				return ec.fieldContext_GameParticipantDiary_period(ctx, field)
			case "title":
				return ec.fieldContext_GameParticipantDiary_title(ctx, field)
			case "body":
				return ec.fieldContext_GameParticipantDiary_body(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipantDiary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterGameParticipantFollowPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterGameParticipantFollowPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterGameParticipantFollowPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterGameParticipantFollowPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterGameParticipantFollowPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterGameParticipantGroupPayload_gameParticipantGroup(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterGameParticipantGroupPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterGameParticipantGroupPayload_gameParticipantGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameParticipantGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameParticipantGroup)
	fc.Result = res
	return ec.marshalNGameParticipantGroup2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterGameParticipantGroupPayload_gameParticipantGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterGameParticipantGroupPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipantGroup_id(ctx, field)
			case "name":
				return ec.fieldContext_GameParticipantGroup_name(ctx, field)
			case "participants":
				return ec.fieldContext_GameParticipantGroup_participants(ctx, field)
			case "latestUnixTimeMilli":
				return ec.fieldContext_GameParticipantGroup_latestUnixTimeMilli(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipantGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterGameParticipantIconPayload_gameParticipantIcon(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterGameParticipantIconPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterGameParticipantIconPayload_gameParticipantIcon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameParticipantIcon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameParticipantIcon)
	fc.Result = res
	return ec.marshalNGameParticipantIcon2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantIcon(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterGameParticipantIconPayload_gameParticipantIcon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterGameParticipantIconPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipantIcon_id(ctx, field)
			case "url":
				return ec.fieldContext_GameParticipantIcon_url(ctx, field)
			case "width":
				return ec.fieldContext_GameParticipantIcon_width(ctx, field)
			case "height":
				return ec.fieldContext_GameParticipantIcon_height(ctx, field)
			case "displayOrder":
				return ec.fieldContext_GameParticipantIcon_displayOrder(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipantIcon", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterGameParticipantPayload_gameParticipant(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterGameParticipantPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterGameParticipantPayload_gameParticipant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GameParticipant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameParticipant)
	fc.Result = res
	return ec.marshalNGameParticipant2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterGameParticipantPayload_gameParticipant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterGameParticipantPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameParticipant_id(ctx, field)
			case "name":
				return ec.fieldContext_GameParticipant_name(ctx, field)
			case "entryNumber":
				return ec.fieldContext_GameParticipant_entryNumber(ctx, field)
			case "player":
				return ec.fieldContext_GameParticipant_player(ctx, field)
			case "chara":
				return ec.fieldContext_GameParticipant_chara(ctx, field)
			case "memo":
				return ec.fieldContext_GameParticipant_memo(ctx, field)
			case "profileIcon":
				return ec.fieldContext_GameParticipant_profileIcon(ctx, field)
			case "lastAccessedAt":
				return ec.fieldContext_GameParticipant_lastAccessedAt(ctx, field)
			case "isGone":
				return ec.fieldContext_GameParticipant_isGone(ctx, field)
			case "canChangeName":
				return ec.fieldContext_GameParticipant_canChangeName(ctx, field)
			case "followParticipantIds":
				return ec.fieldContext_GameParticipant_followParticipantIds(ctx, field)
			case "followerParticipantIds":
				return ec.fieldContext_GameParticipant_followerParticipantIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameParticipant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterGamePayload_game(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterGamePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterGamePayload_game(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Game, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Game)
	fc.Result = res
	return ec.marshalNGame2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGame(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterGamePayload_game(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterGamePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Game_id(ctx, field)
			case "name":
				return ec.fieldContext_Game_name(ctx, field)
			case "status":
				return ec.fieldContext_Game_status(ctx, field)
			case "labels":
				return ec.fieldContext_Game_labels(ctx, field)
			case "gameMasters":
				return ec.fieldContext_Game_gameMasters(ctx, field)
			case "participants":
				return ec.fieldContext_Game_participants(ctx, field)
			case "periods":
				return ec.fieldContext_Game_periods(ctx, field)
			case "settings":
				return ec.fieldContext_Game_settings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Game", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterMessageDryRunPayload_message(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterMessageDryRunPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterMessageDryRunPayload_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.Message)
	fc.Result = res
	return ec.marshalNMessage2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterMessageDryRunPayload_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterMessageDryRunPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Message_id(ctx, field)
			case "content":
				return ec.fieldContext_Message_content(ctx, field)
			case "time":
				return ec.fieldContext_Message_time(ctx, field)
			case "sender":
				return ec.fieldContext_Message_sender(ctx, field)
			case "receiver":
				return ec.fieldContext_Message_receiver(ctx, field)
			case "replyTo":
				return ec.fieldContext_Message_replyTo(ctx, field)
			case "reactions":
				return ec.fieldContext_Message_reactions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Message", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterMessageFavoritePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterMessageFavoritePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterMessageFavoritePayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterMessageFavoritePayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterMessageFavoritePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterMessagePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterMessagePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterMessagePayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterMessagePayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterMessagePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterPlayerProfilePayload_playerProfile(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterPlayerProfilePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterPlayerProfilePayload_playerProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlayerProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.PlayerProfile)
	fc.Result = res
	return ec.marshalNPlayerProfile2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayerProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterPlayerProfilePayload_playerProfile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterPlayerProfilePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "profileImageUrl":
				return ec.fieldContext_PlayerProfile_profileImageUrl(ctx, field)
			case "introduction":
				return ec.fieldContext_PlayerProfile_introduction(ctx, field)
			case "snsAccounts":
				return ec.fieldContext_PlayerProfile_snsAccounts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlayerProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterPlayerSnsAccountPayload_playerSnsAccount(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.RegisterPlayerSnsAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterPlayerSnsAccountPayload_playerSnsAccount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlayerSnsAccount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.PlayerSnsAccount)
	fc.Result = res
	return ec.marshalNPlayerSnsAccount2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayerSnsAccount(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterPlayerSnsAccountPayload_playerSnsAccount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterPlayerSnsAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_PlayerSnsAccount_id(ctx, field)
			case "type":
				return ec.fieldContext_PlayerSnsAccount_type(ctx, field)
			case "name":
				return ec.fieldContext_PlayerSnsAccount_name(ctx, field)
			case "url":
				return ec.fieldContext_PlayerSnsAccount_url(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PlayerSnsAccount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SimpleGame_id(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SimpleGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SimpleGame_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SimpleGame_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SimpleGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SimpleGame_name(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SimpleGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SimpleGame_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SimpleGame_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SimpleGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SimpleGame_status(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SimpleGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SimpleGame_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(gqlmodel.GameStatus)
	fc.Result = res
	return ec.marshalNGameStatus2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SimpleGame_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SimpleGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type GameStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SimpleGame_labels(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SimpleGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SimpleGame_labels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GameLabel)
	fc.Result = res
	return ec.marshalNGameLabel2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameLabelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SimpleGame_labels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SimpleGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GameLabel_id(ctx, field)
			case "name":
				return ec.fieldContext_GameLabel_name(ctx, field)
			case "type":
				return ec.fieldContext_GameLabel_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameLabel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SimpleGame_participantsCount(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SimpleGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SimpleGame_participantsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParticipantsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SimpleGame_participantsCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SimpleGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SimpleGame_periods(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SimpleGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SimpleGame_periods(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Periods, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gqlmodel.GamePeriod)
	fc.Result = res
	return ec.marshalNGamePeriod2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGamePeriodᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SimpleGame_periods(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SimpleGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_GamePeriod_id(ctx, field)
			case "count":
				return ec.fieldContext_GamePeriod_count(ctx, field)
			case "name":
				return ec.fieldContext_GamePeriod_name(ctx, field)
			case "startAt":
				return ec.fieldContext_GamePeriod_startAt(ctx, field)
			case "endAt":
				return ec.fieldContext_GamePeriod_endAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GamePeriod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SimpleGame_settings(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.SimpleGame) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SimpleGame_settings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gqlmodel.GameSettings)
	fc.Result = res
	return ec.marshalNGameSettings2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SimpleGame_settings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SimpleGame",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "chara":
				return ec.fieldContext_GameSettings_chara(ctx, field)
			case "capacity":
				return ec.fieldContext_GameSettings_capacity(ctx, field)
			case "time":
				return ec.fieldContext_GameSettings_time(ctx, field)
			case "rule":
				return ec.fieldContext_GameSettings_rule(ctx, field)
			case "password":
				return ec.fieldContext_GameSettings_password(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GameSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateGameMasterPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdateGameMasterPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateGameMasterPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateGameMasterPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateGameMasterPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateGameParticipantDiaryPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdateGameParticipantDiaryPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateGameParticipantDiaryPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateGameParticipantDiaryPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateGameParticipantDiaryPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateGameParticipantGroupPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdateGameParticipantGroupPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateGameParticipantGroupPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateGameParticipantGroupPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateGameParticipantGroupPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateGameParticipantIconPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdateGameParticipantIconPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateGameParticipantIconPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateGameParticipantIconPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateGameParticipantIconPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateGameParticipantProfilePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdateGameParticipantProfilePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateGameParticipantProfilePayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateGameParticipantProfilePayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateGameParticipantProfilePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateGameParticipantSettingPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdateGameParticipantSettingPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateGameParticipantSettingPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateGameParticipantSettingPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateGameParticipantSettingPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateGamePeriodPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdateGamePeriodPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateGamePeriodPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateGamePeriodPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateGamePeriodPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateGameSettingPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdateGameSettingPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateGameSettingPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateGameSettingPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateGameSettingPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateGameStatusPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdateGameStatusPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateGameStatusPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateGameStatusPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateGameStatusPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePlayerProfilePayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdatePlayerProfilePayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePlayerProfilePayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePlayerProfilePayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePlayerProfilePayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdatePlayerSnsAccountPayload_ok(ctx context.Context, field graphql.CollectedField, obj *gqlmodel.UpdatePlayerSnsAccountPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdatePlayerSnsAccountPayload_ok(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ok, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdatePlayerSnsAccountPayload_ok(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdatePlayerSnsAccountPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputChangePeriod(ctx context.Context, obj interface{}) (gqlmodel.ChangePeriod, error) {
	var it gqlmodel.ChangePeriod
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCharachipsQuery(ctx context.Context, obj interface{}) (gqlmodel.CharachipsQuery, error) {
	var it gqlmodel.CharachipsQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "name", "paging"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "paging":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
			data, err := ec.unmarshalOPageableQuery2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, v)
			if err != nil {
				return it, err
			}
			it.Paging = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteDirectMessageFavorite(ctx context.Context, obj interface{}) (gqlmodel.DeleteDirectMessageFavorite, error) {
	var it gqlmodel.DeleteDirectMessageFavorite
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "directMessageId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "directMessageId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directMessageId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirectMessageID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteGameMaster(ctx context.Context, obj interface{}) (gqlmodel.DeleteGameMaster, error) {
	var it gqlmodel.DeleteGameMaster
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteGameParticipant(ctx context.Context, obj interface{}) (gqlmodel.DeleteGameParticipant, error) {
	var it gqlmodel.DeleteGameParticipant
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteGameParticipantFollow(ctx context.Context, obj interface{}) (gqlmodel.DeleteGameParticipantFollow, error) {
	var it gqlmodel.DeleteGameParticipantFollow
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "targetGameParticipantId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "targetGameParticipantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetGameParticipantId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetGameParticipantID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteGameParticipantIcon(ctx context.Context, obj interface{}) (gqlmodel.DeleteGameParticipantIcon, error) {
	var it gqlmodel.DeleteGameParticipantIcon
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "iconId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "iconId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iconId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.IconID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteGamePeriod(ctx context.Context, obj interface{}) (gqlmodel.DeleteGamePeriod, error) {
	var it gqlmodel.DeleteGamePeriod
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "targetPeriodId", "destPeriodId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "targetPeriodId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetPeriodId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetPeriodID = data
		case "destPeriodId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destPeriodId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DestPeriodID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteMessageFavorite(ctx context.Context, obj interface{}) (gqlmodel.DeleteMessageFavorite, error) {
	var it gqlmodel.DeleteMessageFavorite
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "messageId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "messageId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeletePlayerSnsAccount(ctx context.Context, obj interface{}) (gqlmodel.DeletePlayerSnsAccount, error) {
	var it gqlmodel.DeletePlayerSnsAccount
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDesignersQuery(ctx context.Context, obj interface{}) (gqlmodel.DesignersQuery, error) {
	var it gqlmodel.DesignersQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "Name", "paging"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "Name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "paging":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
			data, err := ec.unmarshalOPageableQuery2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, v)
			if err != nil {
				return it, err
			}
			it.Paging = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDirectMessagesQuery(ctx context.Context, obj interface{}) (gqlmodel.DirectMessagesQuery, error) {
	var it gqlmodel.DirectMessagesQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "participantGroupId", "periodId", "types", "senderIds", "keywords", "sinceAt", "untilAt", "offsetUnixTimeMilli", "paging"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "participantGroupId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participantGroupId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParticipantGroupID = data
		case "periodId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeriodID = data
		case "types":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("types"))
			data, err := ec.unmarshalOMessageType2ᚕchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Types = data
		case "senderIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIds"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SenderIds = data
		case "keywords":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywords"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keywords = data
		case "sinceAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sinceAt"))
			data, err := ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.SinceAt = data
		case "untilAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("untilAt"))
			data, err := ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UntilAt = data
		case "offsetUnixTimeMilli":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offsetUnixTimeMilli"))
			data, err := ec.unmarshalOLong2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OffsetUnixTimeMilli = data
		case "paging":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
			data, err := ec.unmarshalOPageableQuery2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, v)
			if err != nil {
				return it, err
			}
			it.Paging = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameDiariesQuery(ctx context.Context, obj interface{}) (gqlmodel.GameDiariesQuery, error) {
	var it gqlmodel.GameDiariesQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"participantId", "periodId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "participantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participantId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ParticipantID = data
		case "periodId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeriodID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGameParticipantGroupsQuery(ctx context.Context, obj interface{}) (gqlmodel.GameParticipantGroupsQuery, error) {
	var it gqlmodel.GameParticipantGroupsQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"memberParticipantId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "memberParticipantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberParticipantId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MemberParticipantID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGamesQuery(ctx context.Context, obj interface{}) (gqlmodel.GamesQuery, error) {
	var it gqlmodel.GamesQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "name", "statuses", "paging"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "statuses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statuses"))
			data, err := ec.unmarshalOGameStatus2ᚕchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameStatusᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Statuses = data
		case "paging":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
			data, err := ec.unmarshalOPageableQuery2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, v)
			if err != nil {
				return it, err
			}
			it.Paging = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMessagesQuery(ctx context.Context, obj interface{}) (gqlmodel.MessagesQuery, error) {
	var it gqlmodel.MessagesQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "periodId", "types", "senderIds", "replyToMessageId", "keywords", "sinceAt", "untilAt", "offsetUnixTimeMilli", "paging"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "periodId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeriodID = data
		case "types":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("types"))
			data, err := ec.unmarshalOMessageType2ᚕchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Types = data
		case "senderIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("senderIds"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.SenderIds = data
		case "replyToMessageId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replyToMessageId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReplyToMessageID = data
		case "keywords":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywords"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keywords = data
		case "sinceAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sinceAt"))
			data, err := ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.SinceAt = data
		case "untilAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("untilAt"))
			data, err := ec.unmarshalODateTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UntilAt = data
		case "offsetUnixTimeMilli":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offsetUnixTimeMilli"))
			data, err := ec.unmarshalOLong2ᚖuint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.OffsetUnixTimeMilli = data
		case "paging":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
			data, err := ec.unmarshalOPageableQuery2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, v)
			if err != nil {
				return it, err
			}
			it.Paging = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewDirectMessage(ctx context.Context, obj interface{}) (gqlmodel.NewDirectMessage, error) {
	var it gqlmodel.NewDirectMessage
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "gameParticipantGroupId", "type", "iconId", "name", "text", "isConvertDisabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "gameParticipantGroupId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameParticipantGroupId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameParticipantGroupID = data
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNMessageType2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "iconId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iconId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.IconID = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Text = data
		case "isConvertDisabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isConvertDisabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsConvertDisabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewDirectMessageFavorite(ctx context.Context, obj interface{}) (gqlmodel.NewDirectMessageFavorite, error) {
	var it gqlmodel.NewDirectMessageFavorite
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "directMessageId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "directMessageId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directMessageId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirectMessageID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGame(ctx context.Context, obj interface{}) (gqlmodel.NewGame, error) {
	var it gqlmodel.NewGame
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "labels", "settings"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
			data, err := ec.unmarshalNNewGameLabel2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameLabelᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Labels = data
		case "settings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settings"))
			data, err := ec.unmarshalNNewGameSettings2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameSettings(ctx, v)
			if err != nil {
				return it, err
			}
			it.Settings = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGameCapacity(ctx context.Context, obj interface{}) (gqlmodel.NewGameCapacity, error) {
	var it gqlmodel.NewGameCapacity
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"min", "max"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Min = data
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Max = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGameCharaSetting(ctx context.Context, obj interface{}) (gqlmodel.NewGameCharaSetting, error) {
	var it gqlmodel.NewGameCharaSetting
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"charachipIds", "canOriginalCharacter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "charachipIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("charachipIds"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CharachipIds = data
		case "canOriginalCharacter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canOriginalCharacter"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanOriginalCharacter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGameLabel(ctx context.Context, obj interface{}) (gqlmodel.NewGameLabel, error) {
	var it gqlmodel.NewGameLabel
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGameMaster(ctx context.Context, obj interface{}) (gqlmodel.NewGameMaster, error) {
	var it gqlmodel.NewGameMaster
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "playerId", "isProducer"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "playerId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("playerId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlayerID = data
		case "isProducer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isProducer"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsProducer = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGameParticipant(ctx context.Context, obj interface{}) (gqlmodel.NewGameParticipant, error) {
	var it gqlmodel.NewGameParticipant
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "name", "charaId", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "charaId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("charaId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CharaID = data
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGameParticipantDiary(ctx context.Context, obj interface{}) (gqlmodel.NewGameParticipantDiary, error) {
	var it gqlmodel.NewGameParticipantDiary
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "periodId", "title", "body"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "periodId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeriodID = data
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "body":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("body"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Body = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGameParticipantFollow(ctx context.Context, obj interface{}) (gqlmodel.NewGameParticipantFollow, error) {
	var it gqlmodel.NewGameParticipantFollow
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "targetGameParticipantId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "targetGameParticipantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("targetGameParticipantId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TargetGameParticipantID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGameParticipantGroup(ctx context.Context, obj interface{}) (gqlmodel.NewGameParticipantGroup, error) {
	var it gqlmodel.NewGameParticipantGroup
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "name", "gameParticipantIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "gameParticipantIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameParticipantIds"))
			data, err := ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameParticipantIds = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGameParticipantIcon(ctx context.Context, obj interface{}) (gqlmodel.NewGameParticipantIcon, error) {
	var it gqlmodel.NewGameParticipantIcon
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "iconFile", "width", "height"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "iconFile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iconFile"))
			data, err := ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.IconFile = data
		case "width":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("width"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Width = data
		case "height":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("height"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Height = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGamePasswordSetting(ctx context.Context, obj interface{}) (gqlmodel.NewGamePasswordSetting, error) {
	var it gqlmodel.NewGamePasswordSetting
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGameRuleSetting(ctx context.Context, obj interface{}) (gqlmodel.NewGameRuleSetting, error) {
	var it gqlmodel.NewGameRuleSetting
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"isGameMasterProducer", "canShorten", "canSendDirectMessage", "theme"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "isGameMasterProducer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isGameMasterProducer"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsGameMasterProducer = data
		case "canShorten":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canShorten"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanShorten = data
		case "canSendDirectMessage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canSendDirectMessage"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanSendDirectMessage = data
		case "theme":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGameSettings(ctx context.Context, obj interface{}) (gqlmodel.NewGameSettings, error) {
	var it gqlmodel.NewGameSettings
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"chara", "capacity", "time", "rule", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "chara":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chara"))
			data, err := ec.unmarshalNNewGameCharaSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameCharaSetting(ctx, v)
			if err != nil {
				return it, err
			}
			it.Chara = data
		case "capacity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capacity"))
			data, err := ec.unmarshalNNewGameCapacity2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameCapacity(ctx, v)
			if err != nil {
				return it, err
			}
			it.Capacity = data
		case "time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			data, err := ec.unmarshalNNewGameTimeSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameTimeSetting(ctx, v)
			if err != nil {
				return it, err
			}
			it.Time = data
		case "rule":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule"))
			data, err := ec.unmarshalNNewGameRuleSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameRuleSetting(ctx, v)
			if err != nil {
				return it, err
			}
			it.Rule = data
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNNewGamePasswordSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGamePasswordSetting(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewGameTimeSetting(ctx context.Context, obj interface{}) (gqlmodel.NewGameTimeSetting, error) {
	var it gqlmodel.NewGameTimeSetting
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"periodPrefix", "periodSuffix", "periodIntervalSeconds", "openAt", "startParticipateAt", "startGameAt", "epilogueGameAt", "finishGameAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "periodPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeriodPrefix = data
		case "periodSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeriodSuffix = data
		case "periodIntervalSeconds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodIntervalSeconds"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeriodIntervalSeconds = data
		case "openAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openAt"))
			data, err := ec.unmarshalNDateTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenAt = data
		case "startParticipateAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startParticipateAt"))
			data, err := ec.unmarshalNDateTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartParticipateAt = data
		case "startGameAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startGameAt"))
			data, err := ec.unmarshalNDateTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartGameAt = data
		case "epilogueGameAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("epilogueGameAt"))
			data, err := ec.unmarshalNDateTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EpilogueGameAt = data
		case "finishGameAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finishGameAt"))
			data, err := ec.unmarshalNDateTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinishGameAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMessage(ctx context.Context, obj interface{}) (gqlmodel.NewMessage, error) {
	var it gqlmodel.NewMessage
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "type", "iconId", "name", "receiverParticipantId", "replyToMessageId", "text", "isConvertDisabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNMessageType2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "iconId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iconId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IconID = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "receiverParticipantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("receiverParticipantId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReceiverParticipantID = data
		case "replyToMessageId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replyToMessageId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ReplyToMessageID = data
		case "text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Text = data
		case "isConvertDisabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isConvertDisabled"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsConvertDisabled = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewMessageFavorite(ctx context.Context, obj interface{}) (gqlmodel.NewMessageFavorite, error) {
	var it gqlmodel.NewMessageFavorite
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "messageId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "messageId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MessageID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewPlayerProfile(ctx context.Context, obj interface{}) (gqlmodel.NewPlayerProfile, error) {
	var it gqlmodel.NewPlayerProfile
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "profileImageFile", "introduction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "profileImageFile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImageFile"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileImageFile = data
		case "introduction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("introduction"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Introduction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewPlayerSnsAccount(ctx context.Context, obj interface{}) (gqlmodel.NewPlayerSnsAccount, error) {
	var it gqlmodel.NewPlayerSnsAccount
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "accountName", "accountUrl"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNSnsType2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐSnsType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "accountName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountName = data
		case "accountUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountUrl"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountURL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPageableQuery(ctx context.Context, obj interface{}) (gqlmodel.PageableQuery, error) {
	var it gqlmodel.PageableQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pageSize", "pageNumber", "isDesc", "isLatest"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pageSize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "pageNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageNumber"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageNumber = data
		case "isDesc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDesc"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsDesc = data
		case "isLatest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isLatest"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsLatest = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputParticipantsQuery(ctx context.Context, obj interface{}) (gqlmodel.ParticipantsQuery, error) {
	var it gqlmodel.ParticipantsQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "playerIds", "paging"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "playerIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("playerIds"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.PlayerIds = data
		case "paging":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
			data, err := ec.unmarshalOPageableQuery2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, v)
			if err != nil {
				return it, err
			}
			it.Paging = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlayersQuery(ctx context.Context, obj interface{}) (gqlmodel.PlayersQuery, error) {
	var it gqlmodel.PlayersQuery
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "name", "paging"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Ids = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "paging":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paging"))
			data, err := ec.unmarshalOPageableQuery2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx, v)
			if err != nil {
				return it, err
			}
			it.Paging = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegisterDebugMessages(ctx context.Context, obj interface{}) (gqlmodel.RegisterDebugMessages, error) {
	var it gqlmodel.RegisterDebugMessages
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCharaSetting(ctx context.Context, obj interface{}) (gqlmodel.UpdateCharaSetting, error) {
	var it gqlmodel.UpdateCharaSetting
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"charachipIds", "canOriginalCharacter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "charachipIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("charachipIds"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CharachipIds = data
		case "canOriginalCharacter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canOriginalCharacter"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanOriginalCharacter = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameCapacity(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameCapacity, error) {
	var it gqlmodel.UpdateGameCapacity
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"min", "max"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "min":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("min"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Min = data
		case "max":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("max"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Max = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameLabel(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameLabel, error) {
	var it gqlmodel.UpdateGameLabel
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "type"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameMaster(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameMaster, error) {
	var it gqlmodel.UpdateGameMaster
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "id", "isProducer"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "isProducer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isProducer"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsProducer = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameNotificationCondition(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameNotificationCondition, error) {
	var it gqlmodel.UpdateGameNotificationCondition
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"participate", "start"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "participate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("participate"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Participate = data
		case "start":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("start"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Start = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameParticipantDiary(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameParticipantDiary, error) {
	var it gqlmodel.UpdateGameParticipantDiary
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "id", "title", "body"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "body":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("body"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Body = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameParticipantGroup(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameParticipantGroup, error) {
	var it gqlmodel.UpdateGameParticipantGroup
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "id", "name"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameParticipantIcon(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameParticipantIcon, error) {
	var it gqlmodel.UpdateGameParticipantIcon
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "id", "displayOrder"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "displayOrder":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayOrder"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.DisplayOrder = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameParticipantProfile(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameParticipantProfile, error) {
	var it gqlmodel.UpdateGameParticipantProfile
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "name", "profileImageFile", "profileImageUrl", "profileIconId", "introduction", "memo", "isPlayerOpen"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "profileImageFile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImageFile"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileImageFile = data
		case "profileImageUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImageUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileImageURL = data
		case "profileIconId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileIconId"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileIconID = data
		case "introduction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("introduction"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Introduction = data
		case "memo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memo"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Memo = data
		case "isPlayerOpen":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isPlayerOpen"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsPlayerOpen = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameParticipantSetting(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameParticipantSetting, error) {
	var it gqlmodel.UpdateGameParticipantSetting
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "notification"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "notification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notification"))
			data, err := ec.unmarshalOUpdateNotificationCondition2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateNotificationCondition(ctx, v)
			if err != nil {
				return it, err
			}
			it.Notification = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGamePasswordSetting(ctx context.Context, obj interface{}) (gqlmodel.UpdateGamePasswordSetting, error) {
	var it gqlmodel.UpdateGamePasswordSetting
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGamePeriod(ctx context.Context, obj interface{}) (gqlmodel.UpdateGamePeriod, error) {
	var it gqlmodel.UpdateGamePeriod
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "periodId", "name", "startAt", "endAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "periodId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeriodID = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "startAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startAt"))
			data, err := ec.unmarshalNDateTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartAt = data
		case "endAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endAt"))
			data, err := ec.unmarshalNDateTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameRuleSetting(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameRuleSetting, error) {
	var it gqlmodel.UpdateGameRuleSetting
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"isGameMasterProducer", "canShorten", "canSendDirectMessage", "theme"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "isGameMasterProducer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isGameMasterProducer"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.IsGameMasterProducer = data
		case "canShorten":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canShorten"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanShorten = data
		case "canSendDirectMessage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("canSendDirectMessage"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.CanSendDirectMessage = data
		case "theme":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("theme"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Theme = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameSetting(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameSetting, error) {
	var it gqlmodel.UpdateGameSetting
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "name", "labels", "settings"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
			data, err := ec.unmarshalNUpdateGameLabel2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameLabelᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Labels = data
		case "settings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settings"))
			data, err := ec.unmarshalNUpdateGameSettings2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameSettings(ctx, v)
			if err != nil {
				return it, err
			}
			it.Settings = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameSettings(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameSettings, error) {
	var it gqlmodel.UpdateGameSettings
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"chara", "capacity", "time", "rule", "password"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "chara":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chara"))
			data, err := ec.unmarshalNUpdateCharaSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateCharaSetting(ctx, v)
			if err != nil {
				return it, err
			}
			it.Chara = data
		case "capacity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("capacity"))
			data, err := ec.unmarshalNUpdateGameCapacity2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameCapacity(ctx, v)
			if err != nil {
				return it, err
			}
			it.Capacity = data
		case "time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("time"))
			data, err := ec.unmarshalNUpdateGameTimeSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameTimeSetting(ctx, v)
			if err != nil {
				return it, err
			}
			it.Time = data
		case "rule":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rule"))
			data, err := ec.unmarshalNUpdateGameRuleSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameRuleSetting(ctx, v)
			if err != nil {
				return it, err
			}
			it.Rule = data
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNUpdateGamePasswordSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGamePasswordSetting(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameStatus(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameStatus, error) {
	var it gqlmodel.UpdateGameStatus
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"gameId", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "gameId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gameId"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.GameID = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNGameStatus2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateGameTimeSetting(ctx context.Context, obj interface{}) (gqlmodel.UpdateGameTimeSetting, error) {
	var it gqlmodel.UpdateGameTimeSetting
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"periodPrefix", "periodSuffix", "periodIntervalSeconds", "openAt", "startParticipateAt", "startGameAt", "epilogueGameAt", "finishGameAt"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "periodPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodPrefix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeriodPrefix = data
		case "periodSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodSuffix"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeriodSuffix = data
		case "periodIntervalSeconds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("periodIntervalSeconds"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PeriodIntervalSeconds = data
		case "openAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("openAt"))
			data, err := ec.unmarshalNDateTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.OpenAt = data
		case "startParticipateAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startParticipateAt"))
			data, err := ec.unmarshalNDateTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartParticipateAt = data
		case "startGameAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startGameAt"))
			data, err := ec.unmarshalNDateTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartGameAt = data
		case "epilogueGameAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("epilogueGameAt"))
			data, err := ec.unmarshalNDateTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EpilogueGameAt = data
		case "finishGameAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("finishGameAt"))
			data, err := ec.unmarshalNDateTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.FinishGameAt = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateMessageNotificationCondition(ctx context.Context, obj interface{}) (gqlmodel.UpdateMessageNotificationCondition, error) {
	var it gqlmodel.UpdateMessageNotificationCondition
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"reply", "secret", "directMessage", "keywords"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "reply":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reply"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reply = data
		case "secret":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secret"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Secret = data
		case "directMessage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("directMessage"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.DirectMessage = data
		case "keywords":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keywords"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Keywords = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateNotificationCondition(ctx context.Context, obj interface{}) (gqlmodel.UpdateNotificationCondition, error) {
	var it gqlmodel.UpdateNotificationCondition
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"discordWebhookUrl", "game", "message"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "discordWebhookUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discordWebhookUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscordWebhookURL = data
		case "game":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("game"))
			data, err := ec.unmarshalNUpdateGameNotificationCondition2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameNotificationCondition(ctx, v)
			if err != nil {
				return it, err
			}
			it.Game = data
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			data, err := ec.unmarshalNUpdateMessageNotificationCondition2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateMessageNotificationCondition(ctx, v)
			if err != nil {
				return it, err
			}
			it.Message = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePlayerProfile(ctx context.Context, obj interface{}) (gqlmodel.UpdatePlayerProfile, error) {
	var it gqlmodel.UpdatePlayerProfile
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "profileImageFile", "profileImageUrl", "introduction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "profileImageFile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImageFile"))
			data, err := ec.unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileImageFile = data
		case "profileImageUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profileImageUrl"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProfileImageURL = data
		case "introduction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("introduction"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Introduction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePlayerSnsAccount(ctx context.Context, obj interface{}) (gqlmodel.UpdatePlayerSnsAccount, error) {
	var it gqlmodel.UpdatePlayerSnsAccount
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "type", "accountName", "accountUrl"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNSnsType2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐSnsType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "accountName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountName = data
		case "accountUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accountUrl"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AccountURL = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Pageable(ctx context.Context, sel ast.SelectionSet, obj gqlmodel.Pageable) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case gqlmodel.Messages:
		return ec._Messages(ctx, sel, &obj)
	case *gqlmodel.Messages:
		if obj == nil {
			return graphql.Null
		}
		return ec._Messages(ctx, sel, obj)
	case gqlmodel.DirectMessages:
		return ec._DirectMessages(ctx, sel, &obj)
	case *gqlmodel.DirectMessages:
		if obj == nil {
			return graphql.Null
		}
		return ec._DirectMessages(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var changePeriodIfNeededPayloadImplementors = []string{"ChangePeriodIfNeededPayload"}

func (ec *executionContext) _ChangePeriodIfNeededPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.ChangePeriodIfNeededPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, changePeriodIfNeededPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChangePeriodIfNeededPayload")
		case "ok":
			out.Values[i] = ec._ChangePeriodIfNeededPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var charaImplementors = []string{"Chara"}

func (ec *executionContext) _Chara(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Chara) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, charaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Chara")
		case "id":
			out.Values[i] = ec._Chara_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Chara_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "size":
			out.Values[i] = ec._Chara_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "images":
			out.Values[i] = ec._Chara_images(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var charaImageImplementors = []string{"CharaImage"}

func (ec *executionContext) _CharaImage(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.CharaImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, charaImageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharaImage")
		case "id":
			out.Values[i] = ec._CharaImage_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._CharaImage_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._CharaImage_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var charaSizeImplementors = []string{"CharaSize"}

func (ec *executionContext) _CharaSize(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.CharaSize) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, charaSizeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharaSize")
		case "width":
			out.Values[i] = ec._CharaSize_width(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "height":
			out.Values[i] = ec._CharaSize_height(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var charachipImplementors = []string{"Charachip"}

func (ec *executionContext) _Charachip(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Charachip) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, charachipImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Charachip")
		case "id":
			out.Values[i] = ec._Charachip_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Charachip_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "designer":
			out.Values[i] = ec._Charachip_designer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "descriptionUrl":
			out.Values[i] = ec._Charachip_descriptionUrl(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "canChangeName":
			out.Values[i] = ec._Charachip_canChangeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "charas":
			out.Values[i] = ec._Charachip_charas(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteDirectMessageFavoritePayloadImplementors = []string{"DeleteDirectMessageFavoritePayload"}

func (ec *executionContext) _DeleteDirectMessageFavoritePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DeleteDirectMessageFavoritePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteDirectMessageFavoritePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteDirectMessageFavoritePayload")
		case "ok":
			out.Values[i] = ec._DeleteDirectMessageFavoritePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteGameMasterPayloadImplementors = []string{"DeleteGameMasterPayload"}

func (ec *executionContext) _DeleteGameMasterPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DeleteGameMasterPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteGameMasterPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteGameMasterPayload")
		case "ok":
			out.Values[i] = ec._DeleteGameMasterPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteGameParticipantFollowPayloadImplementors = []string{"DeleteGameParticipantFollowPayload"}

func (ec *executionContext) _DeleteGameParticipantFollowPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DeleteGameParticipantFollowPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteGameParticipantFollowPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteGameParticipantFollowPayload")
		case "ok":
			out.Values[i] = ec._DeleteGameParticipantFollowPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteGameParticipantIconPayloadImplementors = []string{"DeleteGameParticipantIconPayload"}

func (ec *executionContext) _DeleteGameParticipantIconPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DeleteGameParticipantIconPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteGameParticipantIconPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteGameParticipantIconPayload")
		case "ok":
			out.Values[i] = ec._DeleteGameParticipantIconPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteGameParticipantPayloadImplementors = []string{"DeleteGameParticipantPayload"}

func (ec *executionContext) _DeleteGameParticipantPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DeleteGameParticipantPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteGameParticipantPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteGameParticipantPayload")
		case "ok":
			out.Values[i] = ec._DeleteGameParticipantPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteGamePeriodPayloadImplementors = []string{"DeleteGamePeriodPayload"}

func (ec *executionContext) _DeleteGamePeriodPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DeleteGamePeriodPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteGamePeriodPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteGamePeriodPayload")
		case "ok":
			out.Values[i] = ec._DeleteGamePeriodPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deleteMessageFavoritePayloadImplementors = []string{"DeleteMessageFavoritePayload"}

func (ec *executionContext) _DeleteMessageFavoritePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DeleteMessageFavoritePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteMessageFavoritePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteMessageFavoritePayload")
		case "ok":
			out.Values[i] = ec._DeleteMessageFavoritePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deletePlayerSnsAccountPayloadImplementors = []string{"DeletePlayerSnsAccountPayload"}

func (ec *executionContext) _DeletePlayerSnsAccountPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DeletePlayerSnsAccountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deletePlayerSnsAccountPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeletePlayerSnsAccountPayload")
		case "ok":
			out.Values[i] = ec._DeletePlayerSnsAccountPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var designerImplementors = []string{"Designer"}

func (ec *executionContext) _Designer(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Designer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, designerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Designer")
		case "id":
			out.Values[i] = ec._Designer_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Designer_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var directMessageImplementors = []string{"DirectMessage"}

func (ec *executionContext) _DirectMessage(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DirectMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, directMessageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DirectMessage")
		case "id":
			out.Values[i] = ec._DirectMessage_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "participantGroupId":
			out.Values[i] = ec._DirectMessage_participantGroupId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._DirectMessage_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "time":
			out.Values[i] = ec._DirectMessage_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sender":
			out.Values[i] = ec._DirectMessage_sender(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reactions":
			out.Values[i] = ec._DirectMessage_reactions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var directMessageReactionsImplementors = []string{"DirectMessageReactions"}

func (ec *executionContext) _DirectMessageReactions(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DirectMessageReactions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, directMessageReactionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DirectMessageReactions")
		case "favoriteCounts":
			out.Values[i] = ec._DirectMessageReactions_favoriteCounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "favoriteParticipantIds":
			out.Values[i] = ec._DirectMessageReactions_favoriteParticipantIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var directMessagesImplementors = []string{"DirectMessages", "Pageable"}

func (ec *executionContext) _DirectMessages(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.DirectMessages) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, directMessagesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DirectMessages")
		case "list":
			out.Values[i] = ec._DirectMessages_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "allPageCount":
			out.Values[i] = ec._DirectMessages_allPageCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasPrePage":
			out.Values[i] = ec._DirectMessages_hasPrePage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasNextPage":
			out.Values[i] = ec._DirectMessages_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currentPageNumber":
			out.Values[i] = ec._DirectMessages_currentPageNumber(ctx, field, obj)
		case "isDesc":
			out.Values[i] = ec._DirectMessages_isDesc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isLatest":
			out.Values[i] = ec._DirectMessages_isLatest(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "latestUnixTimeMilli":
			out.Values[i] = ec._DirectMessages_latestUnixTimeMilli(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameImplementors = []string{"Game"}

func (ec *executionContext) _Game(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Game) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Game")
		case "id":
			out.Values[i] = ec._Game_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Game_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Game_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "labels":
			out.Values[i] = ec._Game_labels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gameMasters":
			out.Values[i] = ec._Game_gameMasters(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "participants":
			out.Values[i] = ec._Game_participants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "periods":
			out.Values[i] = ec._Game_periods(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "settings":
			out.Values[i] = ec._Game_settings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameCapacityImplementors = []string{"GameCapacity"}

func (ec *executionContext) _GameCapacity(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameCapacity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameCapacityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameCapacity")
		case "min":
			out.Values[i] = ec._GameCapacity_min(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "max":
			out.Values[i] = ec._GameCapacity_max(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameCharaSettingImplementors = []string{"GameCharaSetting"}

func (ec *executionContext) _GameCharaSetting(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameCharaSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameCharaSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameCharaSetting")
		case "charachips":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameCharaSetting_charachips(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "canOriginalCharacter":
			out.Values[i] = ec._GameCharaSetting_canOriginalCharacter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameLabelImplementors = []string{"GameLabel"}

func (ec *executionContext) _GameLabel(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameLabel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameLabelImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameLabel")
		case "id":
			out.Values[i] = ec._GameLabel_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._GameLabel_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._GameLabel_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameMasterImplementors = []string{"GameMaster"}

func (ec *executionContext) _GameMaster(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameMaster) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameMasterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameMaster")
		case "id":
			out.Values[i] = ec._GameMaster_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "player":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameMaster_player(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "isProducer":
			out.Values[i] = ec._GameMaster_isProducer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameNotificationConditionImplementors = []string{"GameNotificationCondition"}

func (ec *executionContext) _GameNotificationCondition(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameNotificationCondition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameNotificationConditionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameNotificationCondition")
		case "participate":
			out.Values[i] = ec._GameNotificationCondition_participate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "start":
			out.Values[i] = ec._GameNotificationCondition_start(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameParticipantImplementors = []string{"GameParticipant"}

func (ec *executionContext) _GameParticipant(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameParticipant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameParticipantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameParticipant")
		case "id":
			out.Values[i] = ec._GameParticipant_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._GameParticipant_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "entryNumber":
			out.Values[i] = ec._GameParticipant_entryNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "player":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameParticipant_player(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "chara":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameParticipant_chara(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "memo":
			out.Values[i] = ec._GameParticipant_memo(ctx, field, obj)
		case "profileIcon":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameParticipant_profileIcon(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lastAccessedAt":
			out.Values[i] = ec._GameParticipant_lastAccessedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isGone":
			out.Values[i] = ec._GameParticipant_isGone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "canChangeName":
			out.Values[i] = ec._GameParticipant_canChangeName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "followParticipantIds":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameParticipant_followParticipantIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "followerParticipantIds":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameParticipant_followerParticipantIds(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameParticipantDiaryImplementors = []string{"GameParticipantDiary"}

func (ec *executionContext) _GameParticipantDiary(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameParticipantDiary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameParticipantDiaryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameParticipantDiary")
		case "id":
			out.Values[i] = ec._GameParticipantDiary_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "participant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameParticipantDiary_participant(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "period":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameParticipantDiary_period(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "title":
			out.Values[i] = ec._GameParticipantDiary_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "body":
			out.Values[i] = ec._GameParticipantDiary_body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameParticipantGroupImplementors = []string{"GameParticipantGroup"}

func (ec *executionContext) _GameParticipantGroup(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameParticipantGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameParticipantGroupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameParticipantGroup")
		case "id":
			out.Values[i] = ec._GameParticipantGroup_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._GameParticipantGroup_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "participants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._GameParticipantGroup_participants(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "latestUnixTimeMilli":
			out.Values[i] = ec._GameParticipantGroup_latestUnixTimeMilli(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameParticipantIconImplementors = []string{"GameParticipantIcon"}

func (ec *executionContext) _GameParticipantIcon(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameParticipantIcon) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameParticipantIconImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameParticipantIcon")
		case "id":
			out.Values[i] = ec._GameParticipantIcon_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._GameParticipantIcon_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "width":
			out.Values[i] = ec._GameParticipantIcon_width(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "height":
			out.Values[i] = ec._GameParticipantIcon_height(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "displayOrder":
			out.Values[i] = ec._GameParticipantIcon_displayOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameParticipantProfileImplementors = []string{"GameParticipantProfile"}

func (ec *executionContext) _GameParticipantProfile(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameParticipantProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameParticipantProfileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameParticipantProfile")
		case "participantId":
			out.Values[i] = ec._GameParticipantProfile_participantId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._GameParticipantProfile_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "entryNumber":
			out.Values[i] = ec._GameParticipantProfile_entryNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isGone":
			out.Values[i] = ec._GameParticipantProfile_isGone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "profileImageUrl":
			out.Values[i] = ec._GameParticipantProfile_profileImageUrl(ctx, field, obj)
		case "introduction":
			out.Values[i] = ec._GameParticipantProfile_introduction(ctx, field, obj)
		case "followsCount":
			out.Values[i] = ec._GameParticipantProfile_followsCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "followersCount":
			out.Values[i] = ec._GameParticipantProfile_followersCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isPlayerOpen":
			out.Values[i] = ec._GameParticipantProfile_isPlayerOpen(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "playerName":
			out.Values[i] = ec._GameParticipantProfile_playerName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameParticipantSettingImplementors = []string{"GameParticipantSetting"}

func (ec *executionContext) _GameParticipantSetting(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameParticipantSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameParticipantSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameParticipantSetting")
		case "notification":
			out.Values[i] = ec._GameParticipantSetting_notification(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gamePasswordSettingImplementors = []string{"GamePasswordSetting"}

func (ec *executionContext) _GamePasswordSetting(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GamePasswordSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gamePasswordSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GamePasswordSetting")
		case "hasPassword":
			out.Values[i] = ec._GamePasswordSetting_hasPassword(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gamePeriodImplementors = []string{"GamePeriod"}

func (ec *executionContext) _GamePeriod(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GamePeriod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gamePeriodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GamePeriod")
		case "id":
			out.Values[i] = ec._GamePeriod_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "count":
			out.Values[i] = ec._GamePeriod_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._GamePeriod_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startAt":
			out.Values[i] = ec._GamePeriod_startAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "endAt":
			out.Values[i] = ec._GamePeriod_endAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameRuleSettingImplementors = []string{"GameRuleSetting"}

func (ec *executionContext) _GameRuleSetting(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameRuleSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameRuleSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameRuleSetting")
		case "isGameMasterProducer":
			out.Values[i] = ec._GameRuleSetting_isGameMasterProducer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "canShorten":
			out.Values[i] = ec._GameRuleSetting_canShorten(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "canSendDirectMessage":
			out.Values[i] = ec._GameRuleSetting_canSendDirectMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "theme":
			out.Values[i] = ec._GameRuleSetting_theme(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameSettingsImplementors = []string{"GameSettings"}

func (ec *executionContext) _GameSettings(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameSettings")
		case "chara":
			out.Values[i] = ec._GameSettings_chara(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "capacity":
			out.Values[i] = ec._GameSettings_capacity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "time":
			out.Values[i] = ec._GameSettings_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rule":
			out.Values[i] = ec._GameSettings_rule(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "password":
			out.Values[i] = ec._GameSettings_password(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var gameTimeSettingImplementors = []string{"GameTimeSetting"}

func (ec *executionContext) _GameTimeSetting(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.GameTimeSetting) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, gameTimeSettingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GameTimeSetting")
		case "periodPrefix":
			out.Values[i] = ec._GameTimeSetting_periodPrefix(ctx, field, obj)
		case "periodSuffix":
			out.Values[i] = ec._GameTimeSetting_periodSuffix(ctx, field, obj)
		case "periodIntervalSeconds":
			out.Values[i] = ec._GameTimeSetting_periodIntervalSeconds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "openAt":
			out.Values[i] = ec._GameTimeSetting_openAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startParticipateAt":
			out.Values[i] = ec._GameTimeSetting_startParticipateAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startGameAt":
			out.Values[i] = ec._GameTimeSetting_startGameAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "epilogueGameAt":
			out.Values[i] = ec._GameTimeSetting_epilogueGameAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "finishGameAt":
			out.Values[i] = ec._GameTimeSetting_finishGameAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var messageImplementors = []string{"Message"}

func (ec *executionContext) _Message(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Message) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Message")
		case "id":
			out.Values[i] = ec._Message_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._Message_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "time":
			out.Values[i] = ec._Message_time(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sender":
			out.Values[i] = ec._Message_sender(ctx, field, obj)
		case "receiver":
			out.Values[i] = ec._Message_receiver(ctx, field, obj)
		case "replyTo":
			out.Values[i] = ec._Message_replyTo(ctx, field, obj)
		case "reactions":
			out.Values[i] = ec._Message_reactions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var messageContentImplementors = []string{"MessageContent"}

func (ec *executionContext) _MessageContent(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.MessageContent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageContentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MessageContent")
		case "type":
			out.Values[i] = ec._MessageContent_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "number":
			out.Values[i] = ec._MessageContent_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "text":
			out.Values[i] = ec._MessageContent_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isConvertDisabled":
			out.Values[i] = ec._MessageContent_isConvertDisabled(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var messageNotificationConditionImplementors = []string{"MessageNotificationCondition"}

func (ec *executionContext) _MessageNotificationCondition(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.MessageNotificationCondition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageNotificationConditionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MessageNotificationCondition")
		case "reply":
			out.Values[i] = ec._MessageNotificationCondition_reply(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "secret":
			out.Values[i] = ec._MessageNotificationCondition_secret(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "directMessage":
			out.Values[i] = ec._MessageNotificationCondition_directMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "keywords":
			out.Values[i] = ec._MessageNotificationCondition_keywords(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var messageReactionsImplementors = []string{"MessageReactions"}

func (ec *executionContext) _MessageReactions(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.MessageReactions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageReactionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MessageReactions")
		case "replyCount":
			out.Values[i] = ec._MessageReactions_replyCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "favoriteCount":
			out.Values[i] = ec._MessageReactions_favoriteCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "favoriteParticipantIds":
			out.Values[i] = ec._MessageReactions_favoriteParticipantIds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var messageReceiverImplementors = []string{"MessageReceiver"}

func (ec *executionContext) _MessageReceiver(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.MessageReceiver) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageReceiverImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MessageReceiver")
		case "participantId":
			out.Values[i] = ec._MessageReceiver_participantId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._MessageReceiver_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "entryNumber":
			out.Values[i] = ec._MessageReceiver_entryNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var messageRecipientImplementors = []string{"MessageRecipient"}

func (ec *executionContext) _MessageRecipient(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.MessageRecipient) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageRecipientImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MessageRecipient")
		case "messageId":
			out.Values[i] = ec._MessageRecipient_messageId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "participantId":
			out.Values[i] = ec._MessageRecipient_participantId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var messageSenderImplementors = []string{"MessageSender"}

func (ec *executionContext) _MessageSender(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.MessageSender) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageSenderImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MessageSender")
		case "participantId":
			out.Values[i] = ec._MessageSender_participantId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._MessageSender_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "entryNumber":
			out.Values[i] = ec._MessageSender_entryNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "icon":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MessageSender_icon(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var messageTimeImplementors = []string{"MessageTime"}

func (ec *executionContext) _MessageTime(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.MessageTime) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messageTimeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MessageTime")
		case "sendAt":
			out.Values[i] = ec._MessageTime_sendAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sendUnixTimeMilli":
			out.Values[i] = ec._MessageTime_sendUnixTimeMilli(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var messagesImplementors = []string{"Messages", "Pageable"}

func (ec *executionContext) _Messages(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Messages) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, messagesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Messages")
		case "list":
			out.Values[i] = ec._Messages_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "allPageCount":
			out.Values[i] = ec._Messages_allPageCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasPrePage":
			out.Values[i] = ec._Messages_hasPrePage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasNextPage":
			out.Values[i] = ec._Messages_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "currentPageNumber":
			out.Values[i] = ec._Messages_currentPageNumber(ctx, field, obj)
		case "isDesc":
			out.Values[i] = ec._Messages_isDesc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isLatest":
			out.Values[i] = ec._Messages_isLatest(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "latestUnixTimeMilli":
			out.Values[i] = ec._Messages_latestUnixTimeMilli(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "registerGame":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerGame(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerGameMaster":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerGameMaster(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateGameMaster":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGameMaster(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteGameMaster":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteGameMaster(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateGameStatus":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGameStatus(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateGameSetting":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGameSetting(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateGamePeriod":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGamePeriod(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteGamePeriod":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteGamePeriod(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "changePeriodIfNeeded":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_changePeriodIfNeeded(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerGameParticipant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerGameParticipant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateGameParticipantProfile":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGameParticipantProfile(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerGameParticipantIcon":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerGameParticipantIcon(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateGameParticipantIcon":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGameParticipantIcon(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteGameParticipantIcon":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteGameParticipantIcon(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateGameParticipantSetting":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGameParticipantSetting(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteGameParticipant":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteGameParticipant(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerGameParticipantFollow":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerGameParticipantFollow(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteGameParticipantFollow":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteGameParticipantFollow(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerGameParticipantDiary":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerGameParticipantDiary(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateGameParticipantDiary":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGameParticipantDiary(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatePlayerProfile":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlayerProfile(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerPlayerSnsAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerPlayerSnsAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatePlayerSnsAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatePlayerSnsAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletePlayerSnsAccount":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePlayerSnsAccount(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerMessageDryRun":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerMessageDryRun(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerMessage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerMessage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerMessageFavorite":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerMessageFavorite(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMessageFavorite":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMessageFavorite(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerDirectMessageDryRun":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerDirectMessageDryRun(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerDirectMessage":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerDirectMessage(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerDirectMessageFavorite":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerDirectMessageFavorite(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteDirectMessageFavorite":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDirectMessageFavorite(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerGameParticipantGroup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerGameParticipantGroup(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateGameParticipantGroup":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateGameParticipantGroup(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registerDebugMessages":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_registerDebugMessages(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var notificationConditionImplementors = []string{"NotificationCondition"}

func (ec *executionContext) _NotificationCondition(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.NotificationCondition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationConditionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NotificationCondition")
		case "discordWebhookUrl":
			out.Values[i] = ec._NotificationCondition_discordWebhookUrl(ctx, field, obj)
		case "game":
			out.Values[i] = ec._NotificationCondition_game(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "message":
			out.Values[i] = ec._NotificationCondition_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var playerImplementors = []string{"Player"}

func (ec *executionContext) _Player(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.Player) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Player")
		case "id":
			out.Values[i] = ec._Player_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Player_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "profile":
			out.Values[i] = ec._Player_profile(ctx, field, obj)
		case "designer":
			out.Values[i] = ec._Player_designer(ctx, field, obj)
		case "authorityCodes":
			out.Values[i] = ec._Player_authorityCodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var playerProfileImplementors = []string{"PlayerProfile"}

func (ec *executionContext) _PlayerProfile(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.PlayerProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playerProfileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlayerProfile")
		case "profileImageUrl":
			out.Values[i] = ec._PlayerProfile_profileImageUrl(ctx, field, obj)
		case "introduction":
			out.Values[i] = ec._PlayerProfile_introduction(ctx, field, obj)
		case "snsAccounts":
			out.Values[i] = ec._PlayerProfile_snsAccounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var playerSnsAccountImplementors = []string{"PlayerSnsAccount"}

func (ec *executionContext) _PlayerSnsAccount(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.PlayerSnsAccount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, playerSnsAccountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlayerSnsAccount")
		case "id":
			out.Values[i] = ec._PlayerSnsAccount_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._PlayerSnsAccount_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._PlayerSnsAccount_name(ctx, field, obj)
		case "url":
			out.Values[i] = ec._PlayerSnsAccount_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "designers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_designers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "designer":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_designer(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "charachips":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_charachips(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "charachip":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_charachip(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "chara":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_chara(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "games":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_games(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "game":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_game(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "myGameParticipant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myGameParticipant(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gameParticipantProfile":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gameParticipantProfile(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gameParticipantIcons":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gameParticipantIcons(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gameParticipantFollows":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gameParticipantFollows(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gameParticipantFollowers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gameParticipantFollowers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gameParticipantSetting":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gameParticipantSetting(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gameDiaries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gameDiaries(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gameDiary":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gameDiary(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "players":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_players(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "player":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_player(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "myPlayer":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_myPlayer(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "messages":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_messages(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "messagesLatestUnixTimeMilli":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_messagesLatestUnixTimeMilli(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "message":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_message(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "messageReplies":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_messageReplies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "messageFavoriteGameParticipants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_messageFavoriteGameParticipants(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "gameParticipantGroups":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_gameParticipantGroups(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "directMessages":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_directMessages(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "directMessagesLatestUnixTimeMilli":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_directMessagesLatestUnixTimeMilli(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "directMessage":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_directMessage(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "directMessageFavoriteGameParticipants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_directMessageFavoriteGameParticipants(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerDebugMessagesPayloadImplementors = []string{"RegisterDebugMessagesPayload"}

func (ec *executionContext) _RegisterDebugMessagesPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterDebugMessagesPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerDebugMessagesPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterDebugMessagesPayload")
		case "ok":
			out.Values[i] = ec._RegisterDebugMessagesPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerDirectMessageDryRunPayloadImplementors = []string{"RegisterDirectMessageDryRunPayload"}

func (ec *executionContext) _RegisterDirectMessageDryRunPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterDirectMessageDryRunPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerDirectMessageDryRunPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterDirectMessageDryRunPayload")
		case "directMessage":
			out.Values[i] = ec._RegisterDirectMessageDryRunPayload_directMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerDirectMessageFavoritePayloadImplementors = []string{"RegisterDirectMessageFavoritePayload"}

func (ec *executionContext) _RegisterDirectMessageFavoritePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterDirectMessageFavoritePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerDirectMessageFavoritePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterDirectMessageFavoritePayload")
		case "ok":
			out.Values[i] = ec._RegisterDirectMessageFavoritePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerDirectMessagePayloadImplementors = []string{"RegisterDirectMessagePayload"}

func (ec *executionContext) _RegisterDirectMessagePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterDirectMessagePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerDirectMessagePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterDirectMessagePayload")
		case "ok":
			out.Values[i] = ec._RegisterDirectMessagePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerGameMasterPayloadImplementors = []string{"RegisterGameMasterPayload"}

func (ec *executionContext) _RegisterGameMasterPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterGameMasterPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerGameMasterPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterGameMasterPayload")
		case "gameMaster":
			out.Values[i] = ec._RegisterGameMasterPayload_gameMaster(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerGameParticipantDiaryPayloadImplementors = []string{"RegisterGameParticipantDiaryPayload"}

func (ec *executionContext) _RegisterGameParticipantDiaryPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterGameParticipantDiaryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerGameParticipantDiaryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterGameParticipantDiaryPayload")
		case "gameParticipantDiary":
			out.Values[i] = ec._RegisterGameParticipantDiaryPayload_gameParticipantDiary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerGameParticipantFollowPayloadImplementors = []string{"RegisterGameParticipantFollowPayload"}

func (ec *executionContext) _RegisterGameParticipantFollowPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterGameParticipantFollowPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerGameParticipantFollowPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterGameParticipantFollowPayload")
		case "ok":
			out.Values[i] = ec._RegisterGameParticipantFollowPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerGameParticipantGroupPayloadImplementors = []string{"RegisterGameParticipantGroupPayload"}

func (ec *executionContext) _RegisterGameParticipantGroupPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterGameParticipantGroupPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerGameParticipantGroupPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterGameParticipantGroupPayload")
		case "gameParticipantGroup":
			out.Values[i] = ec._RegisterGameParticipantGroupPayload_gameParticipantGroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerGameParticipantIconPayloadImplementors = []string{"RegisterGameParticipantIconPayload"}

func (ec *executionContext) _RegisterGameParticipantIconPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterGameParticipantIconPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerGameParticipantIconPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterGameParticipantIconPayload")
		case "gameParticipantIcon":
			out.Values[i] = ec._RegisterGameParticipantIconPayload_gameParticipantIcon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerGameParticipantPayloadImplementors = []string{"RegisterGameParticipantPayload"}

func (ec *executionContext) _RegisterGameParticipantPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterGameParticipantPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerGameParticipantPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterGameParticipantPayload")
		case "gameParticipant":
			out.Values[i] = ec._RegisterGameParticipantPayload_gameParticipant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerGamePayloadImplementors = []string{"RegisterGamePayload"}

func (ec *executionContext) _RegisterGamePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterGamePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerGamePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterGamePayload")
		case "game":
			out.Values[i] = ec._RegisterGamePayload_game(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerMessageDryRunPayloadImplementors = []string{"RegisterMessageDryRunPayload"}

func (ec *executionContext) _RegisterMessageDryRunPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterMessageDryRunPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerMessageDryRunPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterMessageDryRunPayload")
		case "message":
			out.Values[i] = ec._RegisterMessageDryRunPayload_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerMessageFavoritePayloadImplementors = []string{"RegisterMessageFavoritePayload"}

func (ec *executionContext) _RegisterMessageFavoritePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterMessageFavoritePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerMessageFavoritePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterMessageFavoritePayload")
		case "ok":
			out.Values[i] = ec._RegisterMessageFavoritePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerMessagePayloadImplementors = []string{"RegisterMessagePayload"}

func (ec *executionContext) _RegisterMessagePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterMessagePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerMessagePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterMessagePayload")
		case "ok":
			out.Values[i] = ec._RegisterMessagePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerPlayerProfilePayloadImplementors = []string{"RegisterPlayerProfilePayload"}

func (ec *executionContext) _RegisterPlayerProfilePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterPlayerProfilePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerPlayerProfilePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterPlayerProfilePayload")
		case "playerProfile":
			out.Values[i] = ec._RegisterPlayerProfilePayload_playerProfile(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerPlayerSnsAccountPayloadImplementors = []string{"RegisterPlayerSnsAccountPayload"}

func (ec *executionContext) _RegisterPlayerSnsAccountPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.RegisterPlayerSnsAccountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerPlayerSnsAccountPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterPlayerSnsAccountPayload")
		case "playerSnsAccount":
			out.Values[i] = ec._RegisterPlayerSnsAccountPayload_playerSnsAccount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var simpleGameImplementors = []string{"SimpleGame"}

func (ec *executionContext) _SimpleGame(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.SimpleGame) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, simpleGameImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SimpleGame")
		case "id":
			out.Values[i] = ec._SimpleGame_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._SimpleGame_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._SimpleGame_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "labels":
			out.Values[i] = ec._SimpleGame_labels(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "participantsCount":
			out.Values[i] = ec._SimpleGame_participantsCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "periods":
			out.Values[i] = ec._SimpleGame_periods(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "settings":
			out.Values[i] = ec._SimpleGame_settings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateGameMasterPayloadImplementors = []string{"UpdateGameMasterPayload"}

func (ec *executionContext) _UpdateGameMasterPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdateGameMasterPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateGameMasterPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateGameMasterPayload")
		case "ok":
			out.Values[i] = ec._UpdateGameMasterPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateGameParticipantDiaryPayloadImplementors = []string{"UpdateGameParticipantDiaryPayload"}

func (ec *executionContext) _UpdateGameParticipantDiaryPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdateGameParticipantDiaryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateGameParticipantDiaryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateGameParticipantDiaryPayload")
		case "ok":
			out.Values[i] = ec._UpdateGameParticipantDiaryPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateGameParticipantGroupPayloadImplementors = []string{"UpdateGameParticipantGroupPayload"}

func (ec *executionContext) _UpdateGameParticipantGroupPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdateGameParticipantGroupPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateGameParticipantGroupPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateGameParticipantGroupPayload")
		case "ok":
			out.Values[i] = ec._UpdateGameParticipantGroupPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateGameParticipantIconPayloadImplementors = []string{"UpdateGameParticipantIconPayload"}

func (ec *executionContext) _UpdateGameParticipantIconPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdateGameParticipantIconPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateGameParticipantIconPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateGameParticipantIconPayload")
		case "ok":
			out.Values[i] = ec._UpdateGameParticipantIconPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateGameParticipantProfilePayloadImplementors = []string{"UpdateGameParticipantProfilePayload"}

func (ec *executionContext) _UpdateGameParticipantProfilePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdateGameParticipantProfilePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateGameParticipantProfilePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateGameParticipantProfilePayload")
		case "ok":
			out.Values[i] = ec._UpdateGameParticipantProfilePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateGameParticipantSettingPayloadImplementors = []string{"UpdateGameParticipantSettingPayload"}

func (ec *executionContext) _UpdateGameParticipantSettingPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdateGameParticipantSettingPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateGameParticipantSettingPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateGameParticipantSettingPayload")
		case "ok":
			out.Values[i] = ec._UpdateGameParticipantSettingPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateGamePeriodPayloadImplementors = []string{"UpdateGamePeriodPayload"}

func (ec *executionContext) _UpdateGamePeriodPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdateGamePeriodPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateGamePeriodPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateGamePeriodPayload")
		case "ok":
			out.Values[i] = ec._UpdateGamePeriodPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateGameSettingPayloadImplementors = []string{"UpdateGameSettingPayload"}

func (ec *executionContext) _UpdateGameSettingPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdateGameSettingPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateGameSettingPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateGameSettingPayload")
		case "ok":
			out.Values[i] = ec._UpdateGameSettingPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateGameStatusPayloadImplementors = []string{"UpdateGameStatusPayload"}

func (ec *executionContext) _UpdateGameStatusPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdateGameStatusPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateGameStatusPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateGameStatusPayload")
		case "ok":
			out.Values[i] = ec._UpdateGameStatusPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updatePlayerProfilePayloadImplementors = []string{"UpdatePlayerProfilePayload"}

func (ec *executionContext) _UpdatePlayerProfilePayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdatePlayerProfilePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePlayerProfilePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePlayerProfilePayload")
		case "ok":
			out.Values[i] = ec._UpdatePlayerProfilePayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updatePlayerSnsAccountPayloadImplementors = []string{"UpdatePlayerSnsAccountPayload"}

func (ec *executionContext) _UpdatePlayerSnsAccountPayload(ctx context.Context, sel ast.SelectionSet, obj *gqlmodel.UpdatePlayerSnsAccountPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updatePlayerSnsAccountPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdatePlayerSnsAccountPayload")
		case "ok":
			out.Values[i] = ec._UpdatePlayerSnsAccountPayload_ok(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNChangePeriod2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐChangePeriod(ctx context.Context, v interface{}) (gqlmodel.ChangePeriod, error) {
	res, err := ec.unmarshalInputChangePeriod(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChangePeriodIfNeededPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐChangePeriodIfNeededPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.ChangePeriodIfNeededPayload) graphql.Marshaler {
	return ec._ChangePeriodIfNeededPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNChangePeriodIfNeededPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐChangePeriodIfNeededPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.ChangePeriodIfNeededPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChangePeriodIfNeededPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNChara2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharaᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.Chara) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChara2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐChara(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChara2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐChara(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Chara) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Chara(ctx, sel, v)
}

func (ec *executionContext) marshalNCharaImage2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharaImageᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.CharaImage) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCharaImage2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharaImage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCharaImage2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharaImage(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.CharaImage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CharaImage(ctx, sel, v)
}

func (ec *executionContext) marshalNCharaSize2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharaSize(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.CharaSize) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CharaSize(ctx, sel, v)
}

func (ec *executionContext) marshalNCharachip2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharachipᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.Charachip) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCharachip2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharachip(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCharachip2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharachip(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Charachip) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Charachip(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCharachipsQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharachipsQuery(ctx context.Context, v interface{}) (gqlmodel.CharachipsQuery, error) {
	res, err := ec.unmarshalInputCharachipsQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDateTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDateTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDeleteDirectMessageFavorite2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteDirectMessageFavorite(ctx context.Context, v interface{}) (gqlmodel.DeleteDirectMessageFavorite, error) {
	res, err := ec.unmarshalInputDeleteDirectMessageFavorite(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteDirectMessageFavoritePayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteDirectMessageFavoritePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DeleteDirectMessageFavoritePayload) graphql.Marshaler {
	return ec._DeleteDirectMessageFavoritePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteDirectMessageFavoritePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteDirectMessageFavoritePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DeleteDirectMessageFavoritePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteDirectMessageFavoritePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteGameMaster2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameMaster(ctx context.Context, v interface{}) (gqlmodel.DeleteGameMaster, error) {
	res, err := ec.unmarshalInputDeleteGameMaster(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteGameMasterPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameMasterPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DeleteGameMasterPayload) graphql.Marshaler {
	return ec._DeleteGameMasterPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteGameMasterPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameMasterPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DeleteGameMasterPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteGameMasterPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteGameParticipant2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipant(ctx context.Context, v interface{}) (gqlmodel.DeleteGameParticipant, error) {
	res, err := ec.unmarshalInputDeleteGameParticipant(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeleteGameParticipantFollow2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipantFollow(ctx context.Context, v interface{}) (gqlmodel.DeleteGameParticipantFollow, error) {
	res, err := ec.unmarshalInputDeleteGameParticipantFollow(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteGameParticipantFollowPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipantFollowPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DeleteGameParticipantFollowPayload) graphql.Marshaler {
	return ec._DeleteGameParticipantFollowPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteGameParticipantFollowPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipantFollowPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DeleteGameParticipantFollowPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteGameParticipantFollowPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteGameParticipantIcon2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipantIcon(ctx context.Context, v interface{}) (gqlmodel.DeleteGameParticipantIcon, error) {
	res, err := ec.unmarshalInputDeleteGameParticipantIcon(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteGameParticipantIconPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipantIconPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DeleteGameParticipantIconPayload) graphql.Marshaler {
	return ec._DeleteGameParticipantIconPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteGameParticipantIconPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipantIconPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DeleteGameParticipantIconPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteGameParticipantIconPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNDeleteGameParticipantPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipantPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DeleteGameParticipantPayload) graphql.Marshaler {
	return ec._DeleteGameParticipantPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteGameParticipantPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGameParticipantPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DeleteGameParticipantPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteGameParticipantPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteGamePeriod2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGamePeriod(ctx context.Context, v interface{}) (gqlmodel.DeleteGamePeriod, error) {
	res, err := ec.unmarshalInputDeleteGamePeriod(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteGamePeriodPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGamePeriodPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DeleteGamePeriodPayload) graphql.Marshaler {
	return ec._DeleteGamePeriodPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteGamePeriodPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteGamePeriodPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DeleteGamePeriodPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteGamePeriodPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteMessageFavorite2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteMessageFavorite(ctx context.Context, v interface{}) (gqlmodel.DeleteMessageFavorite, error) {
	res, err := ec.unmarshalInputDeleteMessageFavorite(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteMessageFavoritePayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteMessageFavoritePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DeleteMessageFavoritePayload) graphql.Marshaler {
	return ec._DeleteMessageFavoritePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteMessageFavoritePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeleteMessageFavoritePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DeleteMessageFavoritePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeleteMessageFavoritePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeletePlayerSnsAccount2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeletePlayerSnsAccount(ctx context.Context, v interface{}) (gqlmodel.DeletePlayerSnsAccount, error) {
	res, err := ec.unmarshalInputDeletePlayerSnsAccount(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeletePlayerSnsAccountPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeletePlayerSnsAccountPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DeletePlayerSnsAccountPayload) graphql.Marshaler {
	return ec._DeletePlayerSnsAccountPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeletePlayerSnsAccountPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDeletePlayerSnsAccountPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DeletePlayerSnsAccountPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeletePlayerSnsAccountPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNDesigner2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDesignerᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.Designer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDesigner2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDesigner(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDesigner2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDesigner(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Designer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Designer(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDesignersQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDesignersQuery(ctx context.Context, v interface{}) (gqlmodel.DesignersQuery, error) {
	res, err := ec.unmarshalInputDesignersQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDirectMessage2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessageᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.DirectMessage) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDirectMessage2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDirectMessage2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessage(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DirectMessage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DirectMessage(ctx, sel, v)
}

func (ec *executionContext) marshalNDirectMessageReactions2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessageReactions(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DirectMessageReactions) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DirectMessageReactions(ctx, sel, v)
}

func (ec *executionContext) marshalNDirectMessages2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessages(ctx context.Context, sel ast.SelectionSet, v gqlmodel.DirectMessages) graphql.Marshaler {
	return ec._DirectMessages(ctx, sel, &v)
}

func (ec *executionContext) marshalNDirectMessages2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessages(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DirectMessages) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DirectMessages(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDirectMessagesQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessagesQuery(ctx context.Context, v interface{}) (gqlmodel.DirectMessagesQuery, error) {
	res, err := ec.unmarshalInputDirectMessagesQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGame2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGame(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Game) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Game(ctx, sel, v)
}

func (ec *executionContext) marshalNGameCapacity2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameCapacity(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameCapacity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameCapacity(ctx, sel, v)
}

func (ec *executionContext) marshalNGameCharaSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameCharaSetting(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameCharaSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameCharaSetting(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGameDiariesQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameDiariesQuery(ctx context.Context, v interface{}) (gqlmodel.GameDiariesQuery, error) {
	res, err := ec.unmarshalInputGameDiariesQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGameLabel2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameLabelᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.GameLabel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGameLabel2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameLabel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGameLabel2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameLabel(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameLabel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameLabel(ctx, sel, v)
}

func (ec *executionContext) marshalNGameMaster2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameMasterᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.GameMaster) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGameMaster2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameMaster(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGameMaster2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameMaster(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameMaster) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameMaster(ctx, sel, v)
}

func (ec *executionContext) marshalNGameNotificationCondition2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameNotificationCondition(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameNotificationCondition) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameNotificationCondition(ctx, sel, v)
}

func (ec *executionContext) marshalNGameParticipant2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipant(ctx context.Context, sel ast.SelectionSet, v gqlmodel.GameParticipant) graphql.Marshaler {
	return ec._GameParticipant(ctx, sel, &v)
}

func (ec *executionContext) marshalNGameParticipant2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.GameParticipant) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGameParticipant2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGameParticipant2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipant(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameParticipant) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameParticipant(ctx, sel, v)
}

func (ec *executionContext) marshalNGameParticipantDiary2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantDiaryᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.GameParticipantDiary) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGameParticipantDiary2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantDiary(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGameParticipantDiary2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantDiary(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameParticipantDiary) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameParticipantDiary(ctx, sel, v)
}

func (ec *executionContext) marshalNGameParticipantGroup2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantGroupᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.GameParticipantGroup) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGameParticipantGroup2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGameParticipantGroup2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantGroup(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameParticipantGroup) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameParticipantGroup(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGameParticipantGroupsQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantGroupsQuery(ctx context.Context, v interface{}) (gqlmodel.GameParticipantGroupsQuery, error) {
	res, err := ec.unmarshalInputGameParticipantGroupsQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGameParticipantIcon2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantIconᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.GameParticipantIcon) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGameParticipantIcon2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantIcon(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGameParticipantIcon2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantIcon(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameParticipantIcon) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameParticipantIcon(ctx, sel, v)
}

func (ec *executionContext) marshalNGameParticipantProfile2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantProfile(ctx context.Context, sel ast.SelectionSet, v gqlmodel.GameParticipantProfile) graphql.Marshaler {
	return ec._GameParticipantProfile(ctx, sel, &v)
}

func (ec *executionContext) marshalNGameParticipantProfile2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantProfile(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameParticipantProfile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameParticipantProfile(ctx, sel, v)
}

func (ec *executionContext) marshalNGameParticipantSetting2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantSetting(ctx context.Context, sel ast.SelectionSet, v gqlmodel.GameParticipantSetting) graphql.Marshaler {
	return ec._GameParticipantSetting(ctx, sel, &v)
}

func (ec *executionContext) marshalNGameParticipantSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantSetting(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameParticipantSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameParticipantSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNGamePasswordSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGamePasswordSetting(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GamePasswordSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GamePasswordSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNGamePeriod2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGamePeriod(ctx context.Context, sel ast.SelectionSet, v gqlmodel.GamePeriod) graphql.Marshaler {
	return ec._GamePeriod(ctx, sel, &v)
}

func (ec *executionContext) marshalNGamePeriod2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGamePeriodᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.GamePeriod) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGamePeriod2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGamePeriod(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNGamePeriod2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGamePeriod(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GamePeriod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GamePeriod(ctx, sel, v)
}

func (ec *executionContext) marshalNGameRuleSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameRuleSetting(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameRuleSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameRuleSetting(ctx, sel, v)
}

func (ec *executionContext) marshalNGameSettings2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameSettings(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameSettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGameStatus2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameStatus(ctx context.Context, v interface{}) (gqlmodel.GameStatus, error) {
	var res gqlmodel.GameStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGameStatus2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameStatus(ctx context.Context, sel ast.SelectionSet, v gqlmodel.GameStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNGameTimeSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameTimeSetting(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameTimeSetting) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._GameTimeSetting(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGamesQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGamesQuery(ctx context.Context, v interface{}) (gqlmodel.GamesQuery, error) {
	res, err := ec.unmarshalInputGamesQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNLong2uint64(ctx context.Context, v interface{}) (uint64, error) {
	res, err := graphql.UnmarshalUint64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLong2uint64(ctx context.Context, sel ast.SelectionSet, v uint64) graphql.Marshaler {
	res := graphql.MarshalUint64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMessage2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.Message) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMessage2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMessage2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessage(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Message) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Message(ctx, sel, v)
}

func (ec *executionContext) marshalNMessageContent2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageContent(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.MessageContent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MessageContent(ctx, sel, v)
}

func (ec *executionContext) marshalNMessageNotificationCondition2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageNotificationCondition(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.MessageNotificationCondition) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MessageNotificationCondition(ctx, sel, v)
}

func (ec *executionContext) marshalNMessageReactions2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageReactions(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.MessageReactions) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MessageReactions(ctx, sel, v)
}

func (ec *executionContext) marshalNMessageSender2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageSender(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.MessageSender) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MessageSender(ctx, sel, v)
}

func (ec *executionContext) marshalNMessageTime2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageTime(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.MessageTime) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MessageTime(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMessageType2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageType(ctx context.Context, v interface{}) (gqlmodel.MessageType, error) {
	var res gqlmodel.MessageType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMessageType2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageType(ctx context.Context, sel ast.SelectionSet, v gqlmodel.MessageType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNMessages2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessages(ctx context.Context, sel ast.SelectionSet, v gqlmodel.Messages) graphql.Marshaler {
	return ec._Messages(ctx, sel, &v)
}

func (ec *executionContext) marshalNMessages2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessages(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Messages) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Messages(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMessagesQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessagesQuery(ctx context.Context, v interface{}) (gqlmodel.MessagesQuery, error) {
	res, err := ec.unmarshalInputMessagesQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewDirectMessage2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewDirectMessage(ctx context.Context, v interface{}) (gqlmodel.NewDirectMessage, error) {
	res, err := ec.unmarshalInputNewDirectMessage(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewDirectMessageFavorite2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewDirectMessageFavorite(ctx context.Context, v interface{}) (gqlmodel.NewDirectMessageFavorite, error) {
	res, err := ec.unmarshalInputNewDirectMessageFavorite(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGame2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGame(ctx context.Context, v interface{}) (gqlmodel.NewGame, error) {
	res, err := ec.unmarshalInputNewGame(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGameCapacity2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameCapacity(ctx context.Context, v interface{}) (*gqlmodel.NewGameCapacity, error) {
	res, err := ec.unmarshalInputNewGameCapacity(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGameCharaSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameCharaSetting(ctx context.Context, v interface{}) (*gqlmodel.NewGameCharaSetting, error) {
	res, err := ec.unmarshalInputNewGameCharaSetting(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGameLabel2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameLabelᚄ(ctx context.Context, v interface{}) ([]*gqlmodel.NewGameLabel, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*gqlmodel.NewGameLabel, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNewGameLabel2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameLabel(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNNewGameLabel2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameLabel(ctx context.Context, v interface{}) (*gqlmodel.NewGameLabel, error) {
	res, err := ec.unmarshalInputNewGameLabel(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGameMaster2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameMaster(ctx context.Context, v interface{}) (gqlmodel.NewGameMaster, error) {
	res, err := ec.unmarshalInputNewGameMaster(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGameParticipant2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameParticipant(ctx context.Context, v interface{}) (gqlmodel.NewGameParticipant, error) {
	res, err := ec.unmarshalInputNewGameParticipant(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGameParticipantDiary2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameParticipantDiary(ctx context.Context, v interface{}) (gqlmodel.NewGameParticipantDiary, error) {
	res, err := ec.unmarshalInputNewGameParticipantDiary(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGameParticipantFollow2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameParticipantFollow(ctx context.Context, v interface{}) (gqlmodel.NewGameParticipantFollow, error) {
	res, err := ec.unmarshalInputNewGameParticipantFollow(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGameParticipantGroup2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameParticipantGroup(ctx context.Context, v interface{}) (gqlmodel.NewGameParticipantGroup, error) {
	res, err := ec.unmarshalInputNewGameParticipantGroup(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGameParticipantIcon2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameParticipantIcon(ctx context.Context, v interface{}) (gqlmodel.NewGameParticipantIcon, error) {
	res, err := ec.unmarshalInputNewGameParticipantIcon(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGamePasswordSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGamePasswordSetting(ctx context.Context, v interface{}) (*gqlmodel.NewGamePasswordSetting, error) {
	res, err := ec.unmarshalInputNewGamePasswordSetting(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGameRuleSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameRuleSetting(ctx context.Context, v interface{}) (*gqlmodel.NewGameRuleSetting, error) {
	res, err := ec.unmarshalInputNewGameRuleSetting(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGameSettings2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameSettings(ctx context.Context, v interface{}) (*gqlmodel.NewGameSettings, error) {
	res, err := ec.unmarshalInputNewGameSettings(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewGameTimeSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewGameTimeSetting(ctx context.Context, v interface{}) (*gqlmodel.NewGameTimeSetting, error) {
	res, err := ec.unmarshalInputNewGameTimeSetting(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMessage2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewMessage(ctx context.Context, v interface{}) (gqlmodel.NewMessage, error) {
	res, err := ec.unmarshalInputNewMessage(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewMessageFavorite2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewMessageFavorite(ctx context.Context, v interface{}) (gqlmodel.NewMessageFavorite, error) {
	res, err := ec.unmarshalInputNewMessageFavorite(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNewPlayerSnsAccount2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNewPlayerSnsAccount(ctx context.Context, v interface{}) (gqlmodel.NewPlayerSnsAccount, error) {
	res, err := ec.unmarshalInputNewPlayerSnsAccount(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNotificationCondition2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐNotificationCondition(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.NotificationCondition) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NotificationCondition(ctx, sel, v)
}

func (ec *executionContext) marshalNPlayer2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx context.Context, sel ast.SelectionSet, v gqlmodel.Player) graphql.Marshaler {
	return ec._Player(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlayer2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayerᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.Player) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlayer2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlayer2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Player) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Player(ctx, sel, v)
}

func (ec *executionContext) marshalNPlayerProfile2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayerProfile(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.PlayerProfile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlayerProfile(ctx, sel, v)
}

func (ec *executionContext) marshalNPlayerSnsAccount2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayerSnsAccountᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.PlayerSnsAccount) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlayerSnsAccount2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayerSnsAccount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlayerSnsAccount2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayerSnsAccount(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.PlayerSnsAccount) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PlayerSnsAccount(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlayersQuery2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayersQuery(ctx context.Context, v interface{}) (gqlmodel.PlayersQuery, error) {
	res, err := ec.unmarshalInputPlayersQuery(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRegisterDebugMessages2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDebugMessages(ctx context.Context, v interface{}) (gqlmodel.RegisterDebugMessages, error) {
	res, err := ec.unmarshalInputRegisterDebugMessages(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRegisterDebugMessagesPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDebugMessagesPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterDebugMessagesPayload) graphql.Marshaler {
	return ec._RegisterDebugMessagesPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterDebugMessagesPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDebugMessagesPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterDebugMessagesPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterDebugMessagesPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterDirectMessageDryRunPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDirectMessageDryRunPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterDirectMessageDryRunPayload) graphql.Marshaler {
	return ec._RegisterDirectMessageDryRunPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterDirectMessageDryRunPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDirectMessageDryRunPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterDirectMessageDryRunPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterDirectMessageDryRunPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterDirectMessageFavoritePayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDirectMessageFavoritePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterDirectMessageFavoritePayload) graphql.Marshaler {
	return ec._RegisterDirectMessageFavoritePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterDirectMessageFavoritePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDirectMessageFavoritePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterDirectMessageFavoritePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterDirectMessageFavoritePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterDirectMessagePayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDirectMessagePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterDirectMessagePayload) graphql.Marshaler {
	return ec._RegisterDirectMessagePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterDirectMessagePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterDirectMessagePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterDirectMessagePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterDirectMessagePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterGameMasterPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameMasterPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterGameMasterPayload) graphql.Marshaler {
	return ec._RegisterGameMasterPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterGameMasterPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameMasterPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterGameMasterPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterGameMasterPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterGameParticipantDiaryPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantDiaryPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterGameParticipantDiaryPayload) graphql.Marshaler {
	return ec._RegisterGameParticipantDiaryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterGameParticipantDiaryPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantDiaryPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterGameParticipantDiaryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterGameParticipantDiaryPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterGameParticipantFollowPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantFollowPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterGameParticipantFollowPayload) graphql.Marshaler {
	return ec._RegisterGameParticipantFollowPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterGameParticipantFollowPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantFollowPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterGameParticipantFollowPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterGameParticipantFollowPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterGameParticipantGroupPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantGroupPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterGameParticipantGroupPayload) graphql.Marshaler {
	return ec._RegisterGameParticipantGroupPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterGameParticipantGroupPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantGroupPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterGameParticipantGroupPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterGameParticipantGroupPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterGameParticipantIconPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantIconPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterGameParticipantIconPayload) graphql.Marshaler {
	return ec._RegisterGameParticipantIconPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterGameParticipantIconPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantIconPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterGameParticipantIconPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterGameParticipantIconPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterGameParticipantPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterGameParticipantPayload) graphql.Marshaler {
	return ec._RegisterGameParticipantPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterGameParticipantPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGameParticipantPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterGameParticipantPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterGameParticipantPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterGamePayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGamePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterGamePayload) graphql.Marshaler {
	return ec._RegisterGamePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterGamePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterGamePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterGamePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterGamePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterMessageDryRunPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterMessageDryRunPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterMessageDryRunPayload) graphql.Marshaler {
	return ec._RegisterMessageDryRunPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterMessageDryRunPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterMessageDryRunPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterMessageDryRunPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterMessageDryRunPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterMessageFavoritePayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterMessageFavoritePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterMessageFavoritePayload) graphql.Marshaler {
	return ec._RegisterMessageFavoritePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterMessageFavoritePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterMessageFavoritePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterMessageFavoritePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterMessageFavoritePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterMessagePayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterMessagePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterMessagePayload) graphql.Marshaler {
	return ec._RegisterMessagePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterMessagePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterMessagePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterMessagePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterMessagePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRegisterPlayerSnsAccountPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterPlayerSnsAccountPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.RegisterPlayerSnsAccountPayload) graphql.Marshaler {
	return ec._RegisterPlayerSnsAccountPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegisterPlayerSnsAccountPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐRegisterPlayerSnsAccountPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.RegisterPlayerSnsAccountPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RegisterPlayerSnsAccountPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNSimpleGame2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐSimpleGameᚄ(ctx context.Context, sel ast.SelectionSet, v []*gqlmodel.SimpleGame) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSimpleGame2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐSimpleGame(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSimpleGame2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐSimpleGame(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.SimpleGame) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SimpleGame(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSnsType2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐSnsType(ctx context.Context, v interface{}) (gqlmodel.SnsType, error) {
	var res gqlmodel.SnsType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSnsType2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐSnsType(ctx context.Context, sel ast.SelectionSet, v gqlmodel.SnsType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNUpdateCharaSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateCharaSetting(ctx context.Context, v interface{}) (*gqlmodel.UpdateCharaSetting, error) {
	res, err := ec.unmarshalInputUpdateCharaSetting(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateGameCapacity2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameCapacity(ctx context.Context, v interface{}) (*gqlmodel.UpdateGameCapacity, error) {
	res, err := ec.unmarshalInputUpdateGameCapacity(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateGameLabel2ᚕᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameLabelᚄ(ctx context.Context, v interface{}) ([]*gqlmodel.UpdateGameLabel, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*gqlmodel.UpdateGameLabel, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUpdateGameLabel2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameLabel(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNUpdateGameLabel2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameLabel(ctx context.Context, v interface{}) (*gqlmodel.UpdateGameLabel, error) {
	res, err := ec.unmarshalInputUpdateGameLabel(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateGameMaster2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameMaster(ctx context.Context, v interface{}) (gqlmodel.UpdateGameMaster, error) {
	res, err := ec.unmarshalInputUpdateGameMaster(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateGameMasterPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameMasterPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdateGameMasterPayload) graphql.Marshaler {
	return ec._UpdateGameMasterPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateGameMasterPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameMasterPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdateGameMasterPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateGameMasterPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateGameNotificationCondition2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameNotificationCondition(ctx context.Context, v interface{}) (*gqlmodel.UpdateGameNotificationCondition, error) {
	res, err := ec.unmarshalInputUpdateGameNotificationCondition(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateGameParticipantDiary2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantDiary(ctx context.Context, v interface{}) (gqlmodel.UpdateGameParticipantDiary, error) {
	res, err := ec.unmarshalInputUpdateGameParticipantDiary(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateGameParticipantDiaryPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantDiaryPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdateGameParticipantDiaryPayload) graphql.Marshaler {
	return ec._UpdateGameParticipantDiaryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateGameParticipantDiaryPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantDiaryPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdateGameParticipantDiaryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateGameParticipantDiaryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateGameParticipantGroup2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantGroup(ctx context.Context, v interface{}) (gqlmodel.UpdateGameParticipantGroup, error) {
	res, err := ec.unmarshalInputUpdateGameParticipantGroup(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateGameParticipantGroupPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantGroupPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdateGameParticipantGroupPayload) graphql.Marshaler {
	return ec._UpdateGameParticipantGroupPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateGameParticipantGroupPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantGroupPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdateGameParticipantGroupPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateGameParticipantGroupPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateGameParticipantIcon2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantIcon(ctx context.Context, v interface{}) (gqlmodel.UpdateGameParticipantIcon, error) {
	res, err := ec.unmarshalInputUpdateGameParticipantIcon(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateGameParticipantIconPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantIconPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdateGameParticipantIconPayload) graphql.Marshaler {
	return ec._UpdateGameParticipantIconPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateGameParticipantIconPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantIconPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdateGameParticipantIconPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateGameParticipantIconPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateGameParticipantProfile2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantProfile(ctx context.Context, v interface{}) (gqlmodel.UpdateGameParticipantProfile, error) {
	res, err := ec.unmarshalInputUpdateGameParticipantProfile(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateGameParticipantProfilePayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantProfilePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdateGameParticipantProfilePayload) graphql.Marshaler {
	return ec._UpdateGameParticipantProfilePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateGameParticipantProfilePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantProfilePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdateGameParticipantProfilePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateGameParticipantProfilePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateGameParticipantSetting2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantSetting(ctx context.Context, v interface{}) (gqlmodel.UpdateGameParticipantSetting, error) {
	res, err := ec.unmarshalInputUpdateGameParticipantSetting(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateGameParticipantSettingPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantSettingPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdateGameParticipantSettingPayload) graphql.Marshaler {
	return ec._UpdateGameParticipantSettingPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateGameParticipantSettingPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameParticipantSettingPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdateGameParticipantSettingPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateGameParticipantSettingPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateGamePasswordSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGamePasswordSetting(ctx context.Context, v interface{}) (*gqlmodel.UpdateGamePasswordSetting, error) {
	res, err := ec.unmarshalInputUpdateGamePasswordSetting(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateGamePeriod2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGamePeriod(ctx context.Context, v interface{}) (gqlmodel.UpdateGamePeriod, error) {
	res, err := ec.unmarshalInputUpdateGamePeriod(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateGamePeriodPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGamePeriodPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdateGamePeriodPayload) graphql.Marshaler {
	return ec._UpdateGamePeriodPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateGamePeriodPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGamePeriodPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdateGamePeriodPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateGamePeriodPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateGameRuleSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameRuleSetting(ctx context.Context, v interface{}) (*gqlmodel.UpdateGameRuleSetting, error) {
	res, err := ec.unmarshalInputUpdateGameRuleSetting(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateGameSetting2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameSetting(ctx context.Context, v interface{}) (gqlmodel.UpdateGameSetting, error) {
	res, err := ec.unmarshalInputUpdateGameSetting(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateGameSettingPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameSettingPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdateGameSettingPayload) graphql.Marshaler {
	return ec._UpdateGameSettingPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateGameSettingPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameSettingPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdateGameSettingPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateGameSettingPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateGameSettings2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameSettings(ctx context.Context, v interface{}) (*gqlmodel.UpdateGameSettings, error) {
	res, err := ec.unmarshalInputUpdateGameSettings(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateGameStatus2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameStatus(ctx context.Context, v interface{}) (gqlmodel.UpdateGameStatus, error) {
	res, err := ec.unmarshalInputUpdateGameStatus(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdateGameStatusPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameStatusPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdateGameStatusPayload) graphql.Marshaler {
	return ec._UpdateGameStatusPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdateGameStatusPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameStatusPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdateGameStatusPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdateGameStatusPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateGameTimeSetting2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateGameTimeSetting(ctx context.Context, v interface{}) (*gqlmodel.UpdateGameTimeSetting, error) {
	res, err := ec.unmarshalInputUpdateGameTimeSetting(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateMessageNotificationCondition2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateMessageNotificationCondition(ctx context.Context, v interface{}) (*gqlmodel.UpdateMessageNotificationCondition, error) {
	res, err := ec.unmarshalInputUpdateMessageNotificationCondition(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePlayerProfile2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdatePlayerProfile(ctx context.Context, v interface{}) (gqlmodel.UpdatePlayerProfile, error) {
	res, err := ec.unmarshalInputUpdatePlayerProfile(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdatePlayerProfilePayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdatePlayerProfilePayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdatePlayerProfilePayload) graphql.Marshaler {
	return ec._UpdatePlayerProfilePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdatePlayerProfilePayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdatePlayerProfilePayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdatePlayerProfilePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdatePlayerProfilePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdatePlayerSnsAccount2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdatePlayerSnsAccount(ctx context.Context, v interface{}) (gqlmodel.UpdatePlayerSnsAccount, error) {
	res, err := ec.unmarshalInputUpdatePlayerSnsAccount(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpdatePlayerSnsAccountPayload2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdatePlayerSnsAccountPayload(ctx context.Context, sel ast.SelectionSet, v gqlmodel.UpdatePlayerSnsAccountPayload) graphql.Marshaler {
	return ec._UpdatePlayerSnsAccountPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpdatePlayerSnsAccountPayload2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdatePlayerSnsAccountPayload(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.UpdatePlayerSnsAccountPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UpdatePlayerSnsAccountPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOChara2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐChara(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Chara) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Chara(ctx, sel, v)
}

func (ec *executionContext) marshalOCharachip2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐCharachip(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Charachip) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Charachip(ctx, sel, v)
}

func (ec *executionContext) unmarshalODateTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalODesigner2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDesigner(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Designer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Designer(ctx, sel, v)
}

func (ec *executionContext) marshalODirectMessage2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐDirectMessage(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.DirectMessage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DirectMessage(ctx, sel, v)
}

func (ec *executionContext) marshalOGame2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGame(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Game) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Game(ctx, sel, v)
}

func (ec *executionContext) marshalOGameParticipant2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipant(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameParticipant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GameParticipant(ctx, sel, v)
}

func (ec *executionContext) marshalOGameParticipantDiary2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantDiary(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameParticipantDiary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GameParticipantDiary(ctx, sel, v)
}

func (ec *executionContext) marshalOGameParticipantIcon2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameParticipantIcon(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.GameParticipantIcon) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GameParticipantIcon(ctx, sel, v)
}

func (ec *executionContext) unmarshalOGameStatus2ᚕchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameStatusᚄ(ctx context.Context, v interface{}) ([]gqlmodel.GameStatus, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]gqlmodel.GameStatus, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNGameStatus2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameStatus(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOGameStatus2ᚕchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameStatusᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.GameStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGameStatus2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐGameStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOLong2ᚖuint64(ctx context.Context, v interface{}) (*uint64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUint64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLong2ᚖuint64(ctx context.Context, sel ast.SelectionSet, v *uint64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUint64(*v)
	return res
}

func (ec *executionContext) marshalOMessage2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessage(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Message) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Message(ctx, sel, v)
}

func (ec *executionContext) marshalOMessageReceiver2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageReceiver(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.MessageReceiver) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MessageReceiver(ctx, sel, v)
}

func (ec *executionContext) marshalOMessageRecipient2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageRecipient(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.MessageRecipient) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MessageRecipient(ctx, sel, v)
}

func (ec *executionContext) marshalOMessageSender2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageSender(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.MessageSender) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MessageSender(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMessageType2ᚕchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageTypeᚄ(ctx context.Context, v interface{}) ([]gqlmodel.MessageType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]gqlmodel.MessageType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMessageType2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMessageType2ᚕchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []gqlmodel.MessageType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMessageType2chatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐMessageType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOPageableQuery2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPageableQuery(ctx context.Context, v interface{}) (*gqlmodel.PageableQuery, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPageableQuery(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPlayer2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayer(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.Player) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Player(ctx, sel, v)
}

func (ec *executionContext) marshalOPlayerProfile2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐPlayerProfile(ctx context.Context, sel ast.SelectionSet, v *gqlmodel.PlayerProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PlayerProfile(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOUpdateNotificationCondition2ᚖchatᚑroleᚑplayᚋmiddlewareᚋgraphᚋgqlmodelᚐUpdateNotificationCondition(ctx context.Context, v interface{}) (*gqlmodel.UpdateNotificationCondition, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdateNotificationCondition(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (*graphql.Upload, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUpload(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUpload2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v *graphql.Upload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalUpload(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
