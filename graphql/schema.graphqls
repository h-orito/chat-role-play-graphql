# GraphQL schema example
#
# https://gqlgen.com/getting-started/

####################################################

directive @isAuthenticated on FIELD_DEFINITION

# RFC3339 e.g. 2019-11-19T18:00:00+09:00
scalar DateTime

scalar Long

scalar Upload

####################################################

type Charachip {
  id: ID!
  name: String!
  designer: Designer!
  charas: [Chara!]!
}

type Designer {
  id: ID!
  name: String!
}

type Chara {
  id: ID!
  name: String!
  images: [CharaImage!]!
}

type CharaImage {
  id: ID!
  type: String!
  size: CharaSize!
  url: String!
}

type CharaSize {
  width: Int!
  height: Int!
}

####################################################

type Game {
  id: ID!
  name: String!
  status: GameStatus!
  gameMasters: [GameMaster!]!
  participants(paging: PageableQuery): [GameParticipant!]!
  periods: [GamePeriod!]!
  settings: GameSettings!
}

type SimpleGame {
  id: ID!
  name: String!
  status: GameStatus!
  participantsCount: Int!
  periods: [GamePeriod!]!
  settings: GameSettings!
}

enum GameStatus {
  Closed
  Opening
  Recruiting
  Progress
  Finished
  Cancelled
}

type GameMaster {
  id: ID!
  player: Player!
  isProducer: Boolean!
}

type GameParticipant {
  id: ID!
  name: String!
  entryNumber: Int!
  player: Player!
  memo: String
  profileIcon: GameParticipantIcon
  lastAccessedAt: DateTime!
  isGone: Boolean!
  followParticipantIds: [ID!]!
  followerParticipantIds: [ID!]!
}

type GameParticipantSetting {
  notification: NotificationCondition!
}

type NotificationCondition {
  discordWebhookUrl: String
  game: GameNotificationCondition!
  message: MessageNotificationCondition!
}

type GameNotificationCondition {
  participate: Boolean!
  start: Boolean!
}

type MessageNotificationCondition {
  reply: Boolean!
  directMessage: Boolean!
  keywords: [String!]!
}

type GameParticipantProfile {
  participantId: ID!
  name: String!
  profileImageUrl: String
  introduction: String
  followsCount: Int!
  followersCount: Int!
}

type GameParticipantIcon {
  id: ID!
  url: String!
  width: Int!
  height: Int!
  displayOrder: Int!
}

type GamePeriod {
  id: ID!
  count: Int!
  name: String!
  startAt: DateTime!
  endAt: DateTime!
}

type GameParticipantDiary {
  id: ID!
  participant: GameParticipant!
  period: GamePeriod!
  title: String!
  body: String!
}

type GameSettings {
  chara: GameCharaSetting!
  capacity: GameCapacity!
  time: GameTimeSetting!
  rule: GameRuleSetting!
  password: GamePasswordSetting!
}

type GameCharaSetting {
  charachips: [Charachip!]!
  canOriginalCharacter: Boolean!
}

type GameCapacity {
  min: Int!
  max: Int!
}

type GameTimeSetting {
  periodPrefix: String
  periodSuffix: String
  periodIntervalSeconds: Int!
  openAt: DateTime!
  startParticipateAt: DateTime!
  startGameAt: DateTime!
  finishGameAt: DateTime!
}

type GameRuleSetting {
  isGameMasterProducer: Boolean!
  canShorten: Boolean!
  canSendDirectMessage: Boolean!
}

type GamePasswordSetting {
  hasPassword: Boolean!
}

type GameParticipantGroup {
  id: ID!
  name: String!
  participants: [GameParticipant!]!
  latestUnixTimeMilli: Long!
}

####################################################

type Player {
  id: ID!
  name: String!
  profile: PlayerProfile
  designer: Designer
}

type PlayerProfile {
  profileImageUrl: String
  introduction: String
  snsAccounts: [PlayerSnsAccount!]!
}

type PlayerSnsAccount {
  id: ID!
  type: SnsType!
  name: String
  url: String!
}

enum SnsType {
  Twitter
  Mastodon
  Misskey
  Discord
  Github
  WebSite
  Pixiv
}

####################################################

type Messages implements Pageable {
  list: [Message!]!
  allPageCount: Int!
  hasPrePage: Boolean!
  hasNextPage: Boolean!
  currentPageNumber: Int
  isDesc: Boolean!
  latestUnixTimeMilli: Long!
}

type Message {
  id: ID!
  content: MessageContent!
  time: MessageTime!
  sender: MessageSender
  replyTo: MessageRecipient
  reactions: MessageReactions!
}

type MessageContent {
  type: MessageType!
  number: Int!
  text: String!
  isConvertDisabled: Boolean!
}

enum MessageType {
  TalkNormal
  Monologue
  Description
  SystemPublic
  SystemPrivate
}

type MessageTime {
  sendAt: DateTime!
  sendUnixTimeMilli: Long!
}

type MessageSender {
  participantId: ID!
  name: String!
  icon: GameParticipantIcon!
}

type MessageRecipient {
  messageId: ID!
  participantId: ID!
}

type MessageReactions {
  replyCount: Int!
  favoriteCount: Int!
  favoriteParticipantIds: [ID!]!
}

type DirectMessages implements Pageable {
  list: [DirectMessage!]!
  allPageCount: Int!
  hasPrePage: Boolean!
  hasNextPage: Boolean!
  currentPageNumber: Int
  isDesc: Boolean!
  latestUnixTimeMilli: Long!
}

type DirectMessage {
  id: ID!
  participantGroupId: ID!
  content: MessageContent!
  time: MessageTime!
  sender: MessageSender!
  reactions: DirectMessageReactions!
}

type DirectMessageReactions {
  favoriteCounts: Int!
  favoriteParticipantIds: [ID!]!
}

####################################################

interface Pageable {
  allPageCount: Int!
  hasPrePage: Boolean!
  hasNextPage: Boolean!
  currentPageNumber: Int
  isDesc: Boolean!
}

####################################################

type Query {
  designers(query: DesignersQuery!): [Designer!]!
  designer(id: ID!): Designer
  charachips(query: CharachipsQuery!): [Charachip!]!
  charachip(id: ID!): Charachip
  chara(id: ID!): Chara
  games(query: GamesQuery!): [SimpleGame!]!
  game(id: ID!): Game
  myGameParticipant(gameId: ID!): GameParticipant
  gameParticipantProfile(participantId: ID!): GameParticipantProfile!
  gameParticipantIcons(participantId: ID!): [GameParticipantIcon!]!
  gameParticipantFollows(participantId: ID!): [GameParticipant!]!
  gameParticipantFollowers(participantId: ID!): [GameParticipant!]!
  gameParticipantSetting(gameId: ID!): GameParticipantSetting!
  gameDiaries(query: GameDiariesQuery!): [GameParticipantDiary!]!
  gameDiary(diaryId: ID!): GameParticipantDiary
  players(query: PlayersQuery!): [Player!]!
  player(id: ID!): Player
  myPlayer: Player
  messages(gameId: ID!, query: MessagesQuery!): Messages!
  messagesLatestUnixTimeMilli(gameId: ID!, query: MessagesQuery!): Long!
  message(gameId: ID!, messageId: ID!): Message
  messageReplies(gameId: ID!, messageId: ID!): [Message!]!
  messageFavoriteGameParticipants(
    gameId: ID!
    messageId: ID!
  ): [GameParticipant!]!
  gameParticipantGroups(
    gameId: ID!
    query: GameParticipantGroupsQuery!
  ): [GameParticipantGroup!]!
  directMessages(gameId: ID!, query: DirectMessagesQuery!): DirectMessages!
  directMessagesLatestUnixTimeMilli(
    gameId: ID!
    query: DirectMessagesQuery!
  ): Long!
  directMessage(gameId: ID!, directMessageId: ID!): DirectMessage
  directMessageFavoriteGameParticipants(
    gameId: ID!
    directMessageId: ID!
  ): [GameParticipant!]!
}

input PageableQuery {
  pageSize: Int!
  pageNumber: Int!
  isDesc: Boolean!
}

input CharachipsQuery {
  ids: [ID!]
  name: String
  paging: PageableQuery
}

input DesignersQuery {
  ids: [ID!]
  Name: String
  paging: PageableQuery
}

input GamesQuery {
  ids: [ID!]
  name: String
  statuses: [GameStatus!]
  paging: PageableQuery
}

input GameDiariesQuery {
  participantId: ID
  periodId: ID
}

input PlayersQuery {
  ids: [ID!]
  name: String
  paging: PageableQuery
}

input ParticipantsQuery {
  ids: [ID!]
  playerIds: [ID!]
  paging: PageableQuery
}

input MessagesQuery {
  ids: [ID!]
  periodId: ID
  types: [MessageType!]
  senderIds: [ID!]
  replyToMessageId: ID
  keywords: [String!]
  sinceAt: DateTime
  untilAt: DateTime
  offsetUnixTimeMilli: Long
  paging: PageableQuery
}

input GameParticipantGroupsQuery {
  memberParticipantId: ID
}

input DirectMessagesQuery {
  ids: [ID!]
  participantGroupId: ID!
  periodId: ID
  types: [MessageType!]
  senderIds: [ID!]
  keywords: [String!]
  sinceAt: DateTime
  untilAt: DateTime
  offsetUnixTimeMilli: Long
  paging: PageableQuery
}

####################################################

type Mutation {
  # chara
  registerDesigner(input: NewDesigner!): RegisterDesignerPayload!
    @isAuthenticated
  updateDesigner(input: UpdateDesigner!): UpdateDesignerPayload!
    @isAuthenticated
  registerCharachip(input: NewCharachip!): RegisterCharachipPayload!
    @isAuthenticated
  updateCharachip(input: UpdateCharachip!): UpdateCharachipPayload!
    @isAuthenticated
  registerCharachipChara(input: NewChara!): RegisterCharaPayload!
    @isAuthenticated
  updateChara(input: UpdateChara!): UpdateCharaPayload! @isAuthenticated
  registerCharaImage(input: NewCharaImage!): RegisterCharaImagePayload!
    @isAuthenticated
  updateCharaImage(input: UpdateCharaImage!): UpdateCharaImagePayload!

  # game
  registerGame(input: NewGame!): RegisterGamePayload! @isAuthenticated
  registerGameMaster(input: NewGameMaster!): RegisterGameMasterPayload!
    @isAuthenticated
  updateGameMaster(input: UpdateGameMaster!): UpdateGameMasterPayload!
    @isAuthenticated
  deleteGameMaster(input: DeleteGameMaster!): DeleteGameMasterPayload!
    @isAuthenticated
  updateGameStatus(input: UpdateGameStatus!): UpdateGameStatusPayload!
    @isAuthenticated
  updateGameSetting(input: UpdateGameSetting!): UpdateGameSettingPayload!
    @isAuthenticated
  updateGamePeriod(input: UpdateGamePeriod!): UpdateGamePeriodPayload!
    @isAuthenticated
  changePeriodIfNeeded(input: ChangePeriod!): ChangePeriodIfNeededPayload!
    @isAuthenticated

  # game participant
  registerGameParticipant(
    input: NewGameParticipant!
  ): RegisterGameParticipantPayload! @isAuthenticated
  updateGameParticipantProfile(
    input: UpdateGameParticipantProfile!
  ): UpdateGameParticipantProfilePayload! @isAuthenticated
  registerGameParticipantIcon(
    input: NewGameParticipantIcon!
  ): RegisterGameParticipantIconPayload! @isAuthenticated
  updateGameParticipantIcon(
    input: UpdateGameParticipantIcon!
  ): UpdateGameParticipantIconPayload! @isAuthenticated
  deleteGameParticipantIcon(
    input: DeleteGameParticipantIcon!
  ): DeleteGameParticipantIconPayload! @isAuthenticated
  updateGameParticipantSetting(
    input: UpdateGameParticipantSetting!
  ): UpdateGameParticipantSettingPayload! @isAuthenticated
  deleteGameParticipant(
    input: DeleteGameParticipant!
  ): DeleteGameParticipantPayload! @isAuthenticated
  registerGameParticipantFollow(
    input: NewGameParticipantFollow!
  ): RegisterGameParticipantFollowPayload! @isAuthenticated
  deleteGameParticipantFollow(
    input: DeleteGameParticipantFollow!
  ): DeleteGameParticipantFollowPayload! @isAuthenticated
  registerGameParticipantDiary(
    input: NewGameParticipantDiary!
  ): RegisterGameParticipantDiaryPayload! @isAuthenticated
  updateGameParticipantDiary(
    input: UpdateGameParticipantDiary!
  ): UpdateGameParticipantDiaryPayload! @isAuthenticated

  # player
  updatePlayerProfile(input: UpdatePlayerProfile!): UpdatePlayerProfilePayload!
    @isAuthenticated
  registerPlayerSnsAccount(
    input: NewPlayerSnsAccount!
  ): RegisterPlayerSnsAccountPayload! @isAuthenticated
  updatePlayerSnsAccount(
    input: UpdatePlayerSnsAccount!
  ): UpdatePlayerSnsAccountPayload! @isAuthenticated
  deletePlayerSnsAccount(
    input: DeletePlayerSnsAccount!
  ): DeletePlayerSnsAccountPayload! @isAuthenticated

  # message
  registerMessageDryRun(input: NewMessage!): RegisterMessageDryRunPayload!
    @isAuthenticated
  registerMessage(input: NewMessage!): RegisterMessagePayload! @isAuthenticated
  # TODO: updateMessage（メッセージ編集機能）
  registerMessageFavorite(
    input: NewMessageFavorite!
  ): RegisterMessageFavoritePayload! @isAuthenticated
  deleteMessageFavorite(
    input: DeleteMessageFavorite!
  ): DeleteMessageFavoritePayload! @isAuthenticated
  registerDirectMessageDryRun(
    input: NewDirectMessage!
  ): RegisterDirectMessageDryRunPayload! @isAuthenticated
  registerDirectMessage(
    input: NewDirectMessage!
  ): RegisterDirectMessagePayload! @isAuthenticated
  registerDirectMessageFavorite(
    input: NewDirectMessageFavorite!
  ): RegisterDirectMessageFavoritePayload! @isAuthenticated
  deleteDirectMessageFavorite(
    input: DeleteDirectMessageFavorite!
  ): DeleteDirectMessageFavoritePayload! @isAuthenticated
  registerGameParticipantGroup(
    input: NewGameParticipantGroup!
  ): RegisterGameParticipantGroupPayload! @isAuthenticated
  updateGameParticipantGroup(
    input: UpdateGameParticipantGroup!
  ): UpdateGameParticipantGroupPayload! @isAuthenticated
}

## chara

input NewDesigner {
  name: String!
}

type RegisterDesignerPayload {
  designer: Designer!
}

input UpdateDesigner {
  id: ID!
  name: String!
}

type UpdateDesignerPayload {
  ok: Boolean!
}

input NewCharachip {
  name: String!
  designerId: ID!
}

type RegisterCharachipPayload {
  charachip: Charachip!
}

input UpdateCharachip {
  id: ID!
  name: String!
}

type UpdateCharachipPayload {
  ok: Boolean!
}

input NewChara {
  charachipId: ID!
  name: String!
}

type RegisterCharaPayload {
  chara: Chara!
}

input UpdateChara {
  id: ID!
  name: String!
}

type UpdateCharaPayload {
  ok: Boolean!
}

input NewCharaImage {
  charaId: ID!
  type: String!
  file: Upload!
  width: Int!
  height: Int!
}

type RegisterCharaImagePayload {
  charaImage: CharaImage!
}

input UpdateCharaImage {
  id: ID!
  type: String!
  file: Upload!
  width: Int!
  height: Int!
}

type UpdateCharaImagePayload {
  ok: Boolean!
}

## game

input NewGame {
  name: String!
  settings: NewGameSettings!
}

input NewGameSettings {
  chara: NewGameCharaSetting!
  capacity: NewGameCapacity!
  time: NewGameTimeSetting!
  rule: NewGameRuleSetting!
  password: NewGamePasswordSetting!
}

input NewGameCharaSetting {
  charachipIds: [Int!]!
  canOriginalCharacter: Boolean!
}

input NewGameCapacity {
  min: Int!
  max: Int!
}

input NewGameTimeSetting {
  periodPrefix: String
  periodSuffix: String
  periodIntervalSeconds: Int!
  openAt: DateTime!
  startParticipateAt: DateTime!
  startGameAt: DateTime!
  finishGameAt: DateTime!
}

input NewGameRuleSetting {
  isGameMasterProducer: Boolean!
  canShorten: Boolean!
  canSendDirectMessage: Boolean!
}

input NewGamePasswordSetting {
  password: String
}

type RegisterGamePayload {
  game: Game!
}

input NewGameMaster {
  gameId: ID!
  playerId: ID!
  isProducer: Boolean!
}

type RegisterGameMasterPayload {
  gameMaster: GameMaster!
}

input UpdateGameMaster {
  gameId: ID!
  id: ID!
  isProducer: Boolean!
}

type UpdateGameMasterPayload {
  ok: Boolean!
}

input DeleteGameMaster {
  gameId: ID!
  id: ID!
}

type DeleteGameMasterPayload {
  ok: Boolean!
}

input UpdateGameSetting {
  gameId: ID!
  name: String!
  settings: UpdateGameSettings!
}

input UpdateGameSettings {
  chara: UpdateCharaSetting!
  capacity: UpdateGameCapacity!
  time: UpdateGameTimeSetting!
  rule: UpdateGameRuleSetting!
  password: UpdateGamePasswordSetting!
}

input UpdateCharaSetting {
  charachipIds: [Int!]!
  canOriginalCharacter: Boolean!
}

input UpdateGameCapacity {
  min: Int!
  max: Int!
}

input UpdateGameTimeSetting {
  periodPrefix: String
  periodSuffix: String
  periodIntervalSeconds: Int!
  openAt: DateTime!
  startParticipateAt: DateTime!
  startGameAt: DateTime!
  finishGameAt: DateTime!
}

input UpdateGameRuleSetting {
  isGameMasterProducer: Boolean!
  canShorten: Boolean!
  canSendDirectMessage: Boolean!
}

input UpdateGamePasswordSetting {
  password: String
}

type UpdateGameSettingPayload {
  ok: Boolean!
}

input UpdateGameStatus {
  gameId: ID!
  status: GameStatus!
}

type UpdateGameStatusPayload {
  ok: Boolean!
}

input UpdateGamePeriod {
  gameId: ID!
  name: String!
  startAt: DateTime!
  endAt: DateTime!
}

type UpdateGamePeriodPayload {
  ok: Boolean!
}

input ChangePeriod {
  gameId: ID!
}

type ChangePeriodIfNeededPayload {
  ok: Boolean!
}

## game participant

input NewGameParticipant {
  gameId: ID!
  name: String!
  charaId: ID
}

type RegisterGameParticipantPayload {
  gameParticipant: GameParticipant!
}

input UpdateGameParticipantProfile {
  gameId: ID!
  name: String!
  profileImageFile: Upload
  profileImageUrl: String
  profileIconId: ID
  introduction: String
  memo: String
}

type UpdateGameParticipantProfilePayload {
  ok: Boolean!
}

input NewGameParticipantIcon {
  gameId: ID!
  iconFile: Upload!
  width: Int!
  height: Int!
}

type RegisterGameParticipantIconPayload {
  gameParticipantIcon: GameParticipantIcon!
}

input UpdateGameParticipantIcon {
  gameId: ID!
  id: ID!
  displayOrder: Int!
}

type UpdateGameParticipantIconPayload {
  ok: Boolean!
}

input DeleteGameParticipantIcon {
  gameId: ID!
  iconId: ID!
}

type DeleteGameParticipantIconPayload {
  ok: Boolean!
}

input UpdateGameParticipantSetting {
  gameId: ID!
  notification: UpdateNotificationCondition
}

input UpdateNotificationCondition {
  discordWebhookUrl: String
  game: UpdateGameNotificationCondition!
  message: UpdateMessageNotificationCondition!
}

input UpdateGameNotificationCondition {
  participate: Boolean!
  start: Boolean!
}

input UpdateMessageNotificationCondition {
  reply: Boolean!
  directMessage: Boolean!
  keywords: [String!]!
}

type UpdateGameParticipantSettingPayload {
  ok: Boolean!
}

input DeleteGameParticipant {
  gameId: ID!
}

type DeleteGameParticipantPayload {
  ok: Boolean!
}

input NewGameParticipantFollow {
  gameId: ID!
  targetGameParticipantId: ID!
}

type RegisterGameParticipantFollowPayload {
  ok: Boolean!
}

input DeleteGameParticipantFollow {
  gameId: ID!
  targetGameParticipantId: ID!
}

type DeleteGameParticipantFollowPayload {
  ok: Boolean!
}

input NewGameParticipantDiary {
  gameId: ID!
  periodId: ID!
  title: String!
  body: String!
}

type RegisterGameParticipantDiaryPayload {
  gameParticipantDiary: GameParticipantDiary!
}

input UpdateGameParticipantDiary {
  gameId: ID!
  id: ID!
  title: String!
  body: String!
}

type UpdateGameParticipantDiaryPayload {
  ok: Boolean!
}

## player

input NewPlayerProfile {
  name: String!
  profileImageFile: Upload
  introduction: String
}

type RegisterPlayerProfilePayload {
  playerProfile: PlayerProfile!
}

input UpdatePlayerProfile {
  name: String!
  profileImageFile: Upload
  profileImageUrl: String
  introduction: String
}

type UpdatePlayerProfilePayload {
  ok: Boolean!
}

input NewPlayerSnsAccount {
  type: SnsType!
  accountName: String!
  accountUrl: String!
}

type RegisterPlayerSnsAccountPayload {
  playerSnsAccount: PlayerSnsAccount!
}

input UpdatePlayerSnsAccount {
  id: ID!
  type: SnsType!
  accountName: String!
  accountUrl: String!
}

type UpdatePlayerSnsAccountPayload {
  ok: Boolean!
}

input DeletePlayerSnsAccount {
  id: ID!
}

type DeletePlayerSnsAccountPayload {
  ok: Boolean!
}

## message

input NewMessage {
  gameId: ID!
  type: MessageType!
  iconId: ID
  name: String
  replyToMessageId: ID
  text: String!
  isConvertDisabled: Boolean!
}

type RegisterMessageDryRunPayload {
  message: Message!
}

type RegisterMessagePayload {
  ok: Boolean!
}

input NewMessageFavorite {
  gameId: ID!
  messageId: ID!
}

type RegisterMessageFavoritePayload {
  ok: Boolean!
}

input DeleteMessageFavorite {
  gameId: ID!
  messageId: ID!
}

type DeleteMessageFavoritePayload {
  ok: Boolean!
}

input NewDirectMessage {
  gameId: ID!
  gameParticipantGroupId: ID!
  type: MessageType!
  iconId: ID!
  name: String!
  text: String!
  isConvertDisabled: Boolean!
}

type RegisterDirectMessageDryRunPayload {
  directMessage: DirectMessage!
}

type RegisterDirectMessagePayload {
  ok: Boolean!
}

input NewDirectMessageFavorite {
  gameId: ID!
  directMessageId: ID!
}

type RegisterDirectMessageFavoritePayload {
  ok: Boolean!
}

input DeleteDirectMessageFavorite {
  gameId: ID!
  directMessageId: ID!
}

type DeleteDirectMessageFavoritePayload {
  ok: Boolean!
}

input NewGameParticipantGroup {
  gameId: ID!
  name: String!
  gameParticipantIds: [ID!]!
}

type RegisterGameParticipantGroupPayload {
  gameParticipantGroup: GameParticipantGroup!
}

input UpdateGameParticipantGroup {
  gameId: ID!
  id: ID!
  name: String!
}

type UpdateGameParticipantGroupPayload {
  ok: Boolean!
}

####################################################

# TODO: subscription
